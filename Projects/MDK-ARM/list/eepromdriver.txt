; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o"bhd2 configuration\eepromdriver.o" --asm_dir=.\list\ --list_dir=.\list\ --depend="bhd2 configuration\eepromdriver.d" --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\..\Drivers\CMSIS\Device\ST\STM32F2xx\Include -I..\..\Drivers\CMSIS\Include -I..\..\Middlewares\ST\STM32_USB_Device_Library\Class\CDC\Inc -I..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc -I..\..\Drivers\STM32F2xx_HAL_Driver\Inc -I..\..\Inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_HAL_DRIVER -DSTM32F215xx --omf_browse="bhd2 configuration\eepromdriver.crf" ..\..\Src\core\eepromDriver.c]
                          THUMB

                          AREA ||i.EEPROM_DRIVER_dataTransmition||, CODE, READONLY, ALIGN=1

                  EEPROM_DRIVER_dataTransmition PROC
;;;7      
;;;8      tdStatus EEPROM_DRIVER_dataTransmition(tdSpiDevice *_pPevice, uint8_t *_pTxBuff, uint8_t *_pRxBuff, uint16_t _size)
000000  f7ffbffe          B.W      SPI_DRIVER_dataTransmition
;;;9      	{
;;;10     	return SPI_DRIVER_dataTransmition( _pPevice, _pTxBuff, _pRxBuff, _size);
;;;11     	}
;;;12     
                          ENDP


                          AREA ||i.EEPROM_DRIVER_eraseRange||, CODE, READONLY, ALIGN=1

                  EEPROM_DRIVER_eraseRange PROC
;;;214    
;;;215    tdStatus EEPROM_DRIVER_eraseRange(tdSpiDevice *_pDevice, uint16_t _addressFrom, uint16_t _addressTo)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;216    	{
000004  460d              MOV      r5,r1
000006  4607              MOV      r7,r0
;;;217    	if( _addressFrom > _addressTo )
000008  4291              CMP      r1,r2
00000a  d81b              BHI      |L2.68|
;;;218    		return Fail;
;;;219    
;;;220    	tdStatus status;
;;;221    	uint16_t size = _addressTo - _addressFrom;
00000c  1b50              SUBS     r0,r2,r5
00000e  1cc0              ADDS     r0,r0,#3
;;;222    	uint16_t transmissionSize = EEPROM_DRIVER_FM25V05_DATA_OP_INSTRUCTION_SIZE + EEPROM_DRIVER_FM25V05_DATA_ADDRESS_SIZE + size;
000010  b286              UXTH     r6,r0
;;;223    
;;;224    	#if EEPROM_DRIVER_CONSTANT_TRANSFER_BUFFER_SIZE > 0
;;;225    	uint8_t txBuff[ EEPROM_DRIVER_CONSTANT_TRANSFER_BUFFER_SIZE ];
;;;226    	if( transmissionSize > EEPROM_DRIVER_CONSTANT_TRANSFER_BUFFER_SIZE )
;;;227    		return Fail;
;;;228    	#else
;;;229    	uint8_t *txBuff = (uint8_t *)malloc( transmissionSize );
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       malloc
000018  0004              MOVS     r4,r0
;;;230    	if( txBuff == NULL )
00001a  d013              BEQ      |L2.68|
;;;231    		return Fail;
;;;232    	#endif
;;;233    
;;;234    	memset(txBuff, 0x00, transmissionSize);
00001c  4631              MOV      r1,r6
00001e  f7fffffe          BL       __aeabi_memclr
;;;235    
;;;236    	txBuff[ 0 ] = (uint8_t)WriteData;
000022  2002              MOVS     r0,#2
000024  7020              STRB     r0,[r4,#0]
;;;237    	txBuff[ 1 ] = (_addressFrom >> 8) & 0xFF;
000026  0a28              LSRS     r0,r5,#8
000028  7060              STRB     r0,[r4,#1]
;;;238    	txBuff[ 2 ] = (_addressFrom >> 0) & 0xFF;
00002a  70a5              STRB     r5,[r4,#2]
;;;239    
;;;240    	status = EEPROM_DRIVER_writeBuffer_(_pDevice, txBuff, transmissionSize);
00002c  4632              MOV      r2,r6
00002e  4621              MOV      r1,r4
000030  4638              MOV      r0,r7
000032  f7fffffe          BL       EEPROM_DRIVER_writeBuffer_
000036  4605              MOV      r5,r0
;;;241    
;;;242    	#if EEPROM_DRIVER_CONSTANT_TRANSFER_BUFFER_SIZE == 0
;;;243    	free( txBuff );
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       free
;;;244    	#endif
;;;245    
;;;246    	return status;
00003e  4628              MOV      r0,r5
                  |L2.64|
;;;247    	}
000040  e8bd81f0          POP      {r4-r8,pc}
                  |L2.68|
000044  2002              MOVS     r0,#2                 ;231
000046  e7fb              B        |L2.64|
;;;248    
                          ENDP


                          AREA ||i.EEPROM_DRIVER_format||, CODE, READONLY, ALIGN=2

                  EEPROM_DRIVER_format PROC
;;;248    
;;;249    tdStatus EEPROM_DRIVER_format(tdSpiDevice *_pDevice)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;250    	{
;;;251    	// For more effectiveness make this function like EEPROM_DRIVER_eraseRange
;;;252    	// Allocate memory only once and then use it till you need
;;;253    	// In current realization allocation and free used ((EEPROM_DRIVER_FM25V05_SIZE / SIZE_TO_ERASE) - 1) dummy times
;;;254    	#if EEPROM_DRIVER_CONSTANT_TRANSFER_BUFFER_SIZE > 0
;;;255    		#define SIZE_TO_ERASE (EEPROM_DRIVER_CONSTANT_TRANSFER_BUFFER_SIZE - (EEPROM_DRIVER_FM25V05_DATA_OP_INSTRUCTION_SIZE + EEPROM_DRIVER_FM25V05_DATA_ADDRESS_SIZE) )
;;;256    	#else
;;;257    		#define SIZE_TO_ERASE 1024 /* 1 kb */
;;;258    	#endif
;;;259    	int32_t addressFrom, addressTo;
;;;260    
;;;261    	for( addressFrom = 0x0000, addressTo = SIZE_TO_ERASE; addressFrom <= EEPROM_DRIVER_FM25V05_SIZE - SIZE_TO_ERASE; addressFrom += SIZE_TO_ERASE, addressTo += SIZE_TO_ERASE )
;;;262    		{
;;;263    		if( (addressTo < EEPROM_DRIVER_FM25V05_SIZE - 1) == 0 )
000004  4f0d              LDR      r7,|L3.60|
000006  4e0e              LDR      r6,|L3.64|
000008  4680              MOV      r8,r0                 ;250
00000a  2500              MOVS     r5,#0                 ;261
00000c  f44f6480          MOV      r4,#0x400             ;261
                  |L3.16|
000010  42bc              CMP      r4,r7
000012  db00              BLT      |L3.22|
;;;264    			addressTo = EEPROM_DRIVER_FM25V05_SIZE - 1;
000014  463c              MOV      r4,r7
                  |L3.22|
;;;265    
;;;266    		if( EEPROM_DRIVER_eraseRange(_pDevice, addressFrom, addressTo) != Ok )
000016  b2a2              UXTH     r2,r4
000018  b2a9              UXTH     r1,r5
00001a  4640              MOV      r0,r8
00001c  f7fffffe          BL       EEPROM_DRIVER_eraseRange
000020  2801              CMP      r0,#1
000022  d002              BEQ      |L3.42|
;;;267    			return Fail;
000024  2002              MOVS     r0,#2
                  |L3.38|
;;;268    		}
;;;269    
;;;270    	return Ok;
;;;271    	#undef SIZE_TO_ERASE
;;;272    	}
000026  e8bd81f0          POP      {r4-r8,pc}
                  |L3.42|
00002a  f5056580          ADD      r5,r5,#0x400
00002e  f5046480          ADD      r4,r4,#0x400
000032  42b5              CMP      r5,r6                 ;261
000034  ddec              BLE      |L3.16|
000036  2001              MOVS     r0,#1                 ;270
000038  e7f5              B        |L3.38|
;;;273    
                          ENDP

00003a  0000              DCW      0x0000
                  |L3.60|
                          DCD      0x000fffff
                  |L3.64|
                          DCD      0x000ffc00

                          AREA ||i.EEPROM_DRIVER_read||, CODE, READONLY, ALIGN=1

                  EEPROM_DRIVER_read PROC
;;;114    
;;;115    tdStatus EEPROM_DRIVER_read(tdSpiDevice *_pDevice, uint16_t _address, uint8_t *_pBuff, uint16_t _size)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;116    	{
000004  1cdb              ADDS     r3,r3,#3
000006  4680              MOV      r8,r0
;;;117    	tdStatus status;
;;;118    	uint16_t transmissionSize = EEPROM_DRIVER_FM25V05_DATA_OP_INSTRUCTION_SIZE + EEPROM_DRIVER_FM25V05_DATA_ADDRESS_SIZE + _size;
000008  b29e              UXTH     r6,r3
00000a  4617              MOV      r7,r2                 ;116
00000c  460d              MOV      r5,r1                 ;116
;;;119    
;;;120    	#if EEPROM_DRIVER_CONSTANT_TRANSFER_BUFFER_SIZE > 0
;;;121    	uint8_t txBuff[ EEPROM_DRIVER_CONSTANT_TRANSFER_BUFFER_SIZE ];
;;;122    	if( transmissionSize > EEPROM_DRIVER_CONSTANT_TRANSFER_BUFFER_SIZE )
;;;123    		return Fail;
;;;124    	#else
;;;125    	uint8_t *txBuff = (uint8_t *)malloc( transmissionSize );
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       malloc
000014  0004              MOVS     r4,r0
;;;126    	if( txBuff == NULL )
000016  d015              BEQ      |L4.68|
;;;127    		return Fail;
;;;128    	#endif
;;;129    
;;;130    	memset(txBuff, 0x00, transmissionSize);
000018  4631              MOV      r1,r6
00001a  f7fffffe          BL       __aeabi_memclr
;;;131    
;;;132    	txBuff[ 0 ] = (uint8_t)ReadData;
00001e  2003              MOVS     r0,#3
000020  7020              STRB     r0,[r4,#0]
;;;133    	txBuff[ 1 ] = (_address >> 8) & 0xFF;
000022  0a28              LSRS     r0,r5,#8
000024  7060              STRB     r0,[r4,#1]
;;;134    	txBuff[ 2 ] = (_address >> 0) & 0xFF;
000026  70a5              STRB     r5,[r4,#2]
                  |L4.40|
;;;135    
;;;136    	do
;;;137    		{
;;;138    		status = EEPROM_DRIVER_dataTransmition(_pDevice, txBuff, _pBuff,  transmissionSize); // read data
000028  4633              MOV      r3,r6
00002a  463a              MOV      r2,r7
00002c  4621              MOV      r1,r4
00002e  4640              MOV      r0,r8
000030  f7fffffe          BL       EEPROM_DRIVER_dataTransmition
000034  0005              MOVS     r5,r0
;;;139    		} while( status == Busy );	// Trying to read till ok
000036  d0f7              BEQ      |L4.40|
;;;140    
;;;141    	#if EEPROM_DRIVER_CONSTANT_TRANSFER_BUFFER_SIZE == 0
;;;142    	free( txBuff );
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       free
;;;143    	#endif
;;;144    
;;;145    	return status;
00003e  4628              MOV      r0,r5
                  |L4.64|
;;;146    	}
000040  e8bd81f0          POP      {r4-r8,pc}
                  |L4.68|
000044  2002              MOVS     r0,#2                 ;127
000046  e7fb              B        |L4.64|
;;;147    
                          ENDP


                          AREA ||i.EEPROM_DRIVER_readBuffer||, CODE, READONLY, ALIGN=1

                  EEPROM_DRIVER_readBuffer PROC
;;;168    // rxBuff copying to _pBuff. So you have additional O(n), n = _size
;;;169    tdStatus EEPROM_DRIVER_readBuffer(tdSpiDevice *_pDevice, uint16_t _address, uint8_t *_pBuff, uint16_t _size)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;170    	{
000004  4681              MOV      r9,r0
;;;171    	uint8_t *pRxBuffer;
;;;172    	uint16_t bytesToCopy;
;;;173    	tdStatus status;
;;;174    	uint16_t transmissionSize = EEPROM_DRIVER_FM25V05_DATA_OP_INSTRUCTION_SIZE + EEPROM_DRIVER_FM25V05_DATA_ADDRESS_SIZE + _size;
000006  1cd8              ADDS     r0,r3,#3
000008  b287              UXTH     r7,r0
00000a  461d              MOV      r5,r3                 ;170
00000c  4616              MOV      r6,r2                 ;170
00000e  4688              MOV      r8,r1                 ;170
;;;175    
;;;176    	#if EEPROM_DRIVER_CONSTANT_TRANSFER_BUFFER_SIZE > 0
;;;177    	uint8_t rxBuff[ EEPROM_DRIVER_CONSTANT_TRANSFER_BUFFER_SIZE ];
;;;178    	if( transmissionSize > EEPROM_DRIVER_CONSTANT_TRANSFER_BUFFER_SIZE )
;;;179    		return Fail;
;;;180    	#else
;;;181    	uint8_t *rxBuff = (uint8_t *)malloc( transmissionSize );
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       malloc
000016  0004              MOVS     r4,r0
;;;182    	if( rxBuff == NULL )
000018  d009              BEQ      |L5.46|
;;;183    		return Fail;
;;;184    	#endif
;;;185    
;;;186    	status = EEPROM_DRIVER_read(_pDevice, _address, rxBuff, transmissionSize);
00001a  4602              MOV      r2,r0
00001c  463b              MOV      r3,r7
00001e  4641              MOV      r1,r8
000020  4648              MOV      r0,r9
000022  f7fffffe          BL       EEPROM_DRIVER_read
000026  4607              MOV      r7,r0
;;;187    
;;;188    	if( status == Ok )
000028  2801              CMP      r0,#1
00002a  d003              BEQ      |L5.52|
00002c  e00b              B        |L5.70|
                  |L5.46|
00002e  2002              MOVS     r0,#2                 ;183
                  |L5.48|
;;;189    		{
;;;190    		pRxBuffer = &rxBuff[ 3 ]; // Required information starts at *(rxBuff + 3)
;;;191    
;;;192    		bytesToCopy = _size;
;;;193    		while( bytesToCopy-- )
;;;194    			{
;;;195    			*_pBuff++ = *pRxBuffer++;
;;;196    			}
;;;197    		}
;;;198    
;;;199    	#if EEPROM_DRIVER_CONSTANT_TRANSFER_BUFFER_SIZE == 0
;;;200    	free( rxBuff );
;;;201    	#endif
;;;202    
;;;203    	return status;
;;;204    	}
000030  e8bd87f0          POP      {r4-r10,pc}
                  |L5.52|
000034  1ce0              ADDS     r0,r4,#3              ;190
000036  e003              B        |L5.64|
                  |L5.56|
000038  f8101b01          LDRB     r1,[r0],#1            ;195
00003c  f8061b01          STRB     r1,[r6],#1            ;195
                  |L5.64|
000040  1e6d              SUBS     r5,r5,#1              ;193
000042  b2ad              UXTH     r5,r5                 ;193
000044  d2f8              BCS      |L5.56|
                  |L5.70|
000046  4620              MOV      r0,r4                 ;200
000048  f7fffffe          BL       free
00004c  4638              MOV      r0,r7                 ;203
00004e  e7ef              B        |L5.48|
;;;205    
                          ENDP


                          AREA ||i.EEPROM_DRIVER_readBuffer_first3BytesDummy||, CODE, READONLY, ALIGN=1

                  EEPROM_DRIVER_readBuffer_first3BytesDummy PROC
;;;209    // _size = 3 + sizeof(dataYouWantToGet)
;;;210    tdStatus EEPROM_DRIVER_readBuffer_first3BytesDummy(tdSpiDevice *_pDevice, uint16_t _address, uint8_t *_pBuff, uint16_t _size)
000000  f7ffbffe          B.W      EEPROM_DRIVER_read
;;;211    	{
;;;212    	return EEPROM_DRIVER_read(_pDevice, _address, _pBuff, _size);
;;;213    	}
;;;214    
                          ENDP


                          AREA ||i.EEPROM_DRIVER_readByte||, CODE, READONLY, ALIGN=1

                  EEPROM_DRIVER_readByte PROC
;;;147    
;;;148    tdStatus EEPROM_DRIVER_readByte(tdSpiDevice *_pDevice, uint16_t _address, uint8_t *_byte)
000000  b538              PUSH     {r3-r5,lr}
;;;149    	{
000002  4614              MOV      r4,r2
;;;150    	tdStatus status;
;;;151    	uint8_t rxData[ EEPROM_DRIVER_FM25V05_DATA_OP_INSTRUCTION_SIZE + EEPROM_DRIVER_FM25V05_DATA_ADDRESS_SIZE + EEPROM_DRIVER_FM25V05_DATA_BYTE_SIZE ];
;;;152    
;;;153    	status = EEPROM_DRIVER_read(_pDevice, _address, rxData, EEPROM_DRIVER_FM25V05_DATA_BYTE_SIZE );
000004  2301              MOVS     r3,#1
000006  466a              MOV      r2,sp
000008  f7fffffe          BL       EEPROM_DRIVER_read
;;;154    
;;;155    	if( status == Ok )
00000c  2801              CMP      r0,#1
00000e  d002              BEQ      |L7.22|
;;;156    		{
;;;157    		*_byte = rxData[ 3 ]; // Required information starts at *(rxBuff + 3)
;;;158    		}
;;;159    	else
;;;160    		{
;;;161    		*_byte = 0;
000010  2100              MOVS     r1,#0
                  |L7.18|
000012  7021              STRB     r1,[r4,#0]            ;157
;;;162    		}
;;;163    
;;;164    	return status;
;;;165    	}
000014  bd38              POP      {r3-r5,pc}
                  |L7.22|
000016  f89d1003          LDRB     r1,[sp,#3]            ;157
00001a  e7fa              B        |L7.18|
;;;166    
                          ENDP


                          AREA ||i.EEPROM_DRIVER_write||, CODE, READONLY, ALIGN=2

                  EEPROM_DRIVER_write PROC
;;;12     
;;;13     tdStatus EEPROM_DRIVER_write(tdSpiDevice *_pDevice, uint8_t *_pBuff, uint16_t _size)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;14     	{
000004  4680              MOV      r8,r0
;;;15     	tdStatus status;
;;;16     	uint8_t writeEnableCommand[ EEPROM_DRIVER_FM25V05_DATA_OP_INSTRUCTION_SIZE ] = { (uint8_t)WriteEnable };
000006  a013              ADR      r0,|L8.84|
000008  460f              MOV      r7,r1                 ;14
00000a  6800              LDR      r0,[r0,#0]
;;;17     	uint8_t writeEnableReadBack[ EEPROM_DRIVER_FM25V05_DATA_OP_INSTRUCTION_SIZE ] = { 0x00 };
00000c  9000              STR      r0,[sp,#0]
00000e  2000              MOVS     r0,#0
;;;18     
;;;19     	#if EEPROM_DRIVER_CONSTANT_TRANSFER_BUFFER_SIZE > 0
;;;20     	uint8_t rxBuff[ EEPROM_DRIVER_CONSTANT_TRANSFER_BUFFER_SIZE ];
;;;21     	if( _size > EEPROM_DRIVER_CONSTANT_TRANSFER_BUFFER_SIZE )
;;;22     		return Fail;
;;;23     	#else
;;;24     	uint8_t *rxBuff = (uint8_t *)malloc( (unsigned int)_size );
000010  9001              STR      r0,[sp,#4]
000012  4616              MOV      r6,r2                 ;14
000014  4610              MOV      r0,r2
000016  f7fffffe          BL       malloc
00001a  0005              MOVS     r5,r0
;;;25     	if( rxBuff == NULL )
00001c  d00a              BEQ      |L8.52|
                  |L8.30|
;;;26     		return Fail;
;;;27     	#endif
;;;28     
;;;29     	do
;;;30     		{
;;;31     		status = EEPROM_DRIVER_dataTransmition(_pDevice, writeEnableCommand, writeEnableReadBack, EEPROM_DRIVER_FM25V05_DATA_OP_INSTRUCTION_SIZE); // set write enable
00001e  2301              MOVS     r3,#1
000020  aa01              ADD      r2,sp,#4
000022  4669              MOV      r1,sp
000024  4640              MOV      r0,r8
000026  f7fffffe          BL       EEPROM_DRIVER_dataTransmition
00002a  0004              MOVS     r4,r0
;;;32     		} while( status == Busy );	// Trying to transmit till ok
00002c  d0f7              BEQ      |L8.30|
;;;33     
;;;34     	if( status == Ok )
00002e  2c01              CMP      r4,#1
000030  d003              BEQ      |L8.58|
000032  e00a              B        |L8.74|
                  |L8.52|
000034  2002              MOVS     r0,#2                 ;26
                  |L8.54|
;;;35     		{
;;;36     		// write enable setted, so we can transmit data
;;;37     		do
;;;38     			{
;;;39     			status = EEPROM_DRIVER_dataTransmition(_pDevice, _pBuff, rxBuff, _size); // write data
;;;40     			} while( status == Busy );	// Trying to transmit till ok
;;;41     		}
;;;42     
;;;43     	#if EEPROM_DRIVER_CONSTANT_TRANSFER_BUFFER_SIZE == 0
;;;44     	free( (void *)rxBuff );
;;;45     	#endif
;;;46     
;;;47     	return status;
;;;48     	}
000036  e8bd81fc          POP      {r2-r8,pc}
                  |L8.58|
00003a  4633              MOV      r3,r6                 ;39
00003c  462a              MOV      r2,r5                 ;39
00003e  4639              MOV      r1,r7                 ;39
000040  4640              MOV      r0,r8                 ;39
000042  f7fffffe          BL       EEPROM_DRIVER_dataTransmition
000046  0004              MOVS     r4,r0                 ;39
000048  d0f7              BEQ      |L8.58|
                  |L8.74|
00004a  4628              MOV      r0,r5                 ;44
00004c  f7fffffe          BL       free
000050  4620              MOV      r0,r4                 ;47
000052  e7f0              B        |L8.54|
;;;49     
                          ENDP

                  |L8.84|
000054  0600              DCB      6,0
000056  00                DCB      0
000057  00                DCB      0

                          AREA ||i.EEPROM_DRIVER_writeBuffer||, CODE, READONLY, ALIGN=2

                  EEPROM_DRIVER_writeBuffer PROC
;;;64     // _pBuffer copying to txBuff. So you have additional O(n), n = _size
;;;65     tdStatus EEPROM_DRIVER_writeBuffer(tdSpiDevice *_pDevice, uint16_t _address, uint8_t *_pBuffer, uint16_t _size)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;66     	{
000004  4681              MOV      r9,r0
;;;67     	tdStatus status;
;;;68     	uint8_t *pTxBuff;
;;;69     	uint16_t bytesToCopy;
;;;70     	uint16_t transmissionSize = EEPROM_DRIVER_FM25V05_DATA_OP_INSTRUCTION_SIZE + EEPROM_DRIVER_FM25V05_DATA_ADDRESS_SIZE + _size;
000006  1cd8              ADDS     r0,r3,#3
000008  b280              UXTH     r0,r0
00000a  461d              MOV      r5,r3                 ;66
00000c  4616              MOV      r6,r2                 ;66
00000e  460f              MOV      r7,r1                 ;66
000010  4680              MOV      r8,r0
;;;71     
;;;72     	#if EEPROM_DRIVER_CONSTANT_TRANSFER_BUFFER_SIZE > 0
;;;73     	uint8_t txBuff[ EEPROM_DRIVER_CONSTANT_TRANSFER_BUFFER_SIZE ];
;;;74     	if( transmissionSize > EEPROM_DRIVER_CONSTANT_TRANSFER_BUFFER_SIZE )
;;;75     		return Fail;
;;;76     	#else
;;;77     	uint8_t *txBuff = (uint8_t *)malloc( (unsigned int)transmissionSize );
000012  f7fffffe          BL       malloc
000016  0004              MOVS     r4,r0
;;;78     	if( txBuff == NULL )
;;;79     		return Fail;
;;;80     	#endif
;;;81     
;;;82     	txBuff[ 0 ] = (uint8_t)WriteData;
000018  f04f0002          MOV      r0,#2
00001c  d017              BEQ      |L9.78|
00001e  7020              STRB     r0,[r4,#0]
;;;83     	txBuff[ 1 ] = (_address >> 8) & 0xFF;
000020  0a38              LSRS     r0,r7,#8
000022  7060              STRB     r0,[r4,#1]
;;;84     	txBuff[ 2 ] = (_address >> 0) & 0xFF;
000024  70a7              STRB     r7,[r4,#2]
;;;85     	pTxBuff = &txBuff[ 3 ];
000026  1ce0              ADDS     r0,r4,#3
;;;86     
;;;87     	bytesToCopy = _size;
;;;88     	while( bytesToCopy-- )
000028  e004              B        |L9.52|
;;;89     		{
;;;90     		*pTxBuff++ = *_pBuffer++;
00002a  bf00              NOP      
                  |L9.44|
00002c  f8161b01          LDRB     r1,[r6],#1
000030  f8001b01          STRB     r1,[r0],#1
                  |L9.52|
000034  1e6d              SUBS     r5,r5,#1              ;88
000036  b2ad              UXTH     r5,r5                 ;88
000038  d2f8              BCS      |L9.44|
;;;91     		}
;;;92     
;;;93     	status = EEPROM_DRIVER_write(_pDevice, txBuff, transmissionSize);
00003a  4642              MOV      r2,r8
00003c  4621              MOV      r1,r4
00003e  4648              MOV      r0,r9
000040  f7fffffe          BL       EEPROM_DRIVER_write
000044  4605              MOV      r5,r0
;;;94     
;;;95     	#if EEPROM_DRIVER_CONSTANT_TRANSFER_BUFFER_SIZE == 0
;;;96     	free( txBuff );
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       free
;;;97     	#endif
;;;98     
;;;99     	return status;
00004c  4628              MOV      r0,r5
                  |L9.78|
;;;100    	}
00004e  e8bd87f0          POP      {r4-r10,pc}
;;;101    
                          ENDP


                          AREA ||i.EEPROM_DRIVER_writeBuffer_||, CODE, READONLY, ALIGN=1

                  EEPROM_DRIVER_writeBuffer_ PROC
;;;109    // Note that _size = 3 + sizeof(yourData)
;;;110    tdStatus EEPROM_DRIVER_writeBuffer_(tdSpiDevice *_pDevice, uint8_t *_pBuffer, uint16_t _size)
000000  f7ffbffe          B.W      EEPROM_DRIVER_write
;;;111    	{
;;;112    	return EEPROM_DRIVER_write(_pDevice, _pBuffer, _size);
;;;113    	}
;;;114    
                          ENDP


                          AREA ||i.EEPROM_DRIVER_writeByte||, CODE, READONLY, ALIGN=1

                  EEPROM_DRIVER_writeByte PROC
;;;49     
;;;50     tdStatus EEPROM_DRIVER_writeByte(tdSpiDevice *_pDevice, uint16_t _address, uint8_t _byte)
000000  b508              PUSH     {r3,lr}
;;;51     	{
;;;52     	uint8_t txBuff[ EEPROM_DRIVER_FM25V05_DATA_OP_INSTRUCTION_SIZE + EEPROM_DRIVER_FM25V05_DATA_ADDRESS_SIZE + EEPROM_DRIVER_FM25V05_DATA_BYTE_SIZE ];
;;;53     
;;;54     	txBuff[ 0 ] = (uint8_t)WriteData;
000002  2302              MOVS     r3,#2
000004  f88d3000          STRB     r3,[sp,#0]
;;;55     	txBuff[ 1 ] = (_address >> 8) & 0xFF;
000008  0a0b              LSRS     r3,r1,#8
00000a  f88d3001          STRB     r3,[sp,#1]
;;;56     	txBuff[ 2 ] = (_address >> 0) & 0xFF;
00000e  f88d1002          STRB     r1,[sp,#2]
;;;57     	txBuff[ 3 ] = _byte;
000012  f88d2003          STRB     r2,[sp,#3]
;;;58     
;;;59     	return EEPROM_DRIVER_write(_pDevice, txBuff, EEPROM_DRIVER_FM25V05_DATA_OP_INSTRUCTION_SIZE + EEPROM_DRIVER_FM25V05_DATA_ADDRESS_SIZE + EEPROM_DRIVER_FM25V05_DATA_BYTE_SIZE );
000016  2204              MOVS     r2,#4
000018  4669              MOV      r1,sp
00001a  f7fffffe          BL       EEPROM_DRIVER_write
;;;60     	}
00001e  bd08              POP      {r3,pc}
;;;61     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\Src\\core\\eepromDriver.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_eepromDriver_c_64dfc241____REV16|
#line 129 "..\\..\\Drivers\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_eepromDriver_c_64dfc241____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_eepromDriver_c_64dfc241____REVSH|
#line 144
|__asm___14_eepromDriver_c_64dfc241____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
