; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o"bhd2 configuration\stm32f2xx_hal_gpio.o" --asm_dir=.\list\ --list_dir=.\list\ --depend="bhd2 configuration\stm32f2xx_hal_gpio.d" --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\..\Drivers\CMSIS\Device\ST\STM32F2xx\Include -I..\..\Drivers\CMSIS\Include -I..\..\Middlewares\ST\STM32_USB_Device_Library\Class\CDC\Inc -I..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc -I..\..\Drivers\STM32F2xx_HAL_Driver\Inc -I..\..\Inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_HAL_DRIVER -DSTM32F215xx --omf_browse="bhd2 configuration\stm32f2xx_hal_gpio.crf" ..\..\Drivers\STM32F2xx_HAL_Driver\Src\stm32f2xx_hal_gpio.c]
                          THUMB

                          AREA ||i.HAL_GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_DeInit PROC
;;;291      */
;;;292    void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;293    {
;;;294      uint32_t position;
;;;295      uint32_t ioposition = 0x00;
;;;296      uint32_t iocurrent = 0x00;
;;;297      uint32_t tmp = 0x00;
;;;298    
;;;299      /* Configure the port pins */
;;;300      for(position = 0; position < GPIO_NUMBER; position++)
000004  2200              MOVS     r2,#0
;;;301      {
;;;302        /* Get the IO position */
;;;303        ioposition = ((uint32_t)0x01) << position;
000006  f04f0901          MOV      r9,#1
00000a  bf00              NOP      
                  |L1.12|
00000c  fa09f402          LSL      r4,r9,r2
;;;304        /* Get the current IO position */
;;;305        iocurrent = (GPIO_Pin) & ioposition;
000010  ea010304          AND      r3,r1,r4
;;;306    
;;;307        if(iocurrent == ioposition)
000014  42a3              CMP      r3,r4
000016  d13b              BNE      |L1.144|
;;;308        {
;;;309          /*------------------------- GPIO Mode Configuration --------------------*/
;;;310          /* Configure IO Direction in Input Floting Mode */
;;;311          GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
000018  6806              LDR      r6,[r0,#0]
00001a  0057              LSLS     r7,r2,#1
00001c  2503              MOVS     r5,#3
00001e  40bd              LSLS     r5,r5,r7
000020  43ae              BICS     r6,r6,r5
000022  6006              STR      r6,[r0,#0]
;;;312    
;;;313          /* Configure the default Alternate Function in current IO */
;;;314          GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
000024  08d6              LSRS     r6,r2,#3
000026  eb000686          ADD      r6,r0,r6,LSL #2
00002a  f8d6c020          LDR      r12,[r6,#0x20]
00002e  0757              LSLS     r7,r2,#29
000030  ea4f68d7          LSR      r8,r7,#27
000034  f04f0a0f          MOV      r10,#0xf
000038  fa0af708          LSL      r7,r10,r8
00003c  ea2c0c07          BIC      r12,r12,r7
000040  f8c6c020          STR      r12,[r6,#0x20]
;;;315    
;;;316          /* Configure the default value for IO Speed */
;;;317          GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
000044  6886              LDR      r6,[r0,#8]
000046  43ae              BICS     r6,r6,r5
000048  6086              STR      r6,[r0,#8]
;;;318    
;;;319          /* Configure the default value IO Output Type */
;;;320          GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
00004a  6846              LDR      r6,[r0,#4]
00004c  43a6              BICS     r6,r6,r4
00004e  6046              STR      r6,[r0,#4]
;;;321    
;;;322          /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
;;;323          GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
000050  68c4              LDR      r4,[r0,#0xc]
000052  43ac              BICS     r4,r4,r5
000054  60c4              STR      r4,[r0,#0xc]
;;;324    
;;;325    
;;;326          /*------------------------- EXTI Mode Configuration --------------------*/
;;;327          /* Configure the External Interrupt or event for the current IO */
;;;328          tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
000056  0794              LSLS     r4,r2,#30
000058  0f25              LSRS     r5,r4,#28
00005a  fa0af405          LSL      r4,r10,r5
;;;329          SYSCFG->EXTICR[position >> 2] &= ~tmp;
00005e  4d0f              LDR      r5,|L1.156|
000060  f0220603          BIC      r6,r2,#3
000064  4435              ADD      r5,r5,r6
000066  f8d56808          LDR      r6,[r5,#0x808]
00006a  43a6              BICS     r6,r6,r4
00006c  f8c56808          STR      r6,[r5,#0x808]
;;;330    
;;;331          /* Clear EXTI line configuration */
;;;332          EXTI->IMR &= ~((uint32_t)iocurrent);
000070  4c0b              LDR      r4,|L1.160|
000072  6825              LDR      r5,[r4,#0]
000074  439d              BICS     r5,r5,r3
000076  6025              STR      r5,[r4,#0]
;;;333          EXTI->EMR &= ~((uint32_t)iocurrent);
000078  1d24              ADDS     r4,r4,#4
00007a  6825              LDR      r5,[r4,#0]
00007c  439d              BICS     r5,r5,r3
00007e  6025              STR      r5,[r4,#0]
;;;334    
;;;335          /* Clear Rising Falling edge configuration */
;;;336          EXTI->RTSR &= ~((uint32_t)iocurrent);
000080  1d24              ADDS     r4,r4,#4
000082  6825              LDR      r5,[r4,#0]
000084  439d              BICS     r5,r5,r3
000086  6025              STR      r5,[r4,#0]
;;;337          EXTI->FTSR &= ~((uint32_t)iocurrent);
000088  1d24              ADDS     r4,r4,#4
00008a  6825              LDR      r5,[r4,#0]
00008c  439d              BICS     r5,r5,r3
00008e  6025              STR      r5,[r4,#0]
                  |L1.144|
000090  1c52              ADDS     r2,r2,#1
000092  2a10              CMP      r2,#0x10              ;300
000094  d3ba              BCC      |L1.12|
;;;338        }
;;;339      }
;;;340    }
000096  e8bd87f0          POP      {r4-r10,pc}
;;;341    
                          ENDP

00009a  0000              DCW      0x0000
                  |L1.156|
                          DCD      0x40013000
                  |L1.160|
                          DCD      0x40013c00

                          AREA ||i.HAL_GPIO_EXTI_Callback||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_EXTI_Callback PROC
;;;448      */
;;;449    __weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
000000  4770              BX       lr
;;;450    {
;;;451      /* NOTE: This function Should not be modified, when the callback is needed,
;;;452               the HAL_GPIO_EXTI_Callback could be implemented in the user file
;;;453       */
;;;454    }
;;;455    
                          ENDP


                          AREA ||i.HAL_GPIO_EXTI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_EXTI_IRQHandler PROC
;;;433      */
;;;434    void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
000000  4904              LDR      r1,|L3.20|
;;;435    {
000002  b510              PUSH     {r4,lr}
;;;436      /* EXTI line interrupt detected */
;;;437      if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
000004  680a              LDR      r2,[r1,#0]
000006  4202              TST      r2,r0
000008  d002              BEQ      |L3.16|
;;;438      {
;;;439        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
00000a  6008              STR      r0,[r1,#0]
;;;440        HAL_GPIO_EXTI_Callback(GPIO_Pin);
00000c  f7fffffe          BL       HAL_GPIO_EXTI_Callback
                  |L3.16|
;;;441      }
;;;442    }
000010  bd10              POP      {r4,pc}
;;;443    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x40013c14

                          AREA ||i.HAL_GPIO_Init||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_Init PROC
;;;185      */
;;;186    void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;187    {
;;;188      uint32_t position;
;;;189      uint32_t ioposition = 0x00;
;;;190      uint32_t iocurrent = 0x00;
;;;191      uint32_t temp = 0x00;
;;;192    
;;;193      /* Check the parameters */
;;;194      assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
;;;195      assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
;;;196      assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
;;;197    
;;;198      /* Configure the port pins */
;;;199      for(position = 0; position < GPIO_NUMBER; position++)
000004  2200              MOVS     r2,#0
;;;200      {
;;;201        /* Get the IO position */
;;;202        ioposition = ((uint32_t)0x01) << position;
;;;203        /* Get the current IO position */
;;;204        iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
;;;205    
;;;206        if(iocurrent == ioposition)
;;;207        {
;;;208          /*--------------------- GPIO Mode Configuration ------------------------*/
;;;209          /* In case of Alternate function mode selection */
;;;210          if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
;;;211          {
;;;212            /* Check the Alternate function parameter */
;;;213            assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
;;;214            /* Configure Alternate function mapped with the current IO */
;;;215            temp = ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4)) ;
;;;216            GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
;;;217            GPIOx->AFR[position >> 3] |= temp;
;;;218          }
;;;219    
;;;220          /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
;;;221          GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
;;;222          GPIOx->MODER |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
;;;223    
;;;224          /* In case of Output or Alternate function mode selection */
;;;225          if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
;;;226             (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
;;;227          {
;;;228            /* Check the Speed parameter */
;;;229            assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
;;;230            /* Configure the IO Speed */
;;;231            GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
;;;232            GPIOx->OSPEEDR |= (GPIO_Init->Speed << (position * 2));
;;;233    
;;;234            /* Configure the IO Output Type */
;;;235            GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
;;;236            GPIOx->OTYPER |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
;;;237          }
;;;238    
;;;239          /* Activate the Pull-up or Pull down resistor for the current IO */
;;;240          GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
;;;241          GPIOx->PUPDR |= ((GPIO_Init->Pull) << (position * 2));
;;;242    
;;;243    
;;;244          /*--------------------- EXTI Mode Configuration ------------------------*/
;;;245          /* Configure the External Interrupt or event for the current IO */
;;;246          if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
;;;247          {
;;;248            /* Enable SYSCFG Clock */
;;;249            __SYSCFG_CLK_ENABLE();
;;;250    
;;;251            temp = ((uint32_t)0x0F) << (4 * (position & 0x03));
;;;252            SYSCFG->EXTICR[position >> 2] &= ~temp;
;;;253            SYSCFG->EXTICR[position >> 2] |= ((uint32_t)(__HAL_GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
;;;254            
;;;255            /* Clear EXTI line configuration */
;;;256            EXTI->IMR &= ~((uint32_t)iocurrent);
000006  f8dfe1e8          LDR      lr,|L4.496|
00000a  2501              MOVS     r5,#1                 ;202
00000c  f04f0b03          MOV      r11,#3                ;221
000010  f04f0a0f          MOV      r10,#0xf              ;216
                  |L4.20|
000014  680b              LDR      r3,[r1,#0]            ;204
000016  fa05f402          LSL      r4,r5,r2              ;202
00001a  4023              ANDS     r3,r3,r4              ;204
00001c  42a3              CMP      r3,r4                 ;206
00001e  d17d              BNE      |L4.284|
000020  684e              LDR      r6,[r1,#4]            ;210
000022  2e02              CMP      r6,#2                 ;210
000024  d001              BEQ      |L4.42|
000026  2e12              CMP      r6,#0x12              ;210
000028  d114              BNE      |L4.84|
                  |L4.42|
00002a  0756              LSLS     r6,r2,#29             ;215
00002c  690f              LDR      r7,[r1,#0x10]         ;215
00002e  ea4f6cd6          LSR      r12,r6,#27            ;215
000032  fa07f90c          LSL      r9,r7,r12             ;215
000036  08d6              LSRS     r6,r2,#3              ;216
000038  eb000686          ADD      r6,r0,r6,LSL #2       ;216
00003c  6a37              LDR      r7,[r6,#0x20]         ;216
00003e  fa0af80c          LSL      r8,r10,r12            ;216
000042  ea270708          BIC      r7,r7,r8              ;216
000046  6237              STR      r7,[r6,#0x20]         ;216
000048  f8d6c020          LDR      r12,[r6,#0x20]        ;217
00004c  ea4c0c09          ORR      r12,r12,r9            ;217
000050  f8c6c020          STR      r12,[r6,#0x20]        ;217
                  |L4.84|
000054  f8d0c000          LDR      r12,[r0,#0]           ;221
000058  0056              LSLS     r6,r2,#1              ;221
00005a  fa0bf706          LSL      r7,r11,r6             ;221
00005e  ea2c0c07          BIC      r12,r12,r7            ;221
000062  f8c0c000          STR      r12,[r0,#0]           ;221
000066  f891c004          LDRB     r12,[r1,#4]           ;222
00006a  f8d08000          LDR      r8,[r0,#0]            ;222
00006e  f00c0c03          AND      r12,r12,#3            ;222
000072  fa0cfc06          LSL      r12,r12,r6            ;222
000076  ea4c0c08          ORR      r12,r12,r8            ;222
00007a  f8c0c000          STR      r12,[r0,#0]           ;222
00007e  f8d1c004          LDR      r12,[r1,#4]           ;225
000082  f1bc0f01          CMP      r12,#1                ;225
000086  d008              BEQ      |L4.154|
000088  f1bc0f02          CMP      r12,#2                ;225
00008c  d005              BEQ      |L4.154|
00008e  f1bc0f11          CMP      r12,#0x11             ;226
000092  d002              BEQ      |L4.154|
000094  f1bc0f12          CMP      r12,#0x12             ;226
000098  d11f              BNE      |L4.218|
                  |L4.154|
00009a  f8d0c008          LDR      r12,[r0,#8]           ;231
00009e  ea2c0c07          BIC      r12,r12,r7            ;231
0000a2  f8c0c008          STR      r12,[r0,#8]           ;231
0000a6  f8d1c00c          LDR      r12,[r1,#0xc]         ;232
0000aa  f8d08008          LDR      r8,[r0,#8]            ;232
0000ae  fa0cfc06          LSL      r12,r12,r6            ;232
0000b2  ea4c0c08          ORR      r12,r12,r8            ;232
0000b6  f8c0c008          STR      r12,[r0,#8]           ;232
0000ba  f8d0c004          LDR      r12,[r0,#4]           ;235
0000be  ea2c0c04          BIC      r12,r12,r4            ;235
0000c2  f8c0c004          STR      r12,[r0,#4]           ;235
0000c6  f8d0c004          LDR      r12,[r0,#4]           ;236
0000ca  790c              LDRB     r4,[r1,#4]            ;236
0000cc  f3c41400          UBFX     r4,r4,#4,#1           ;236
0000d0  4094              LSLS     r4,r4,r2              ;236
0000d2  ea4c0c04          ORR      r12,r12,r4            ;236
0000d6  f8c0c004          STR      r12,[r0,#4]           ;236
                  |L4.218|
0000da  68c4              LDR      r4,[r0,#0xc]          ;240
0000dc  43bc              BICS     r4,r4,r7              ;240
0000de  60c4              STR      r4,[r0,#0xc]          ;240
0000e0  688c              LDR      r4,[r1,#8]            ;241
0000e2  40b4              LSLS     r4,r4,r6              ;241
0000e4  68c6              LDR      r6,[r0,#0xc]          ;241
0000e6  4334              ORRS     r4,r4,r6              ;241
0000e8  60c4              STR      r4,[r0,#0xc]          ;241
0000ea  684c              LDR      r4,[r1,#4]            ;246
0000ec  00e4              LSLS     r4,r4,#3              ;246
0000ee  d579              BPL      |L4.484|
0000f0  4c40              LDR      r4,|L4.500|
0000f2  6826              LDR      r6,[r4,#0]            ;249
0000f4  f4464680          ORR      r6,r6,#0x4000         ;249
0000f8  6026              STR      r6,[r4,#0]            ;249
0000fa  0794              LSLS     r4,r2,#30             ;251
0000fc  0f27              LSRS     r7,r4,#28             ;251
0000fe  4c3e              LDR      r4,|L4.504|
000100  f0220c03          BIC      r12,r2,#3             ;252
000104  4464              ADD      r4,r4,r12             ;252
000106  fa0af607          LSL      r6,r10,r7             ;251
00010a  f8d4c808          LDR      r12,[r4,#0x808]       ;252
00010e  ea2c0c06          BIC      r12,r12,r6            ;252
000112  f8c4c808          STR      r12,[r4,#0x808]       ;252
000116  4e39              LDR      r6,|L4.508|
000118  42b0              CMP      r0,r6                 ;253
00011a  e000              B        |L4.286|
                  |L4.284|
00011c  e062              B        |L4.484|
                  |L4.286|
00011e  d101              BNE      |L4.292|
000120  2600              MOVS     r6,#0                 ;253
000122  e02d              B        |L4.384|
                  |L4.292|
000124  4e36              LDR      r6,|L4.512|
000126  42b0              CMP      r0,r6                 ;253
000128  d101              BNE      |L4.302|
00012a  2601              MOVS     r6,#1                 ;253
00012c  e028              B        |L4.384|
                  |L4.302|
00012e  4e35              LDR      r6,|L4.516|
000130  42b0              CMP      r0,r6                 ;253
000132  d101              BNE      |L4.312|
000134  2602              MOVS     r6,#2                 ;253
000136  e023              B        |L4.384|
                  |L4.312|
000138  4e33              LDR      r6,|L4.520|
00013a  42b0              CMP      r0,r6                 ;253
00013c  d101              BNE      |L4.322|
00013e  2603              MOVS     r6,#3                 ;253
000140  e01e              B        |L4.384|
                  |L4.322|
000142  4e32              LDR      r6,|L4.524|
000144  42b0              CMP      r0,r6                 ;253
000146  d101              BNE      |L4.332|
000148  2604              MOVS     r6,#4                 ;253
00014a  e019              B        |L4.384|
                  |L4.332|
00014c  4e30              LDR      r6,|L4.528|
00014e  42b0              CMP      r0,r6                 ;253
000150  d101              BNE      |L4.342|
000152  2605              MOVS     r6,#5                 ;253
000154  e014              B        |L4.384|
                  |L4.342|
000156  4e2f              LDR      r6,|L4.532|
000158  42b0              CMP      r0,r6                 ;253
00015a  d101              BNE      |L4.352|
00015c  2606              MOVS     r6,#6                 ;253
00015e  e00f              B        |L4.384|
                  |L4.352|
000160  4e2d              LDR      r6,|L4.536|
000162  42b0              CMP      r0,r6                 ;253
000164  d101              BNE      |L4.362|
000166  2607              MOVS     r6,#7                 ;253
000168  e00a              B        |L4.384|
                  |L4.362|
00016a  4e2c              LDR      r6,|L4.540|
00016c  42b0              CMP      r0,r6                 ;253
00016e  d101              BNE      |L4.372|
000170  2608              MOVS     r6,#8                 ;253
000172  e005              B        |L4.384|
                  |L4.372|
000174  4e2a              LDR      r6,|L4.544|
000176  42b0              CMP      r0,r6                 ;253
000178  d101              BNE      |L4.382|
00017a  2609              MOVS     r6,#9                 ;253
00017c  e000              B        |L4.384|
                  |L4.382|
00017e  260a              MOVS     r6,#0xa               ;253
                  |L4.384|
000180  40be              LSLS     r6,r6,r7              ;253
000182  f8d47808          LDR      r7,[r4,#0x808]        ;253
000186  433e              ORRS     r6,r6,r7              ;253
000188  f8c46808          STR      r6,[r4,#0x808]        ;253
00018c  f8de6000          LDR      r6,[lr,#0]
000190  4674              MOV      r4,lr
000192  439e              BICS     r6,r6,r3
000194  f8ce6000          STR      r6,[lr,#0]
;;;257            EXTI->EMR &= ~((uint32_t)iocurrent);
000198  4e15              LDR      r6,|L4.496|
00019a  1d36              ADDS     r6,r6,#4
00019c  6837              LDR      r7,[r6,#0]
00019e  439f              BICS     r7,r7,r3
0001a0  6037              STR      r7,[r6,#0]
;;;258    
;;;259            if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
0001a2  684f              LDR      r7,[r1,#4]
0001a4  03ff              LSLS     r7,r7,#15
0001a6  d502              BPL      |L4.430|
;;;260            {
;;;261              EXTI->IMR |= iocurrent;
0001a8  6827              LDR      r7,[r4,#0]
0001aa  431f              ORRS     r7,r7,r3
0001ac  6027              STR      r7,[r4,#0]
                  |L4.430|
;;;262            }
;;;263            if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
0001ae  684c              LDR      r4,[r1,#4]
0001b0  03a4              LSLS     r4,r4,#14
0001b2  d502              BPL      |L4.442|
;;;264            {
;;;265              EXTI->EMR |= iocurrent;
0001b4  6834              LDR      r4,[r6,#0]
0001b6  431c              ORRS     r4,r4,r3
0001b8  6034              STR      r4,[r6,#0]
                  |L4.442|
;;;266            }
;;;267    
;;;268            /* Clear Rising Falling edge configuration */
;;;269            EXTI->RTSR &= ~((uint32_t)iocurrent);
0001ba  4c0d              LDR      r4,|L4.496|
0001bc  3408              ADDS     r4,r4,#8
0001be  6826              LDR      r6,[r4,#0]
0001c0  439e              BICS     r6,r6,r3
0001c2  6026              STR      r6,[r4,#0]
;;;270            EXTI->FTSR &= ~((uint32_t)iocurrent);
0001c4  1d26              ADDS     r6,r4,#4
0001c6  6837              LDR      r7,[r6,#0]
0001c8  439f              BICS     r7,r7,r3
0001ca  6037              STR      r7,[r6,#0]
;;;271    
;;;272            if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
0001cc  684f              LDR      r7,[r1,#4]
0001ce  02ff              LSLS     r7,r7,#11
0001d0  d502              BPL      |L4.472|
;;;273            {
;;;274              EXTI->RTSR |= iocurrent;
0001d2  6827              LDR      r7,[r4,#0]
0001d4  431f              ORRS     r7,r7,r3
0001d6  6027              STR      r7,[r4,#0]
                  |L4.472|
;;;275            }
;;;276            if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
0001d8  684c              LDR      r4,[r1,#4]
0001da  02a4              LSLS     r4,r4,#10
0001dc  d502              BPL      |L4.484|
;;;277            {
;;;278              EXTI->FTSR |= iocurrent;
0001de  6834              LDR      r4,[r6,#0]
0001e0  431c              ORRS     r4,r4,r3
0001e2  6034              STR      r4,[r6,#0]
                  |L4.484|
0001e4  1c52              ADDS     r2,r2,#1
0001e6  2a10              CMP      r2,#0x10              ;199
0001e8  f4ffaf14          BCC      |L4.20|
;;;279            }
;;;280          }
;;;281        }
;;;282      }
;;;283    }
0001ec  e8bd8ff0          POP      {r4-r11,pc}
;;;284    
                          ENDP

                  |L4.496|
                          DCD      0x40013c00
                  |L4.500|
                          DCD      0x40023844
                  |L4.504|
                          DCD      0x40013000
                  |L4.508|
                          DCD      0x40020000
                  |L4.512|
                          DCD      0x40020400
                  |L4.516|
                          DCD      0x40020800
                  |L4.520|
                          DCD      0x40020c00
                  |L4.524|
                          DCD      0x40021000
                  |L4.528|
                          DCD      0x40021400
                  |L4.532|
                          DCD      0x40021800
                  |L4.536|
                          DCD      0x40021c00
                  |L4.540|
                          DCD      0x40022000
                  |L4.544|
                          DCD      0x40022400

                          AREA ||i.HAL_GPIO_ReadPin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_ReadPin PROC
;;;364      */
;;;365    GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6900              LDR      r0,[r0,#0x10]
;;;366    {
;;;367      GPIO_PinState bitstatus;
;;;368    
;;;369      /* Check the parameters */
;;;370      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;371    
;;;372      if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
000002  4008              ANDS     r0,r0,r1
000004  d000              BEQ      |L5.8|
;;;373      {
;;;374        bitstatus = GPIO_PIN_SET;
000006  2001              MOVS     r0,#1
                  |L5.8|
;;;375      }
;;;376      else
;;;377      {
;;;378        bitstatus = GPIO_PIN_RESET;
;;;379      }
;;;380      return bitstatus;
;;;381    }
000008  4770              BX       lr
;;;382    
                          ENDP


                          AREA ||i.HAL_GPIO_TogglePin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_TogglePin PROC
;;;420      */
;;;421    void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6942              LDR      r2,[r0,#0x14]
;;;422    {
;;;423      /* Check the parameters */
;;;424      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;425    
;;;426      GPIOx->ODR ^= GPIO_Pin;
000002  404a              EORS     r2,r2,r1
000004  6142              STR      r2,[r0,#0x14]
;;;427    }
000006  4770              BX       lr
;;;428    
                          ENDP


                          AREA ||i.HAL_GPIO_WritePin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_WritePin PROC
;;;398      */
;;;399    void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
000000  b10a              CBZ      r2,|L7.6|
;;;400    {
;;;401      /* Check the parameters */
;;;402      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;403      assert_param(IS_GPIO_PIN_ACTION(PinState));
;;;404    
;;;405      if(PinState != GPIO_PIN_RESET)
;;;406      {
;;;407        GPIOx->BSRRL = GPIO_Pin;
000002  8301              STRH     r1,[r0,#0x18]
;;;408      }
;;;409      else
;;;410      {
;;;411        GPIOx->BSRRH = GPIO_Pin ;
;;;412      }
;;;413    }
000004  4770              BX       lr
                  |L7.6|
000006  8341              STRH     r1,[r0,#0x1a]         ;411
000008  4770              BX       lr
;;;414    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\Drivers\\STM32F2xx_HAL_Driver\\Src\\stm32f2xx_hal_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f2xx_hal_gpio_c_ea787061____REV16|
#line 129 "..\\..\\Drivers\\CMSIS\\Include\\core_cmInstr.h"
|__asm___20_stm32f2xx_hal_gpio_c_ea787061____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f2xx_hal_gpio_c_ea787061____REVSH|
#line 144
|__asm___20_stm32f2xx_hal_gpio_c_ea787061____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
