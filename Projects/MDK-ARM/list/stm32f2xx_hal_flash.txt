; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o"bhd2 configuration\stm32f2xx_hal_flash.o" --asm_dir=.\list\ --list_dir=.\list\ --depend="bhd2 configuration\stm32f2xx_hal_flash.d" --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\..\Drivers\CMSIS\Device\ST\STM32F2xx\Include -I..\..\Drivers\CMSIS\Include -I..\..\Middlewares\ST\STM32_USB_Device_Library\Class\CDC\Inc -I..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc -I..\..\Drivers\STM32F2xx_HAL_Driver\Inc -I..\..\Inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_HAL_DRIVER -DSTM32F215xx --omf_browse="bhd2 configuration\stm32f2xx_hal_flash.crf" ..\..\Drivers\STM32F2xx_HAL_Driver\Src\stm32f2xx_hal_flash.c]
                          THUMB

                          AREA ||i.FLASH_Program_Byte||, CODE, READONLY, ALIGN=2

                  FLASH_Program_Byte PROC
;;;680      */
;;;681    static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
000000  4a06              LDR      r2,|L1.28|
;;;682    {
;;;683      /* Check the parameters */
;;;684      assert_param(IS_FLASH_ADDRESS(Address));
;;;685      
;;;686      /* If the previous operation is completed, proceed to program the new data */
;;;687      FLASH->CR &= CR_PSIZE_MASK;
000002  6813              LDR      r3,[r2,#0]
000004  f4237340          BIC      r3,r3,#0x300
000008  6013              STR      r3,[r2,#0]
;;;688      FLASH->CR |= FLASH_PSIZE_BYTE;
00000a  6813              LDR      r3,[r2,#0]
00000c  6013              STR      r3,[r2,#0]
;;;689      FLASH->CR |= FLASH_CR_PG;
00000e  6813              LDR      r3,[r2,#0]
000010  f0430301          ORR      r3,r3,#1
000014  6013              STR      r3,[r2,#0]
;;;690    
;;;691      *(__IO uint8_t*)Address = Data;
000016  7001              STRB     r1,[r0,#0]
;;;692    }
000018  4770              BX       lr
;;;693    
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      0x40023c10

                          AREA ||i.FLASH_Program_DoubleWord||, CODE, READONLY, ALIGN=2

                  FLASH_Program_DoubleWord PROC
;;;604      */
;;;605    static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
000000  4908              LDR      r1,|L2.36|
;;;606    {
000002  b510              PUSH     {r4,lr}
;;;607      /* Check the parameters */
;;;608      assert_param(IS_FLASH_ADDRESS(Address));
;;;609      
;;;610      /* If the previous operation is completed, proceed to program the new data */
;;;611      FLASH->CR &= CR_PSIZE_MASK;
000004  680c              LDR      r4,[r1,#0]
000006  f4247440          BIC      r4,r4,#0x300
00000a  600c              STR      r4,[r1,#0]
;;;612      FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
00000c  680c              LDR      r4,[r1,#0]
00000e  f4447440          ORR      r4,r4,#0x300
000012  600c              STR      r4,[r1,#0]
;;;613      FLASH->CR |= FLASH_CR_PG;
000014  680c              LDR      r4,[r1,#0]
000016  f0440401          ORR      r4,r4,#1
00001a  600c              STR      r4,[r1,#0]
;;;614    
;;;615      *(__IO uint64_t*)Address = Data;
00001c  6002              STR      r2,[r0,#0]
00001e  6043              STR      r3,[r0,#4]
;;;616    }
000020  bd10              POP      {r4,pc}
;;;617    
                          ENDP

000022  0000              DCW      0x0000
                  |L2.36|
                          DCD      0x40023c10

                          AREA ||i.FLASH_Program_HalfWord||, CODE, READONLY, ALIGN=2

                  FLASH_Program_HalfWord PROC
;;;655      */
;;;656    static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
000000  4a07              LDR      r2,|L3.32|
;;;657    {
;;;658      /* Check the parameters */
;;;659      assert_param(IS_FLASH_ADDRESS(Address));
;;;660      
;;;661      /* If the previous operation is completed, proceed to program the new data */
;;;662      FLASH->CR &= CR_PSIZE_MASK;
000002  6813              LDR      r3,[r2,#0]
000004  f4237340          BIC      r3,r3,#0x300
000008  6013              STR      r3,[r2,#0]
;;;663      FLASH->CR |= FLASH_PSIZE_HALF_WORD;
00000a  6813              LDR      r3,[r2,#0]
00000c  f4437380          ORR      r3,r3,#0x100
000010  6013              STR      r3,[r2,#0]
;;;664      FLASH->CR |= FLASH_CR_PG;
000012  6813              LDR      r3,[r2,#0]
000014  f0430301          ORR      r3,r3,#1
000018  6013              STR      r3,[r2,#0]
;;;665    
;;;666      *(__IO uint16_t*)Address = Data;
00001a  8001              STRH     r1,[r0,#0]
;;;667    }
00001c  4770              BX       lr
;;;668    
                          ENDP

00001e  0000              DCW      0x0000
                  |L3.32|
                          DCD      0x40023c10

                          AREA ||i.FLASH_Program_Word||, CODE, READONLY, ALIGN=2

                  FLASH_Program_Word PROC
;;;630      */
;;;631    static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
000000  4a07              LDR      r2,|L4.32|
;;;632    {
;;;633      /* Check the parameters */
;;;634      assert_param(IS_FLASH_ADDRESS(Address));
;;;635      
;;;636      /* If the previous operation is completed, proceed to program the new data */
;;;637      FLASH->CR &= CR_PSIZE_MASK;
000002  6813              LDR      r3,[r2,#0]
000004  f4237340          BIC      r3,r3,#0x300
000008  6013              STR      r3,[r2,#0]
;;;638      FLASH->CR |= FLASH_PSIZE_WORD;
00000a  6813              LDR      r3,[r2,#0]
00000c  f4437300          ORR      r3,r3,#0x200
000010  6013              STR      r3,[r2,#0]
;;;639      FLASH->CR |= FLASH_CR_PG;
000012  6813              LDR      r3,[r2,#0]
000014  f0430301          ORR      r3,r3,#1
000018  6013              STR      r3,[r2,#0]
;;;640    
;;;641      *(__IO uint32_t*)Address = Data;
00001a  6001              STR      r1,[r0,#0]
;;;642    }
00001c  4770              BX       lr
;;;643    
                          ENDP

00001e  0000              DCW      0x0000
                  |L4.32|
                          DCD      0x40023c10

                          AREA ||i.FLASH_SetErrorCode||, CODE, READONLY, ALIGN=2

                  FLASH_SetErrorCode PROC
;;;698      */
;;;699    static void FLASH_SetErrorCode(void)
000000  4915              LDR      r1,|L5.88|
;;;700    { 
;;;701      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
000002  6808              LDR      r0,[r1,#0]
000004  06c2              LSLS     r2,r0,#27
;;;702      {
;;;703       pFlash.ErrorCode = FLASH_ERROR_WRP;
000006  4815              LDR      r0,|L5.92|
000008  d501              BPL      |L5.14|
00000a  2210              MOVS     r2,#0x10
00000c  7542              STRB     r2,[r0,#0x15]
                  |L5.14|
;;;704      }
;;;705      
;;;706      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
00000e  680a              LDR      r2,[r1,#0]
000010  0692              LSLS     r2,r2,#26
000012  d503              BPL      |L5.28|
;;;707      {
;;;708       pFlash.ErrorCode |= FLASH_ERROR_PGA;
000014  7d42              LDRB     r2,[r0,#0x15]  ; pFlash
000016  f0420208          ORR      r2,r2,#8
00001a  7542              STRB     r2,[r0,#0x15]
                  |L5.28|
;;;709      }
;;;710      
;;;711      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
00001c  680a              LDR      r2,[r1,#0]
00001e  0652              LSLS     r2,r2,#25
000020  d503              BPL      |L5.42|
;;;712      {
;;;713        pFlash.ErrorCode |= FLASH_ERROR_PGP;
000022  7d42              LDRB     r2,[r0,#0x15]  ; pFlash
000024  f0420204          ORR      r2,r2,#4
000028  7542              STRB     r2,[r0,#0x15]
                  |L5.42|
;;;714      }
;;;715      
;;;716      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
00002a  680a              LDR      r2,[r1,#0]
00002c  0612              LSLS     r2,r2,#24
00002e  d503              BPL      |L5.56|
;;;717      {
;;;718        pFlash.ErrorCode |= FLASH_ERROR_PGS;
000030  7d42              LDRB     r2,[r0,#0x15]  ; pFlash
000032  f0420202          ORR      r2,r2,#2
000036  7542              STRB     r2,[r0,#0x15]
                  |L5.56|
;;;719      }
;;;720      
;;;721      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
000038  680a              LDR      r2,[r1,#0]
00003a  05d2              LSLS     r2,r2,#23
00003c  d503              BPL      |L5.70|
;;;722      {
;;;723        pFlash.ErrorCode |= FLASH_ERROR_RD;
00003e  7d42              LDRB     r2,[r0,#0x15]  ; pFlash
000040  f0420201          ORR      r2,r2,#1
000044  7542              STRB     r2,[r0,#0x15]
                  |L5.70|
;;;724      }
;;;725      
;;;726      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
000046  6809              LDR      r1,[r1,#0]
000048  0789              LSLS     r1,r1,#30
00004a  d503              BPL      |L5.84|
;;;727      {
;;;728        pFlash.ErrorCode |= FLASH_ERROR_OPERATION;
00004c  7d41              LDRB     r1,[r0,#0x15]  ; pFlash
00004e  f0410120          ORR      r1,r1,#0x20
000052  7541              STRB     r1,[r0,#0x15]
                  |L5.84|
;;;729      }
;;;730    }
000054  4770              BX       lr
;;;731    
                          ENDP

000056  0000              DCW      0x0000
                  |L5.88|
                          DCD      0x40023c0c
                  |L5.92|
                          DCD      ||.bss||

                          AREA ||i.FLASH_WaitForLastOperation||, CODE, READONLY, ALIGN=2

                  FLASH_WaitForLastOperation PROC
;;;560      */
;;;561    HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;562    { 
000002  4604              MOV      r4,r0
;;;563      /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
;;;564         Even if the FLASH operation fails, the BUSY flag will be reset and an error
;;;565         flag will be set */
;;;566        
;;;567      uint32_t timeout = HAL_GetTick() + Timeout;
000004  f7fffffe          BL       HAL_GetTick
000008  1906              ADDS     r6,r0,r4
;;;568         
;;;569      while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
00000a  4d0a              LDR      r5,|L6.52|
00000c  e007              B        |L6.30|
                  |L6.14|
;;;570      { 
;;;571        if(Timeout != HAL_MAX_DELAY)
00000e  1c60              ADDS     r0,r4,#1
000010  d005              BEQ      |L6.30|
;;;572        {
;;;573          if(HAL_GetTick() >= timeout)
000012  f7fffffe          BL       HAL_GetTick
000016  42b0              CMP      r0,r6
000018  d301              BCC      |L6.30|
;;;574          {
;;;575            return HAL_TIMEOUT;
00001a  2003              MOVS     r0,#3
                  |L6.28|
;;;576          }
;;;577        } 
;;;578      }
;;;579      
;;;580      if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
;;;581                               FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
;;;582      {
;;;583        /*Save the error code*/
;;;584        FLASH_SetErrorCode();
;;;585        return HAL_ERROR;
;;;586      }
;;;587    
;;;588      /* If there is an error flag set */
;;;589      return HAL_OK;
;;;590      
;;;591    }  
00001c  bd70              POP      {r4-r6,pc}
                  |L6.30|
00001e  6828              LDR      r0,[r5,#0]            ;569
000020  03c0              LSLS     r0,r0,#15             ;569
000022  d4f4              BMI      |L6.14|
000024  6828              LDR      r0,[r5,#0]            ;580
000026  f41070f9          ANDS     r0,r0,#0x1f2          ;580
00002a  d0f7              BEQ      |L6.28|
00002c  f7fffffe          BL       FLASH_SetErrorCode
000030  2001              MOVS     r0,#1                 ;585
000032  bd70              POP      {r4-r6,pc}
;;;592    
                          ENDP

                  |L6.52|
                          DCD      0x40023c0c

                          AREA ||i.HAL_FLASH_EndOfOperationCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_EndOfOperationCallback PROC
;;;394      */
;;;395    __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;396    {
;;;397      /* NOTE : This function Should not be modified, when the callback is needed,
;;;398                the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
;;;399       */ 
;;;400    }
;;;401    
                          ENDP


                          AREA ||i.HAL_FLASH_GetError||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_GetError PROC
;;;546      */
;;;547    FLASH_ErrorTypeDef HAL_FLASH_GetError(void)
000000  4801              LDR      r0,|L8.8|
;;;548    { 
;;;549       return pFlash.ErrorCode;
000002  7d40              LDRB     r0,[r0,#0x15]  ; pFlash
;;;550    }  
000004  4770              BX       lr
;;;551      
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      ||.bss||

                          AREA ||i.HAL_FLASH_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_IRQHandler PROC
;;;268      */
;;;269    void HAL_FLASH_IRQHandler(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;270    {
;;;271      uint32_t temp;
;;;272      
;;;273      /* If the program operation is completed, disable the PG Bit */
;;;274      FLASH->CR &= (~FLASH_CR_PG);
000004  f8df90f0          LDR      r9,|L9.248|
000008  f8d91000          LDR      r1,[r9,#0]
00000c  f0210101          BIC      r1,r1,#1
000010  f8c91000          STR      r1,[r9,#0]
;;;275    
;;;276      /* If the erase operation is completed, disable the SER Bit */
;;;277      FLASH->CR &= (~FLASH_CR_SER);
000014  f8d91000          LDR      r1,[r9,#0]
000018  f0210102          BIC      r1,r1,#2
00001c  f8c91000          STR      r1,[r9,#0]
;;;278      FLASH->CR &= SECTOR_MASK; 
000020  f8d91000          LDR      r1,[r9,#0]
000024  f02101f8          BIC      r1,r1,#0xf8
000028  f8c91000          STR      r1,[r9,#0]
;;;279    
;;;280      /* if the erase operation is completed, disable the MER Bit */
;;;281      FLASH->CR &= (~FLASH_CR_MER);
00002c  f8d91000          LDR      r1,[r9,#0]
000030  f0210104          BIC      r1,r1,#4
000034  f8c91000          STR      r1,[r9,#0]
;;;282    
;;;283      /* Check FLASH End of Operation flag  */
;;;284      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
000038  f1a90504          SUB      r5,r9,#4
00003c  6828              LDR      r0,[r5,#0]
;;;285      {
;;;286        if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
00003e  4c2f              LDR      r4,|L9.252|
000040  07c0              LSLS     r0,r0,#31             ;284
;;;287        {
;;;288          /*Nb of sector to erased can be decreased*/
;;;289          pFlash.NbSectorsToErase--;
;;;290    
;;;291          /* Check if there are still sectors to erase*/
;;;292          if(pFlash.NbSectorsToErase != 0)
;;;293          {
;;;294            temp = pFlash.Sector;
;;;295            /*Indicate user which sector has been erased*/
;;;296            HAL_FLASH_EndOfOperationCallback(temp);
;;;297    
;;;298            /* Clear pending flags (if any) */  
;;;299            __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
;;;300             FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR| FLASH_FLAG_PGSERR);  
;;;301    
;;;302            /*Increment sector number*/
;;;303            temp = ++pFlash.Sector;
;;;304            FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
;;;305          }
;;;306          else
;;;307          {
;;;308            /*No more sectors to Erase, user callback can be called.*/
;;;309            /*Reset Sector and stop Erase sectors procedure*/
;;;310            pFlash.Sector = temp = 0xFFFFFFFF;
000042  f04f37ff          MOV      r7,#0xffffffff
000046  f04f0600          MOV      r6,#0
00004a  d00f              BEQ      |L9.108|
00004c  7820              LDRB     r0,[r4,#0]            ;286  ; pFlash
;;;311            pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;312            /* FLASH EOP interrupt user callback */
;;;313            HAL_FLASH_EndOfOperationCallback(temp);
;;;314            /* Clear FLASH End of Operation pending bit */
;;;315            __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
00004e  f04f0801          MOV      r8,#1
000052  2801              CMP      r0,#1                 ;286
000054  d032              BEQ      |L9.188|
;;;316          }
;;;317        }
;;;318        else 
;;;319        {
;;;320          if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
000056  7820              LDRB     r0,[r4,#0]  ; pFlash
000058  2802              CMP      r0,#2
00005a  d046              BEQ      |L9.234|
;;;321          {
;;;322            /*MassErase ended. Return the selected bank*/
;;;323            /* FLASH EOP interrupt user callback */
;;;324            HAL_FLASH_EndOfOperationCallback(1);
;;;325          }
;;;326          else
;;;327          {
;;;328            /*Program ended. Return the selected address*/
;;;329            /* FLASH EOP interrupt user callback */
;;;330            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
00005c  f8d40010          LDR.W    r0,[r4,#0x10]
                  |L9.96|
000060  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
;;;331          }
;;;332          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
000064  f8846000          STRB.W   r6,[r4,#0]
                  |L9.104|
;;;333          /* Clear FLASH End of Operation pending bit */
;;;334          __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
000068  f8c58000          STR      r8,[r5,#0]
                  |L9.108|
;;;335        }
;;;336    
;;;337      }
;;;338      
;;;339      /* Check FLASH operation error flags */
;;;340      if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
00006c  6828              LDR      r0,[r5,#0]
00006e  46a8              MOV      r8,r5
000070  f4107ff9          TST      r0,#0x1f2
000074  d010              BEQ      |L9.152|
;;;341                               FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
;;;342      {
;;;343        if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
000076  7820              LDRB     r0,[r4,#0]  ; pFlash
000078  2801              CMP      r0,#1
00007a  d038              BEQ      |L9.238|
;;;344        {
;;;345          /*return the faulty sector*/
;;;346          temp = pFlash.Sector;
;;;347          pFlash.Sector = 0xFFFFFFFF;
;;;348        }
;;;349        else if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
00007c  7820              LDRB     r0,[r4,#0]  ; pFlash
00007e  2802              CMP      r0,#2
000080  d038              BEQ      |L9.244|
;;;350        {
;;;351          /*return the faulty bank*/
;;;352          temp = 1;
;;;353        }
;;;354        else
;;;355        {
;;;356          /*retrun the faulty address*/
;;;357          temp = pFlash.Address;
000082  6925              LDR      r5,[r4,#0x10]  ; pFlash
                  |L9.132|
;;;358        }
;;;359        
;;;360        /*Save the Error code*/
;;;361        FLASH_SetErrorCode();
000084  f7fffffe          BL       FLASH_SetErrorCode
;;;362    
;;;363        /* FLASH error interrupt user callback */
;;;364        HAL_FLASH_OperationErrorCallback(temp);
000088  4628              MOV      r0,r5
00008a  f7fffffe          BL       HAL_FLASH_OperationErrorCallback
;;;365        /* Clear FLASH error pending bits */
;;;366        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR  | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR |\
00008e  f44f71f9          MOV      r1,#0x1f2
000092  f8c81000          STR      r1,[r8,#0]
;;;367                               FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR);
;;;368    
;;;369        /*Stop the procedure ongoing*/
;;;370        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
000096  7026              STRB     r6,[r4,#0]
                  |L9.152|
;;;371      }
;;;372      
;;;373      if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
000098  7820              LDRB     r0,[r4,#0]  ; pFlash
00009a  2800              CMP      r0,#0
00009c  d10c              BNE      |L9.184|
;;;374      {
;;;375        /* Disable End of FLASH Operation interrupt */
;;;376        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
00009e  f8d91000          LDR      r1,[r9,#0]
0000a2  f0217180          BIC      r1,r1,#0x1000000
0000a6  f8c91000          STR      r1,[r9,#0]
;;;377    
;;;378        /* Disable Error source interrupt */
;;;379        __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
0000aa  f8d91000          LDR      r1,[r9,#0]
0000ae  f0217100          BIC      r1,r1,#0x2000000
0000b2  f8c91000          STR      r1,[r9,#0]
;;;380    
;;;381        /* Process Unlocked */
;;;382        __HAL_UNLOCK(&pFlash);
0000b6  7526              STRB     r6,[r4,#0x14]
                  |L9.184|
;;;383      }
;;;384      
;;;385    }
0000b8  e8bd87f0          POP      {r4-r10,pc}
                  |L9.188|
0000bc  6860              LDR      r0,[r4,#4]            ;289  ; pFlash
0000be  1e40              SUBS     r0,r0,#1              ;289
0000c0  6060              STR      r0,[r4,#4]            ;289  ; pFlash
0000c2  6860              LDR      r0,[r4,#4]            ;292  ; pFlash
0000c4  b158              CBZ      r0,|L9.222|
0000c6  68e0              LDR      r0,[r4,#0xc]          ;294  ; pFlash
0000c8  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000cc  20f3              MOVS     r0,#0xf3              ;299
0000ce  6028              STR      r0,[r5,#0]            ;299
0000d0  68e0              LDR      r0,[r4,#0xc]          ;303  ; pFlash
0000d2  1c40              ADDS     r0,r0,#1              ;303
0000d4  60e0              STR      r0,[r4,#0xc]          ;303  ; pFlash
0000d6  7a21              LDRB     r1,[r4,#8]            ;304  ; pFlash
0000d8  f7fffffe          BL       FLASH_Erase_Sector
0000dc  e7c6              B        |L9.108|
                  |L9.222|
0000de  4638              MOV      r0,r7                 ;310
0000e0  60e7              STR      r7,[r4,#0xc]          ;310  ; pFlash
0000e2  7026              STRB     r6,[r4,#0]            ;311
0000e4  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000e8  e7be              B        |L9.104|
                  |L9.234|
0000ea  2001              MOVS     r0,#1                 ;324
0000ec  e7b8              B        |L9.96|
                  |L9.238|
0000ee  68e5              LDR      r5,[r4,#0xc]          ;346  ; pFlash
0000f0  60e7              STR      r7,[r4,#0xc]          ;347  ; pFlash
0000f2  e7c7              B        |L9.132|
                  |L9.244|
0000f4  2501              MOVS     r5,#1                 ;352
0000f6  e7c5              B        |L9.132|
;;;386    
                          ENDP

                  |L9.248|
                          DCD      0x40023c10
                  |L9.252|
                          DCD      ||.bss||

                          AREA ||i.HAL_FLASH_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Lock PROC
;;;460      */
;;;461    HAL_StatusTypeDef HAL_FLASH_Lock(void)
000000  4803              LDR      r0,|L10.16|
;;;462    {
;;;463      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;464      FLASH->CR |= FLASH_CR_LOCK;
000002  6801              LDR      r1,[r0,#0]
000004  f0414100          ORR      r1,r1,#0x80000000
000008  6001              STR      r1,[r0,#0]
;;;465      
;;;466      return HAL_OK;  
00000a  2000              MOVS     r0,#0
;;;467    }
00000c  4770              BX       lr
;;;468    
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASH_OB_Launch||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Launch PROC
;;;508      */
;;;509    HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
000000  4804              LDR      r0,|L11.20|
;;;510    {
;;;511      /* Set the OPTSTRT bit in OPTCR register */
;;;512      *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
000002  7801              LDRB     r1,[r0,#0]
000004  f0410102          ORR      r1,r1,#2
000008  7001              STRB     r1,[r0,#0]
;;;513    
;;;514      /* Wait for last operation to be completed */
;;;515      return(FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE)); 
00000a  f24c3050          MOV      r0,#0xc350
00000e  f7ffbffe          B.W      FLASH_WaitForLastOperation
;;;516    }
;;;517    
                          ENDP

000012  0000              DCW      0x0000
                  |L11.20|
                          DCD      0x40023c14

                          AREA ||i.HAL_FLASH_OB_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Lock PROC
;;;495      */
;;;496    HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
000000  4803              LDR      r0,|L12.16|
;;;497    {
;;;498      /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
;;;499      FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
000002  6801              LDR      r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;500      
;;;501      return HAL_OK;  
00000a  2000              MOVS     r0,#0
;;;502    }
00000c  4770              BX       lr
;;;503    
                          ENDP

00000e  0000              DCW      0x0000
                  |L12.16|
                          DCD      0x40023c14

                          AREA ||i.HAL_FLASH_OB_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Unlock PROC
;;;474      */
;;;475    HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
000000  4806              LDR      r0,|L13.28|
;;;476    {
;;;477      if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
000002  6800              LDR      r0,[r0,#0]
000004  07c0              LSLS     r0,r0,#31
000006  d007              BEQ      |L13.24|
;;;478      {
;;;479        /* Authorizes the Option Byte register programming */
;;;480        FLASH->OPTKEYR = FLASH_OPT_KEY1;
000008  4804              LDR      r0,|L13.28|
00000a  4905              LDR      r1,|L13.32|
00000c  380c              SUBS     r0,r0,#0xc
00000e  6001              STR      r1,[r0,#0]
;;;481        FLASH->OPTKEYR = FLASH_OPT_KEY2;
000010  4904              LDR      r1,|L13.36|
000012  6001              STR      r1,[r0,#0]
;;;482      }
;;;483      else
;;;484      {
;;;485        return HAL_ERROR;
;;;486      }  
;;;487      
;;;488      return HAL_OK;  
000014  2000              MOVS     r0,#0
;;;489    }
000016  4770              BX       lr
                  |L13.24|
000018  2001              MOVS     r0,#1                 ;485
00001a  4770              BX       lr
;;;490    
                          ENDP

                  |L13.28|
                          DCD      0x40023c14
                  |L13.32|
                          DCD      0x08192a3b
                  |L13.36|
                          DCD      0x4c5d6e7f

                          AREA ||i.HAL_FLASH_OperationErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_OperationErrorCallback PROC
;;;408      */
;;;409    __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;410    {
;;;411      /* NOTE : This function Should not be modified, when the callback is needed,
;;;412                the HAL_FLASH_OperationErrorCallback could be implemented in the user file
;;;413       */ 
;;;414    }
;;;415    
                          ENDP


                          AREA ||i.HAL_FLASH_Program||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program PROC
;;;158      */
;;;159    HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;160    {
;;;161      HAL_StatusTypeDef status = HAL_ERROR;
;;;162      
;;;163      /* Process Locked */
;;;164      __HAL_LOCK(&pFlash);
000004  4e1b              LDR      r6,|L15.116|
000006  4605              MOV      r5,r0                 ;160
000008  4614              MOV      r4,r2                 ;160
00000a  7d30              LDRB     r0,[r6,#0x14]  ; pFlash
00000c  461f              MOV      r7,r3                 ;160
00000e  4689              MOV      r9,r1                 ;160
000010  2801              CMP      r0,#1
000012  d008              BEQ      |L15.38|
000014  2001              MOVS     r0,#1
000016  7530              STRB     r0,[r6,#0x14]
;;;165    
;;;166      /* Check the parameters */
;;;167      assert_param(IS_TYPEPROGRAM(TypeProgram));
;;;168    
;;;169      /* Wait for last operation to be completed */
;;;170      status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
000018  f24c3850          MOV      r8,#0xc350
00001c  4640              MOV      r0,r8
00001e  f7fffffe          BL       FLASH_WaitForLastOperation
000022  b118              CBZ      r0,|L15.44|
000024  e014              B        |L15.80|
                  |L15.38|
000026  2002              MOVS     r0,#2                 ;164
                  |L15.40|
;;;171      
;;;172      if(status == HAL_OK)
;;;173      {
;;;174        if(TypeProgram == TYPEPROGRAM_BYTE)
;;;175        {
;;;176          /*Program byte (8-bit) at a specified address.*/
;;;177            FLASH_Program_Byte(Address, (uint8_t) Data);
;;;178        }
;;;179        else if(TypeProgram == TYPEPROGRAM_HALFWORD)
;;;180        {
;;;181          /*Program halfword (16-bit) at a specified address.*/
;;;182          FLASH_Program_HalfWord(Address, (uint16_t) Data);
;;;183        }
;;;184        else if(TypeProgram == TYPEPROGRAM_WORD)
;;;185        {
;;;186          /*Program word (32-bit) at a specified address.*/
;;;187          FLASH_Program_Word(Address, (uint32_t) Data);
;;;188        }
;;;189        else
;;;190        {
;;;191          /*Program double word (64-bit) at a specified address.*/
;;;192          FLASH_Program_DoubleWord(Address, Data);
;;;193        }
;;;194    
;;;195        /* Wait for last operation to be completed */
;;;196        status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
;;;197        
;;;198        /* If the program operation is completed, disable the PG Bit */
;;;199        FLASH->CR &= (~FLASH_CR_PG);
;;;200      }
;;;201    
;;;202      /* Process Unlocked */
;;;203      __HAL_UNLOCK(&pFlash);
;;;204    
;;;205      return status;
;;;206    }
000028  e8bd87f0          POP      {r4-r10,pc}
                  |L15.44|
00002c  b19d              CBZ      r5,|L15.86|
00002e  2d01              CMP      r5,#1                 ;179
000030  d016              BEQ      |L15.96|
000032  2d02              CMP      r5,#2                 ;184
000034  d019              BEQ      |L15.106|
000036  4622              MOV      r2,r4                 ;192
000038  463b              MOV      r3,r7                 ;192
00003a  4648              MOV      r0,r9                 ;192
00003c  f7fffffe          BL       FLASH_Program_DoubleWord
                  |L15.64|
000040  4640              MOV      r0,r8                 ;196
000042  f7fffffe          BL       FLASH_WaitForLastOperation
000046  490c              LDR      r1,|L15.120|
000048  680a              LDR      r2,[r1,#0]            ;199
00004a  f0220201          BIC      r2,r2,#1              ;199
00004e  600a              STR      r2,[r1,#0]            ;199
                  |L15.80|
000050  2100              MOVS     r1,#0                 ;203
000052  7531              STRB     r1,[r6,#0x14]         ;203
000054  e7e8              B        |L15.40|
                  |L15.86|
000056  b2e1              UXTB     r1,r4                 ;177
000058  4648              MOV      r0,r9                 ;177
00005a  f7fffffe          BL       FLASH_Program_Byte
00005e  e7ef              B        |L15.64|
                  |L15.96|
000060  b2a1              UXTH     r1,r4                 ;182
000062  4648              MOV      r0,r9                 ;182
000064  f7fffffe          BL       FLASH_Program_HalfWord
000068  e7ea              B        |L15.64|
                  |L15.106|
00006a  4621              MOV      r1,r4                 ;187
00006c  4648              MOV      r0,r9                 ;187
00006e  f7fffffe          BL       FLASH_Program_Word
000072  e7e5              B        |L15.64|
;;;207    
                          ENDP

                  |L15.116|
                          DCD      ||.bss||
                  |L15.120|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASH_Program_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program_IT PROC
;;;216      */
;;;217    HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;218    {
000004  460e              MOV      r6,r1
;;;219      HAL_StatusTypeDef status = HAL_OK;
;;;220      
;;;221      /* Process Locked */
;;;222      __HAL_LOCK(&pFlash);
000006  4919              LDR      r1,|L16.108|
000008  2400              MOVS     r4,#0                 ;219
00000a  7d0d              LDRB     r5,[r1,#0x14]  ; pFlash
00000c  2d01              CMP      r5,#1
00000e  d01c              BEQ      |L16.74|
000010  2501              MOVS     r5,#1
000012  750d              STRB     r5,[r1,#0x14]
;;;223    
;;;224      /* Check the parameters */
;;;225      assert_param(IS_TYPEPROGRAM(TypeProgram));
;;;226    
;;;227      /* Enable End of FLASH Operation interrupt */
;;;228      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
000014  4d16              LDR      r5,|L16.112|
000016  682f              LDR      r7,[r5,#0]
000018  f0477780          ORR      r7,r7,#0x1000000
00001c  602f              STR      r7,[r5,#0]
;;;229      
;;;230      /* Enable Error source interrupt */
;;;231      __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
00001e  682f              LDR      r7,[r5,#0]
000020  f0477700          ORR      r7,r7,#0x2000000
000024  602f              STR      r7,[r5,#0]
;;;232      
;;;233      /* Clear pending flags (if any) */  
;;;234      __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
000026  4f12              LDR      r7,|L16.112|
000028  25f3              MOVS     r5,#0xf3
00002a  1f3f              SUBS     r7,r7,#4
00002c  603d              STR      r5,[r7,#0]
;;;235                             FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR| FLASH_FLAG_PGSERR);  
;;;236    
;;;237      pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
00002e  2503              MOVS     r5,#3
000030  700d              STRB     r5,[r1,#0]
;;;238      pFlash.Address = Address;
000032  610e              STR      r6,[r1,#0x10]  ; pFlash
000034  b158              CBZ      r0,|L16.78|
;;;239    
;;;240      if(TypeProgram == TYPEPROGRAM_BYTE)
;;;241      {
;;;242        /*Program byte (8-bit) at a specified address.*/
;;;243          FLASH_Program_Byte(Address, (uint8_t) Data);
;;;244      }
;;;245      else if(TypeProgram == TYPEPROGRAM_HALFWORD)
000036  2801              CMP      r0,#1
000038  d00e              BEQ      |L16.88|
;;;246      {
;;;247        /*Program halfword (16-bit) at a specified address.*/
;;;248        FLASH_Program_HalfWord(Address, (uint16_t) Data);
;;;249      }
;;;250      else if(TypeProgram == TYPEPROGRAM_WORD)
00003a  2802              CMP      r0,#2
00003c  d011              BEQ      |L16.98|
;;;251      {
;;;252        /*Program word (32-bit) at a specified address.*/
;;;253        FLASH_Program_Word(Address, (uint32_t) Data);
;;;254      }
;;;255      else
;;;256      {
;;;257        /*Program double word (64-bit) at a specified address.*/
;;;258        FLASH_Program_DoubleWord(Address, Data);
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       FLASH_Program_DoubleWord
                  |L16.68|
;;;259      }
;;;260    
;;;261      return status;
000044  4620              MOV      r0,r4
                  |L16.70|
;;;262    }
000046  e8bd81f0          POP      {r4-r8,pc}
                  |L16.74|
00004a  2002              MOVS     r0,#2                 ;222
00004c  e7fb              B        |L16.70|
                  |L16.78|
00004e  b2d1              UXTB     r1,r2                 ;243
000050  4630              MOV      r0,r6                 ;243
000052  f7fffffe          BL       FLASH_Program_Byte
000056  e7f5              B        |L16.68|
                  |L16.88|
000058  b291              UXTH     r1,r2                 ;248
00005a  4630              MOV      r0,r6                 ;248
00005c  f7fffffe          BL       FLASH_Program_HalfWord
000060  e7f0              B        |L16.68|
                  |L16.98|
000062  4611              MOV      r1,r2                 ;253
000064  4630              MOV      r0,r6                 ;253
000066  f7fffffe          BL       FLASH_Program_Word
00006a  e7eb              B        |L16.68|
;;;263    
                          ENDP

                  |L16.108|
                          DCD      ||.bss||
                  |L16.112|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Unlock PROC
;;;439      */
;;;440    HAL_StatusTypeDef HAL_FLASH_Unlock(void)
000000  4806              LDR      r0,|L17.28|
;;;441    {
;;;442      if((FLASH->CR & FLASH_CR_LOCK) != RESET)
000002  6800              LDR      r0,[r0,#0]
000004  2800              CMP      r0,#0
000006  da07              BGE      |L17.24|
;;;443      {
;;;444        /* Authorize the FLASH Registers access */
;;;445        FLASH->KEYR = FLASH_KEY1;
000008  4804              LDR      r0,|L17.28|
00000a  4905              LDR      r1,|L17.32|
00000c  380c              SUBS     r0,r0,#0xc
00000e  6001              STR      r1,[r0,#0]
;;;446        FLASH->KEYR = FLASH_KEY2;
000010  4904              LDR      r1,|L17.36|
000012  6001              STR      r1,[r0,#0]
;;;447      }
;;;448      else
;;;449      {
;;;450        return HAL_ERROR;
;;;451      }
;;;452      
;;;453      return HAL_OK; 
000014  2000              MOVS     r0,#0
;;;454    }
000016  4770              BX       lr
                  |L17.24|
000018  2001              MOVS     r0,#1                 ;450
00001a  4770              BX       lr
;;;455    
                          ENDP

                  |L17.28|
                          DCD      0x40023c10
                  |L17.32|
                          DCD      0x45670123
                  |L17.36|
                          DCD      0xcdef89ab

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pFlash
                          %        24

;*** Start embedded assembler ***

#line 1 "..\\..\\Drivers\\STM32F2xx_HAL_Driver\\Src\\stm32f2xx_hal_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f2xx_hal_flash_c_48aa8f3e____REV16|
#line 129 "..\\..\\Drivers\\CMSIS\\Include\\core_cmInstr.h"
|__asm___21_stm32f2xx_hal_flash_c_48aa8f3e____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f2xx_hal_flash_c_48aa8f3e____REVSH|
#line 144
|__asm___21_stm32f2xx_hal_flash_c_48aa8f3e____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
