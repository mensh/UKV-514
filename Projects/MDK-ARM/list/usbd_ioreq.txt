; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o"bhd2 configuration\usbd_ioreq.o" --asm_dir=.\list\ --list_dir=.\list\ --depend="bhd2 configuration\usbd_ioreq.d" --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\..\Drivers\CMSIS\Device\ST\STM32F2xx\Include -I..\..\Drivers\CMSIS\Include -I..\..\Middlewares\ST\STM32_USB_Device_Library\Class\CDC\Inc -I..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc -I..\..\Drivers\STM32F2xx_HAL_Driver\Inc -I..\..\Inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_HAL_DRIVER -DSTM32F215xx --omf_browse="bhd2 configuration\usbd_ioreq.crf" ..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Src\usbd_ioreq.c]
                          THUMB

                          AREA ||i.USBD_CtlContinueRx||, CODE, READONLY, ALIGN=1

                  USBD_CtlContinueRx PROC
;;;159    */
;;;160    USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
000000  4613              MOV      r3,r2
;;;161                                              uint8_t *pbuf,                                          
;;;162                                              uint16_t len)
;;;163    {
000002  b510              PUSH     {r4,lr}
;;;164    
;;;165      USBD_LL_PrepareReceive (pdev,
000004  460a              MOV      r2,r1
000006  2100              MOVS     r1,#0
000008  f7fffffe          BL       USBD_LL_PrepareReceive
;;;166                              0,                     
;;;167                              pbuf,                         
;;;168                              len);
;;;169      return USBD_OK;
00000c  2000              MOVS     r0,#0
;;;170    }
00000e  bd10              POP      {r4,pc}
;;;171    /**
                          ENDP


                          AREA ||i.USBD_CtlContinueSendData||, CODE, READONLY, ALIGN=1

                  USBD_CtlContinueSendData PROC
;;;116    */
;;;117    USBD_StatusTypeDef  USBD_CtlContinueSendData(USBD_HandleTypeDef  *pdev, 
000000  4613              MOV      r3,r2
;;;118                                           uint8_t *pbuf,
;;;119                                           uint16_t len)
;;;120    {
000002  b510              PUSH     {r4,lr}
;;;121     /* Start the next transfer */
;;;122      USBD_LL_Transmit(pdev, 0x00, pbuf, len);   
000004  460a              MOV      r2,r1
000006  2100              MOVS     r1,#0
000008  f7fffffe          BL       USBD_LL_Transmit
;;;123      
;;;124      return USBD_OK;
00000c  2000              MOVS     r0,#0
;;;125    }
00000e  bd10              POP      {r4,pc}
;;;126    
                          ENDP


                          AREA ||i.USBD_CtlPrepareRx||, CODE, READONLY, ALIGN=1

                  USBD_CtlPrepareRx PROC
;;;134    */
;;;135    USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
000000  b510              PUSH     {r4,lr}
;;;136                                      uint8_t *pbuf,                                  
;;;137                                      uint16_t len)
;;;138    {
;;;139      /* Set EP0 State */
;;;140      pdev->ep0_state = USBD_EP0_DATA_OUT; 
000002  2303              MOVS     r3,#3
;;;141      pdev->ep_out[0].total_length = len;
;;;142      pdev->ep_out[0].rem_length   = len;
000004  f8c02108          STR      r2,[r0,#0x108]
;;;143      /* Start the transfer */
;;;144      USBD_LL_PrepareReceive (pdev,
000008  f8c031f4          STR      r3,[r0,#0x1f4]
00000c  f8c0210c          STR      r2,[r0,#0x10c]
000010  4613              MOV      r3,r2
000012  460a              MOV      r2,r1
000014  2100              MOVS     r1,#0
000016  f7fffffe          BL       USBD_LL_PrepareReceive
;;;145                              0,
;;;146                              pbuf,
;;;147                             len);
;;;148      
;;;149      return USBD_OK;
00001a  2000              MOVS     r0,#0
;;;150    }
00001c  bd10              POP      {r4,pc}
;;;151    
                          ENDP


                          AREA ||i.USBD_CtlReceiveStatus||, CODE, READONLY, ALIGN=1

                  USBD_CtlReceiveStatus PROC
;;;194    */
;;;195    USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
000000  b510              PUSH     {r4,lr}
;;;196    {
;;;197      /* Set EP0 State */
;;;198      pdev->ep0_state = USBD_EP0_STATUS_OUT; 
000002  2105              MOVS     r1,#5
;;;199      
;;;200     /* Start the transfer */  
;;;201      USBD_LL_PrepareReceive ( pdev,
000004  2300              MOVS     r3,#0
000006  f8c011f4          STR      r1,[r0,#0x1f4]
00000a  461a              MOV      r2,r3
00000c  4619              MOV      r1,r3
00000e  f7fffffe          BL       USBD_LL_PrepareReceive
;;;202                        0,
;;;203                        NULL,
;;;204                        0);  
;;;205    
;;;206      return USBD_OK;
000012  2000              MOVS     r0,#0
;;;207    }
000014  bd10              POP      {r4,pc}
;;;208    
                          ENDP


                          AREA ||i.USBD_CtlSendData||, CODE, READONLY, ALIGN=1

                  USBD_CtlSendData PROC
;;;94     */
;;;95     USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
000000  b510              PUSH     {r4,lr}
;;;96                                    uint8_t *pbuf,
;;;97                                    uint16_t len)
;;;98     {
;;;99       /* Set EP0 State */
;;;100      pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
000002  2302              MOVS     r3,#2
;;;101      pdev->ep_in[0].total_length = len;
;;;102      pdev->ep_in[0].rem_length   = len;
000004  6182              STR      r2,[r0,#0x18]
;;;103     /* Start the transfer */
;;;104      USBD_LL_Transmit(pdev, 0x00, pbuf, len);  
000006  f8c031f4          STR      r3,[r0,#0x1f4]
00000a  61c2              STR      r2,[r0,#0x1c]
00000c  4613              MOV      r3,r2
00000e  460a              MOV      r2,r1
000010  2100              MOVS     r1,#0
000012  f7fffffe          BL       USBD_LL_Transmit
;;;105      
;;;106      return USBD_OK;
000016  2000              MOVS     r0,#0
;;;107    }
000018  bd10              POP      {r4,pc}
;;;108    
                          ENDP


                          AREA ||i.USBD_CtlSendStatus||, CODE, READONLY, ALIGN=1

                  USBD_CtlSendStatus PROC
;;;176    */
;;;177    USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
000000  b510              PUSH     {r4,lr}
;;;178    {
;;;179    
;;;180      /* Set EP0 State */
;;;181      pdev->ep0_state = USBD_EP0_STATUS_IN;
000002  2104              MOVS     r1,#4
;;;182      
;;;183     /* Start the transfer */
;;;184      USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
000004  2300              MOVS     r3,#0
000006  f8c011f4          STR      r1,[r0,#0x1f4]
00000a  461a              MOV      r2,r3
00000c  4619              MOV      r1,r3
00000e  f7fffffe          BL       USBD_LL_Transmit
;;;185      
;;;186      return USBD_OK;
000012  2000              MOVS     r0,#0
;;;187    }
000014  bd10              POP      {r4,pc}
;;;188    
                          ENDP


                          AREA ||i.USBD_GetRxCount||, CODE, READONLY, ALIGN=1

                  USBD_GetRxCount PROC
;;;216    */
;;;217    uint16_t  USBD_GetRxCount(USBD_HandleTypeDef  *pdev , uint8_t ep_addr)
000000  b510              PUSH     {r4,lr}
;;;218    {
;;;219      return USBD_LL_GetRxDataSize(pdev, ep_addr);
000002  f7fffffe          BL       USBD_LL_GetRxDataSize
000006  b280              UXTH     r0,r0
;;;220    }
000008  bd10              POP      {r4,pc}
;;;221    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\Middlewares\\ST\\STM32_USB_Device_Library\\Core\\Src\\usbd_ioreq.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_usbd_ioreq_c_28e25e4d____REV16|
#line 129 "..\\..\\Drivers\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_usbd_ioreq_c_28e25e4d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_usbd_ioreq_c_28e25e4d____REVSH|
#line 144
|__asm___12_usbd_ioreq_c_28e25e4d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
