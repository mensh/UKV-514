; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o"bhd2 configuration\stm32f2xx_hal_dma_ex.o" --asm_dir=.\list\ --list_dir=.\list\ --depend="bhd2 configuration\stm32f2xx_hal_dma_ex.d" --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\..\Drivers\CMSIS\Device\ST\STM32F2xx\Include -I..\..\Drivers\CMSIS\Include -I..\..\Middlewares\ST\STM32_USB_Device_Library\Class\CDC\Inc -I..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc -I..\..\Drivers\STM32F2xx_HAL_Driver\Inc -I..\..\Inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_HAL_DRIVER -DSTM32F215xx --omf_browse="bhd2 configuration\stm32f2xx_hal_dma_ex.crf" ..\..\Drivers\STM32F2xx_HAL_Driver\Src\stm32f2xx_hal_dma_ex.c]
                          THUMB

                          AREA ||i.DMA_MultiBufferSetConfig||, CODE, READONLY, ALIGN=1

                  DMA_MultiBufferSetConfig PROC
;;;255      */
;;;256    static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b510              PUSH     {r4,lr}
;;;257    {  
;;;258      /* Configure DMA Stream data length */
;;;259      hdma->Instance->NDTR = DataLength;
000002  6804              LDR      r4,[r0,#0]
000004  6063              STR      r3,[r4,#4]
;;;260      
;;;261      /* Peripheral to Memory */
;;;262      if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
000006  6883              LDR      r3,[r0,#8]
000008  2b40              CMP      r3,#0x40
00000a  6803              LDR      r3,[r0,#0]            ;257
00000c  d003              BEQ      |L1.22|
;;;263      {   
;;;264        /* Configure DMA Stream destination address */
;;;265        hdma->Instance->PAR = DstAddress;
;;;266        
;;;267        /* Configure DMA Stream source address */
;;;268        hdma->Instance->M0AR = SrcAddress;
;;;269      }
;;;270      /* Memory to Peripheral */
;;;271      else
;;;272      {
;;;273        /* Configure DMA Stream source address */
;;;274        hdma->Instance->PAR = SrcAddress;
00000e  6099              STR      r1,[r3,#8]
;;;275        
;;;276        /* Configure DMA Stream destination address */
;;;277        hdma->Instance->M0AR = DstAddress;
000010  6800              LDR      r0,[r0,#0]
000012  60c2              STR      r2,[r0,#0xc]
;;;278      }
;;;279    }
000014  bd10              POP      {r4,pc}
                  |L1.22|
000016  609a              STR      r2,[r3,#8]            ;265
000018  6800              LDR      r0,[r0,#0]            ;268
00001a  60c1              STR      r1,[r0,#0xc]          ;268
00001c  bd10              POP      {r4,pc}
;;;280    
                          ENDP


                          AREA ||i.HAL_DMAEx_ChangeMemory||, CODE, READONLY, ALIGN=1

                  HAL_DMAEx_ChangeMemory PROC
;;;226      */
;;;227    HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
000000  6800              LDR      r0,[r0,#0]
;;;228    {
000002  b112              CBZ      r2,|L2.10|
;;;229      if(memory == MEMORY0)
;;;230      {
;;;231        /* change the memory0 address */
;;;232        hdma->Instance->M0AR = Address;
;;;233      }
;;;234      else
;;;235      {
;;;236        /* change the memory1 address */
;;;237        hdma->Instance->M1AR = Address;
000004  6101              STR      r1,[r0,#0x10]
                  |L2.6|
;;;238      }
;;;239    
;;;240      return HAL_OK;
000006  2000              MOVS     r0,#0
;;;241    }
000008  4770              BX       lr
                  |L2.10|
00000a  60c1              STR      r1,[r0,#0xc]          ;232
00000c  e7fb              B        |L2.6|
;;;242    
                          ENDP


                          AREA ||i.HAL_DMAEx_MultiBufferStart||, CODE, READONLY, ALIGN=1

                  HAL_DMAEx_MultiBufferStart PROC
;;;113      */
;;;114    HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
000000  b570              PUSH     {r4-r6,lr}
;;;115    {
000002  4604              MOV      r4,r0
;;;116      /* Process Locked */
;;;117      __HAL_LOCK(hdma);
000004  f8900034          LDRB     r0,[r0,#0x34]
000008  9d04              LDR      r5,[sp,#0x10]
00000a  2801              CMP      r0,#1
00000c  d008              BEQ      |L3.32|
00000e  2001              MOVS     r0,#1
000010  f8840034          STRB     r0,[r4,#0x34]
;;;118    
;;;119      /* Current memory buffer used is Memory 0 */
;;;120      if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
000014  6820              LDR      r0,[r4,#0]
000016  6806              LDR      r6,[r0,#0]
000018  0336              LSLS     r6,r6,#12
00001a  d403              BMI      |L3.36|
;;;121      {
;;;122        hdma->State = HAL_DMA_STATE_BUSY_MEM0;
00001c  2612              MOVS     r6,#0x12
00001e  e005              B        |L3.44|
                  |L3.32|
000020  2002              MOVS     r0,#2                 ;117
;;;123      }
;;;124      /* Current memory buffer used is Memory 1 */
;;;125      else if((hdma->Instance->CR & DMA_SxCR_CT) != 0)
;;;126      {
;;;127        hdma->State = HAL_DMA_STATE_BUSY_MEM1;
;;;128      }
;;;129    
;;;130       /* Check the parameters */
;;;131      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;132    
;;;133      /* Disable the peripheral */
;;;134      __HAL_DMA_DISABLE(hdma);  
;;;135    
;;;136      /* Enable the double buffer mode */
;;;137      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
;;;138    
;;;139      /* Configure DMA Stream destination address */
;;;140      hdma->Instance->M1AR = SecondMemAddress;
;;;141    
;;;142      /* Configure the source, destination address and the data length */
;;;143      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;144    
;;;145      /* Enable the peripheral */
;;;146      __HAL_DMA_ENABLE(hdma);
;;;147    
;;;148      return HAL_OK;
;;;149    }
000022  bd70              POP      {r4-r6,pc}
                  |L3.36|
000024  6806              LDR      r6,[r0,#0]            ;125
000026  0336              LSLS     r6,r6,#12             ;125
000028  d502              BPL      |L3.48|
00002a  2622              MOVS     r6,#0x22              ;127
                  |L3.44|
00002c  f8846035          STRB     r6,[r4,#0x35]         ;127
                  |L3.48|
000030  6806              LDR      r6,[r0,#0]            ;134
000032  f0260601          BIC      r6,r6,#1              ;134
000036  6006              STR      r6,[r0,#0]            ;134
000038  6820              LDR      r0,[r4,#0]            ;137
00003a  6806              LDR      r6,[r0,#0]            ;137
00003c  f4462680          ORR      r6,r6,#0x40000        ;137
000040  6006              STR      r6,[r0,#0]            ;137
000042  6820              LDR      r0,[r4,#0]            ;140
000044  6103              STR      r3,[r0,#0x10]         ;140
000046  462b              MOV      r3,r5                 ;143
000048  4620              MOV      r0,r4                 ;143
00004a  f7fffffe          BL       DMA_MultiBufferSetConfig
00004e  6820              LDR      r0,[r4,#0]            ;146
000050  6801              LDR      r1,[r0,#0]            ;146
000052  f0410101          ORR      r1,r1,#1              ;146
000056  6001              STR      r1,[r0,#0]            ;146
000058  2000              MOVS     r0,#0                 ;148
00005a  bd70              POP      {r4-r6,pc}
;;;150    
                          ENDP


                          AREA ||i.HAL_DMAEx_MultiBufferStart_IT||, CODE, READONLY, ALIGN=1

                  HAL_DMAEx_MultiBufferStart_IT PROC
;;;160      */
;;;161    HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
000000  b570              PUSH     {r4-r6,lr}
;;;162    {
000002  4604              MOV      r4,r0
;;;163      /* Process Locked */
;;;164      __HAL_LOCK(hdma);
000004  f8900034          LDRB     r0,[r0,#0x34]
000008  9d04              LDR      r5,[sp,#0x10]
00000a  2801              CMP      r0,#1
00000c  d008              BEQ      |L4.32|
00000e  2001              MOVS     r0,#1
000010  f8840034          STRB     r0,[r4,#0x34]
;;;165    
;;;166      /* Current memory buffer used is Memory 0 */
;;;167      if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
000014  6820              LDR      r0,[r4,#0]
000016  6806              LDR      r6,[r0,#0]
000018  0336              LSLS     r6,r6,#12
00001a  d403              BMI      |L4.36|
;;;168      {
;;;169        hdma->State = HAL_DMA_STATE_BUSY_MEM0;
00001c  2612              MOVS     r6,#0x12
00001e  e005              B        |L4.44|
                  |L4.32|
000020  2002              MOVS     r0,#2                 ;164
;;;170      }
;;;171      /* Current memory buffer used is Memory 1 */
;;;172      else if((hdma->Instance->CR & DMA_SxCR_CT) != 0)
;;;173      {
;;;174        hdma->State = HAL_DMA_STATE_BUSY_MEM1;
;;;175      }
;;;176    
;;;177      /* Check the parameters */
;;;178      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;179    
;;;180      /* Disable the peripheral */
;;;181      __HAL_DMA_DISABLE(hdma);  
;;;182    
;;;183      /* Enable the Double buffer mode */
;;;184      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
;;;185    
;;;186      /* Configure DMA Stream destination address */
;;;187      hdma->Instance->M1AR = SecondMemAddress;
;;;188    
;;;189      /* Configure the source, destination address and the data length */
;;;190      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
;;;191    
;;;192      /* Enable the transfer complete interrupt */
;;;193      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
;;;194    
;;;195      /* Enable the Half transfer interrupt */
;;;196      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
;;;197    
;;;198      /* Enable the transfer Error interrupt */
;;;199      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
;;;200    
;;;201      /* Enable the fifo Error interrupt */
;;;202      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_FE);  
;;;203    
;;;204      /* Enable the direct mode Error interrupt */
;;;205      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_DME); 
;;;206    
;;;207      /* Enable the peripheral */
;;;208      __HAL_DMA_ENABLE(hdma); 
;;;209    
;;;210      return HAL_OK; 
;;;211    }
000022  bd70              POP      {r4-r6,pc}
                  |L4.36|
000024  6806              LDR      r6,[r0,#0]            ;172
000026  0336              LSLS     r6,r6,#12             ;172
000028  d502              BPL      |L4.48|
00002a  2622              MOVS     r6,#0x22              ;174
                  |L4.44|
00002c  f8846035          STRB     r6,[r4,#0x35]         ;174
                  |L4.48|
000030  6806              LDR      r6,[r0,#0]            ;181
000032  f0260601          BIC      r6,r6,#1              ;181
000036  6006              STR      r6,[r0,#0]            ;181
000038  6820              LDR      r0,[r4,#0]            ;184
00003a  6806              LDR      r6,[r0,#0]            ;184
00003c  f4462680          ORR      r6,r6,#0x40000        ;184
000040  6006              STR      r6,[r0,#0]            ;184
000042  6820              LDR      r0,[r4,#0]            ;187
000044  6103              STR      r3,[r0,#0x10]         ;187
000046  462b              MOV      r3,r5                 ;190
000048  4620              MOV      r0,r4                 ;190
00004a  f7fffffe          BL       DMA_MultiBufferSetConfig
00004e  6820              LDR      r0,[r4,#0]            ;193
000050  6801              LDR      r1,[r0,#0]            ;193
000052  f0410110          ORR      r1,r1,#0x10           ;193
000056  6001              STR      r1,[r0,#0]            ;193
000058  6820              LDR      r0,[r4,#0]            ;196
00005a  6801              LDR      r1,[r0,#0]            ;196
00005c  f0410108          ORR      r1,r1,#8              ;196
000060  6001              STR      r1,[r0,#0]            ;196
000062  6820              LDR      r0,[r4,#0]            ;199
000064  6801              LDR      r1,[r0,#0]            ;199
000066  f0410104          ORR      r1,r1,#4              ;199
00006a  6001              STR      r1,[r0,#0]            ;199
00006c  6820              LDR      r0,[r4,#0]            ;202
00006e  6941              LDR      r1,[r0,#0x14]         ;202
000070  f0410180          ORR      r1,r1,#0x80           ;202
000074  6141              STR      r1,[r0,#0x14]         ;202
000076  6820              LDR      r0,[r4,#0]            ;205
000078  6801              LDR      r1,[r0,#0]            ;205
00007a  f0410102          ORR      r1,r1,#2              ;205
00007e  6001              STR      r1,[r0,#0]            ;205
000080  6820              LDR      r0,[r4,#0]            ;208
000082  6801              LDR      r1,[r0,#0]            ;208
000084  f0410101          ORR      r1,r1,#1              ;208
000088  6001              STR      r1,[r0,#0]            ;208
00008a  2000              MOVS     r0,#0                 ;210
00008c  bd70              POP      {r4-r6,pc}
;;;212    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\Drivers\\STM32F2xx_HAL_Driver\\Src\\stm32f2xx_hal_dma_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f2xx_hal_dma_ex_c_af8eecb0____REV16|
#line 129 "..\\..\\Drivers\\CMSIS\\Include\\core_cmInstr.h"
|__asm___22_stm32f2xx_hal_dma_ex_c_af8eecb0____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f2xx_hal_dma_ex_c_af8eecb0____REVSH|
#line 144
|__asm___22_stm32f2xx_hal_dma_ex_c_af8eecb0____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
