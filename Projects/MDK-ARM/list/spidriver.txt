; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o"bhd2 configuration\spidriver.o" --asm_dir=.\list\ --list_dir=.\list\ --depend="bhd2 configuration\spidriver.d" --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\..\Drivers\CMSIS\Device\ST\STM32F2xx\Include -I..\..\Drivers\CMSIS\Include -I..\..\Middlewares\ST\STM32_USB_Device_Library\Class\CDC\Inc -I..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc -I..\..\Drivers\STM32F2xx_HAL_Driver\Inc -I..\..\Inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_HAL_DRIVER -DSTM32F215xx --omf_browse="bhd2 configuration\spidriver.crf" ..\..\Src\core\spiDriver.c]
                          THUMB

                          AREA ||i.SPI_DRIVER_dataTransmition||, CODE, READONLY, ALIGN=2

                  SPI_DRIVER_dataTransmition PROC
;;;72     
;;;73     tdStatus SPI_DRIVER_dataTransmition(tdSpiDevice *_pDevice, uint8_t *_pTxData, uint8_t *_pRxData, uint16_t _size)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;74     	{
000004  461d              MOV      r5,r3
000006  4616              MOV      r6,r2
000008  460f              MOV      r7,r1
00000a  b140              CBZ      r0,|L1.30|
;;;75     	tdStatus status;
;;;76     	tdSpiDevice **pSpiDevice;
;;;77     	#if SPI_DRIVER_TRANSMITION_TIMEOUT_ENABLE != 0
;;;78     	uint32_t timeout;
;;;79     	#endif
;;;80     
;;;81     	if( _pDevice == NULL )
;;;82     		return Fail;
;;;83     
;;;84     	pSpiDevice = &spiDriver.pChannel[ _pDevice->channel ];
00000c  7b01              LDRB     r1,[r0,#0xc]
00000e  4a13              LDR      r2,|L1.92|
000010  eb020481          ADD      r4,r2,r1,LSL #2
;;;85     
;;;86     	if( *pSpiDevice != NULL )
000014  6821              LDR      r1,[r4,#0]
000016  b121              CBZ      r1,|L1.34|
;;;87     		return Busy;
000018  2000              MOVS     r0,#0
                  |L1.26|
;;;88     
;;;89     	*pSpiDevice = _pDevice;
;;;90     
;;;91     	#if SPI_DRIVER_TRANSMITION_TIMEOUT_ENABLE != 0
;;;92       timeout = HAL_GetTick() + SPI_TRANSMITION_TIMEOUT_MS;
;;;93     	#endif
;;;94     
;;;95     	SPI_DRIVER_setCS( &(*pSpiDevice)->chipSelect, Down );
;;;96     
;;;97     	HAL_SPI_TransmitReceive_DMA( (*pSpiDevice)->pSpi, _pTxData, _pRxData, _size );
;;;98     
;;;99     	status = Ok;
;;;100    
;;;101    	while( HAL_SPI_GetState( (*pSpiDevice)->pSpi ) != HAL_SPI_STATE_READY )
;;;102    		{
;;;103    		#if SPI_DRIVER_TRANSMITION_TIMEOUT_ENABLE != 0
;;;104    		if( timeout > HAL_GetTick() )
;;;105    			{
;;;106    			status = TimeOut;
;;;107    			break;
;;;108    			}
;;;109    		#endif
;;;110    		}
;;;111    
;;;112    	#if SPI_DRIVER_SPI_TxRx_COMPLETE_CALLBACK_ENABLE == 0
;;;113    	SPI_DRIVER_setCS( &(*pSpiDevice)->chipSelect, Up );
;;;114    	#endif
;;;115    
;;;116    	*pSpiDevice = NULL;
;;;117    
;;;118    	return status;
;;;119    	};
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.30|
00001e  2002              MOVS     r0,#2                 ;82
000020  e7fb              B        |L1.26|
                  |L1.34|
000022  6020              STR      r0,[r4,#0]            ;95
000024  2100              MOVS     r1,#0                 ;95
000026  1d00              ADDS     r0,r0,#4              ;95
000028  f7fffffe          BL       SPI_DRIVER_setCS
00002c  6820              LDR      r0,[r4,#0]            ;97
00002e  462b              MOV      r3,r5                 ;97
000030  4632              MOV      r2,r6                 ;97
000032  6800              LDR      r0,[r0,#0]            ;97
000034  4639              MOV      r1,r7                 ;97
000036  f7fffffe          BL       HAL_SPI_TransmitReceive_DMA
00003a  2501              MOVS     r5,#1                 ;99
                  |L1.60|
00003c  6820              LDR      r0,[r4,#0]            ;101
00003e  6800              LDR      r0,[r0,#0]            ;101
000040  f7fffffe          BL       HAL_SPI_GetState
000044  2801              CMP      r0,#1                 ;101
000046  d1f9              BNE      |L1.60|
000048  6820              LDR      r0,[r4,#0]            ;113
00004a  2101              MOVS     r1,#1                 ;113
00004c  1d00              ADDS     r0,r0,#4              ;113
00004e  f7fffffe          BL       SPI_DRIVER_setCS
000052  2000              MOVS     r0,#0                 ;116
000054  6020              STR      r0,[r4,#0]            ;118
000056  4628              MOV      r0,r5                 ;118
000058  e7df              B        |L1.26|
;;;120    
                          ENDP

00005a  0000              DCW      0x0000
                  |L1.92|
                          DCD      ||.bss||

                          AREA ||i.SPI_DRIVER_getSpiChannel||, CODE, READONLY, ALIGN=2

                  SPI_DRIVER_getSpiChannel PROC
;;;5      
;;;6      uint8_t SPI_DRIVER_getSpiChannel(SPI_HandleTypeDef *_pSpi)
000000  4601              MOV      r1,r0
;;;7      	{
;;;8      	uint8_t channel = SPI_DRIVER_CHANNELS;
;;;9      
;;;10     	if( _pSpi->Instance == SPI1 )
000002  4a08              LDR      r2,|L2.36|
000004  6809              LDR      r1,[r1,#0]
000006  2003              MOVS     r0,#3                 ;8
000008  4291              CMP      r1,r2
00000a  d101              BNE      |L2.16|
;;;11     		{
;;;12     		channel = SPI_DRIVER_CHANNEL_1;
00000c  2000              MOVS     r0,#0
;;;13     		}
;;;14     	else if( _pSpi->Instance == SPI2 )
;;;15     		{
;;;16     		channel = SPI_DRIVER_CHANNEL_2;
;;;17     		}
;;;18     	else if( _pSpi->Instance == SPI3 )
;;;19     		{
;;;20     		channel = SPI_DRIVER_CHANNEL_3;
;;;21     		}
;;;22     
;;;23     	return channel;
;;;24     	}
00000e  4770              BX       lr
                  |L2.16|
000010  4a05              LDR      r2,|L2.40|
000012  4291              CMP      r1,r2                 ;14
000014  d101              BNE      |L2.26|
000016  2001              MOVS     r0,#1                 ;16
                  |L2.24|
000018  4770              BX       lr
                  |L2.26|
00001a  4a04              LDR      r2,|L2.44|
00001c  4291              CMP      r1,r2                 ;18
00001e  d1fb              BNE      |L2.24|
000020  2002              MOVS     r0,#2                 ;20
000022  4770              BX       lr
;;;25     
                          ENDP

                  |L2.36|
                          DCD      0x40013000
                  |L2.40|
                          DCD      0x40003800
                  |L2.44|
                          DCD      0x40003c00

                          AREA ||i.SPI_DRIVER_initCS||, CODE, READONLY, ALIGN=1

                  SPI_DRIVER_initCS PROC
;;;25     
;;;26     tdStatus SPI_DRIVER_initCS(tdSpiCS *_pCs)
000000  b500              PUSH     {lr}
;;;27     	{
000002  b085              SUB      sp,sp,#0x14
;;;28     	GPIO_InitTypeDef GPIO_InitStruct;
;;;29     
;;;30       GPIO_InitStruct.Pin = _pCs->pin;
000004  6841              LDR      r1,[r0,#4]
;;;31       GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
000006  9100              STR      r1,[sp,#0]
000008  2101              MOVS     r1,#1
;;;32       GPIO_InitStruct.Pull = GPIO_PULLUP;
00000a  9101              STR      r1,[sp,#4]
;;;33       GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
00000c  9102              STR      r1,[sp,#8]
00000e  2103              MOVS     r1,#3
;;;34     
;;;35       HAL_GPIO_Init(_pCs->pGPIO, &GPIO_InitStruct);
000010  9103              STR      r1,[sp,#0xc]
000012  6800              LDR      r0,[r0,#0]
000014  4669              MOV      r1,sp
000016  f7fffffe          BL       HAL_GPIO_Init
;;;36     
;;;37     	return Ok;
;;;38     	}
00001a  b005              ADD      sp,sp,#0x14
00001c  2001              MOVS     r0,#1                 ;37
00001e  bd00              POP      {pc}
;;;39     
                          ENDP


                          AREA ||i.SPI_DRIVER_initDevice||, CODE, READONLY, ALIGN=1

                  SPI_DRIVER_initDevice PROC
;;;49     
;;;50     tdStatus SPI_DRIVER_initDevice(tdSpiDevice *_pDevice, SPI_HandleTypeDef *_pSpiHandle, tdSpiCS *_pCs)
000000  b570              PUSH     {r4-r6,lr}
;;;51     	{
000002  4615              MOV      r5,r2
000004  0003              MOVS     r3,r0
000006  460c              MOV      r4,r1
000008  d005              BEQ      |L4.22|
;;;52     	uint8_t channel;
;;;53     
;;;54     	if( _pDevice == NULL || _pSpiHandle == NULL )
00000a  b124              CBZ      r4,|L4.22|
;;;55     		return Fail;
;;;56     
;;;57     	channel = SPI_DRIVER_getSpiChannel( _pSpiHandle );
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       SPI_DRIVER_getSpiChannel
;;;58     
;;;59     	if( (channel < SPI_DRIVER_CHANNELS) == 0 )
000012  2803              CMP      r0,#3
000014  d301              BCC      |L4.26|
                  |L4.22|
;;;60     		return Fail;
000016  2002              MOVS     r0,#2
                  |L4.24|
;;;61     
;;;62     	_pDevice->pSpi = _pSpiHandle;
;;;63     	_pDevice->channel = channel;
;;;64     	_pDevice->chipSelect.pGPIO = _pCs->pGPIO;
;;;65     	_pDevice->chipSelect.pin = _pCs->pin;
;;;66     
;;;67     	if( SPI_DRIVER_initCS( &_pDevice->chipSelect ) == Fail )
;;;68     		return Fail;
;;;69     
;;;70     	return Ok;
;;;71     	}
000018  bd70              POP      {r4-r6,pc}
                  |L4.26|
00001a  601c              STR      r4,[r3,#0]            ;63
00001c  7318              STRB     r0,[r3,#0xc]          ;63
00001e  6828              LDR      r0,[r5,#0]            ;64
000020  6058              STR      r0,[r3,#4]            ;65
000022  6868              LDR      r0,[r5,#4]            ;65
000024  6098              STR      r0,[r3,#8]            ;67
000026  1d18              ADDS     r0,r3,#4              ;67
000028  f7fffffe          BL       SPI_DRIVER_initCS
00002c  2802              CMP      r0,#2                 ;67
00002e  d0f3              BEQ      |L4.24|
000030  2001              MOVS     r0,#1                 ;70
000032  bd70              POP      {r4-r6,pc}
;;;72     
                          ENDP


                          AREA ||i.SPI_DRIVER_setCS||, CODE, READONLY, ALIGN=1

                  SPI_DRIVER_setCS PROC
;;;39     
;;;40     tdStatus SPI_DRIVER_setCS(tdSpiCS *_pChipSelect, tdEnumSpiCSState _state)
000000  b510              PUSH     {r4,lr}
;;;41     	{
000002  b140              CBZ      r0,|L5.22|
;;;42     	if( _pChipSelect == NULL )
;;;43     		return Fail;
;;;44     
;;;45     	HAL_GPIO_WritePin( _pChipSelect->pGPIO, _pChipSelect->pin, (GPIO_PinState)_state);
000004  8882              LDRH     r2,[r0,#4]
000006  6800              LDR      r0,[r0,#0]
000008  b293              UXTH     r3,r2
00000a  460a              MOV      r2,r1
00000c  4619              MOV      r1,r3
00000e  f7fffffe          BL       HAL_GPIO_WritePin
;;;46     
;;;47     	return Ok;
000012  2001              MOVS     r0,#1
;;;48     	}
000014  bd10              POP      {r4,pc}
                  |L5.22|
000016  2002              MOVS     r0,#2                 ;43
000018  bd10              POP      {r4,pc}
;;;49     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  spiDriver
                          %        12

;*** Start embedded assembler ***

#line 1 "..\\..\\Src\\core\\spiDriver.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_spiDriver_c_dc82bbb8____REV16|
#line 129 "..\\..\\Drivers\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_spiDriver_c_dc82bbb8____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_spiDriver_c_dc82bbb8____REVSH|
#line 144
|__asm___11_spiDriver_c_dc82bbb8____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
