; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o"bhd2 configuration\usbd_conf.o" --asm_dir=.\list\ --list_dir=.\list\ --depend="bhd2 configuration\usbd_conf.d" --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\..\Drivers\CMSIS\Device\ST\STM32F2xx\Include -I..\..\Drivers\CMSIS\Include -I..\..\Middlewares\ST\STM32_USB_Device_Library\Class\CDC\Inc -I..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc -I..\..\Drivers\STM32F2xx_HAL_Driver\Inc -I..\..\Inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_HAL_DRIVER -DSTM32F215xx --omf_browse="bhd2 configuration\usbd_conf.crf" ..\..\Src\usbd_conf.c]
                          THUMB

                          AREA ||i.HAL_PCD_ConnectCallback||, CODE, READONLY, ALIGN=1

                  HAL_PCD_ConnectCallback PROC
;;;304      */
;;;305    void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
000000  f8d003ac          LDR      r0,[r0,#0x3ac]
;;;306    {
;;;307      USBD_LL_DevConnected(hpcd->pData);
000004  f7ffbffe          B.W      USBD_LL_DevConnected
;;;308    }
;;;309    
                          ENDP


                          AREA ||i.HAL_PCD_DataInStageCallback||, CODE, READONLY, ALIGN=1

                  HAL_PCD_DataInStageCallback PROC
;;;213      */
;;;214    void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
000000  ebc102c1          RSB      r2,r1,r1,LSL #3
;;;215    {
;;;216      USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
000004  eb000282          ADD      r2,r0,r2,LSL #2
000008  f8d003ac          LDR      r0,[r0,#0x3ac]
00000c  6bd2              LDR      r2,[r2,#0x3c]
00000e  f7ffbffe          B.W      USBD_LL_DataInStage
;;;217    }
;;;218    
                          ENDP


                          AREA ||i.HAL_PCD_DataOutStageCallback||, CODE, READONLY, ALIGN=1

                  HAL_PCD_DataOutStageCallback PROC
;;;202      */
;;;203    void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
000000  ebc102c1          RSB      r2,r1,r1,LSL #3
;;;204    {
;;;205      USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
000004  eb000282          ADD      r2,r0,r2,LSL #2
000008  f8d003ac          LDR      r0,[r0,#0x3ac]
00000c  f8d221e0          LDR      r2,[r2,#0x1e0]
000010  f7ffbffe          B.W      USBD_LL_DataOutStage
;;;206    }
;;;207    
                          ENDP


                          AREA ||i.HAL_PCD_DisconnectCallback||, CODE, READONLY, ALIGN=1

                  HAL_PCD_DisconnectCallback PROC
;;;314      */
;;;315    void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
000000  f8d003ac          LDR      r0,[r0,#0x3ac]
;;;316    {
;;;317      USBD_LL_DevDisconnected(hpcd->pData);
000004  f7ffbffe          B.W      USBD_LL_DevDisconnected
;;;318    }
;;;319    
                          ENDP


                          AREA ||i.HAL_PCD_ISOINIncompleteCallback||, CODE, READONLY, ALIGN=1

                  HAL_PCD_ISOINIncompleteCallback PROC
;;;294      */
;;;295    void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
000000  f8d003ac          LDR      r0,[r0,#0x3ac]
;;;296    {
;;;297      USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
000004  f7ffbffe          B.W      USBD_LL_IsoINIncomplete
;;;298    }
;;;299    
                          ENDP


                          AREA ||i.HAL_PCD_ISOOUTIncompleteCallback||, CODE, READONLY, ALIGN=1

                  HAL_PCD_ISOOUTIncompleteCallback PROC
;;;283      */
;;;284    void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
000000  f8d003ac          LDR      r0,[r0,#0x3ac]
;;;285    {
;;;286      USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
000004  f7ffbffe          B.W      USBD_LL_IsoOUTIncomplete
;;;287    }
;;;288    
                          ENDP


                          AREA ||i.HAL_PCD_MspDeInit||, CODE, READONLY, ALIGN=2

                  HAL_PCD_MspDeInit PROC
;;;150    
;;;151    void HAL_PCD_MspDeInit(PCD_HandleTypeDef* hpcd)
000000  b510              PUSH     {r4,lr}
;;;152    	{
;;;153    	if( hpcd->Instance == USB_OTG_HS )
000002  6800              LDR      r0,[r0,#0]
000004  490f              LDR      r1,|L7.68|
000006  4288              CMP      r0,r1
000008  d11a              BNE      |L7.64|
;;;154    		{
;;;155    		/* Disable Peripheral clock */
;;;156    		__USB_OTG_HS_CLK_DISABLE();
00000a  480f              LDR      r0,|L7.72|
00000c  6801              LDR      r1,[r0,#0]
00000e  f0215100          BIC      r1,r1,#0x20000000
000012  6001              STR      r1,[r0,#0]
;;;157    		__USB_OTG_HS_ULPI_CLK_DISABLE();
000014  6801              LDR      r1,[r0,#0]
000016  f0214180          BIC      r1,r1,#0x40000000
00001a  6001              STR      r1,[r0,#0]
;;;158    
;;;159    		/**USB_OTG_HS GPIO Configuration    
;;;160    		PC0     ------> USB_OTG_HS_ULPI_STP
;;;161    		PC2     ------> USB_OTG_HS_ULPI_DIR
;;;162    		PC3     ------> USB_OTG_HS_ULPI_NXT
;;;163    		PA3     ------> USB_OTG_HS_ULPI_D0
;;;164    		PA5     ------> USB_OTG_HS_ULPI_CK
;;;165    		PB0     ------> USB_OTG_HS_ULPI_D1
;;;166    		PB1     ------> USB_OTG_HS_ULPI_D2
;;;167    		PB10     ------> USB_OTG_HS_ULPI_D3
;;;168    		PB11     ------> USB_OTG_HS_ULPI_D4
;;;169    		PB12     ------> USB_OTG_HS_ULPI_D5
;;;170    		PB13     ------> USB_OTG_HS_ULPI_D6
;;;171    		PB5     ------> USB_OTG_HS_ULPI_D7 
;;;172    		*/
;;;173    		HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3);
00001c  210d              MOVS     r1,#0xd
00001e  480b              LDR      r0,|L7.76|
000020  f7fffffe          BL       HAL_GPIO_DeInit
;;;174    
;;;175    		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_5);
000024  2128              MOVS     r1,#0x28
000026  480a              LDR      r0,|L7.80|
000028  f7fffffe          BL       HAL_GPIO_DeInit
;;;176    
;;;177    		HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
00002c  f6434123          MOV      r1,#0x3c23
000030  4808              LDR      r0,|L7.84|
000032  f7fffffe          BL       HAL_GPIO_DeInit
;;;178    											    |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5);
;;;179    
;;;180    		/* Peripheral interrupt Deinit*/
;;;181    		HAL_NVIC_DisableIRQ(OTG_HS_IRQn);
000036  e8bd4010          POP      {r4,lr}
00003a  204d              MOVS     r0,#0x4d
00003c  f7ffbffe          B.W      HAL_NVIC_DisableIRQ
                  |L7.64|
;;;182    		}
;;;183    	}
000040  bd10              POP      {r4,pc}
;;;184    
                          ENDP

000042  0000              DCW      0x0000
                  |L7.68|
                          DCD      0x40040000
                  |L7.72|
                          DCD      0x40023830
                  |L7.76|
                          DCD      0x40020800
                  |L7.80|
                          DCD      0x40020000
                  |L7.84|
                          DCD      0x40020400

                          AREA ||i.HAL_PCD_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_PCD_MspInit PROC
;;;97     #else
;;;98     void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
000000  b5f0              PUSH     {r4-r7,lr}
;;;99     	{
;;;100    	GPIO_InitTypeDef GPIO_InitStruct;
;;;101    
;;;102    	if( hpcd->Instance == USB_OTG_HS )
000002  6800              LDR      r0,[r0,#0]
000004  4918              LDR      r1,|L8.104|
000006  b085              SUB      sp,sp,#0x14           ;99
000008  4288              CMP      r0,r1
00000a  d12a              BNE      |L8.98|
;;;103    		{
;;;104    		/* Enable Peripheral clock */
;;;105    		__USB_OTG_HS_CLK_ENABLE();
00000c  4817              LDR      r0,|L8.108|
00000e  6801              LDR      r1,[r0,#0]
000010  f0415100          ORR      r1,r1,#0x20000000
000014  6001              STR      r1,[r0,#0]
;;;106    		__USB_OTG_HS_ULPI_CLK_ENABLE();
000016  6801              LDR      r1,[r0,#0]
000018  f0414180          ORR      r1,r1,#0x40000000
00001c  6001              STR      r1,[r0,#0]
;;;107    
;;;108    		/**USB_OTG_HS GPIO Configuration    
;;;109    		PC0     ------> USB_OTG_HS_ULPI_STP
;;;110    		PC2     ------> USB_OTG_HS_ULPI_DIR
;;;111    		PC3     ------> USB_OTG_HS_ULPI_NXT
;;;112    		PA3     ------> USB_OTG_HS_ULPI_D0
;;;113    		PA5     ------> USB_OTG_HS_ULPI_CK
;;;114    		PB0     ------> USB_OTG_HS_ULPI_D1
;;;115    		PB1     ------> USB_OTG_HS_ULPI_D2
;;;116    		PB10     ------> USB_OTG_HS_ULPI_D3
;;;117    		PB11     ------> USB_OTG_HS_ULPI_D4
;;;118    		PB12     ------> USB_OTG_HS_ULPI_D5
;;;119    		PB13     ------> USB_OTG_HS_ULPI_D6
;;;120    		PB5     ------> USB_OTG_HS_ULPI_D7 
;;;121    		*/
;;;122    		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3;
00001e  200d              MOVS     r0,#0xd
;;;123    		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
000020  2402              MOVS     r4,#2
;;;124    		GPIO_InitStruct.Pull = GPIO_NOPULL;
000022  2500              MOVS     r5,#0
;;;125    		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
000024  2603              MOVS     r6,#3
;;;126    		GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
000026  270a              MOVS     r7,#0xa
;;;127    		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
000028  e88d00f1          STM      sp,{r0,r4-r7}
00002c  4669              MOV      r1,sp
00002e  4810              LDR      r0,|L8.112|
000030  f7fffffe          BL       HAL_GPIO_Init
;;;128    
;;;129    		GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_5;
000034  2028              MOVS     r0,#0x28
;;;130    		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
;;;131    		GPIO_InitStruct.Pull = GPIO_NOPULL;
;;;132    		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
;;;133    		GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
;;;134    		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
000036  e88d00f1          STM      sp,{r0,r4-r7}
00003a  4669              MOV      r1,sp
00003c  480d              LDR      r0,|L8.116|
00003e  f7fffffe          BL       HAL_GPIO_Init
;;;135    
;;;136    		GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
000042  f6434023          MOV      r0,#0x3c23
;;;137    										     |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
;;;138    		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
;;;139    		GPIO_InitStruct.Pull = GPIO_NOPULL;
;;;140    		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
;;;141    		GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
;;;142    		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
000046  e88d00f1          STM      sp,{r0,r4-r7}
00004a  4669              MOV      r1,sp
00004c  480a              LDR      r0,|L8.120|
00004e  f7fffffe          BL       HAL_GPIO_Init
;;;143    
;;;144    		/* Peripheral interrupt init*/
;;;145    		/* Sets the priority grouping field */
;;;146    		HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
000052  2200              MOVS     r2,#0
000054  4611              MOV      r1,r2
000056  204d              MOVS     r0,#0x4d
000058  f7fffffe          BL       HAL_NVIC_SetPriority
;;;147    		HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
00005c  204d              MOVS     r0,#0x4d
00005e  f7fffffe          BL       HAL_NVIC_EnableIRQ
                  |L8.98|
;;;148    		}
;;;149    	}
000062  b005              ADD      sp,sp,#0x14
000064  bdf0              POP      {r4-r7,pc}
;;;150    
                          ENDP

000066  0000              DCW      0x0000
                  |L8.104|
                          DCD      0x40040000
                  |L8.108|
                          DCD      0x40023830
                  |L8.112|
                          DCD      0x40020800
                  |L8.116|
                          DCD      0x40020000
                  |L8.120|
                          DCD      0x40020400

                          AREA ||i.HAL_PCD_ResetCallback||, CODE, READONLY, ALIGN=1

                  HAL_PCD_ResetCallback PROC
;;;233      */
;;;234    void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
000000  b510              PUSH     {r4,lr}
;;;235    {
000002  4604              MOV      r4,r0
;;;236      USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
;;;237    
;;;238      /*Set USB Current Speed*/
;;;239      switch (hpcd->Init.speed)
000004  68c0              LDR      r0,[r0,#0xc]
000006  2101              MOVS     r1,#1                 ;236
000008  b900              CBNZ     r0,|L9.12|
;;;240      {
;;;241      case PCD_SPEED_HIGH:
;;;242        speed = USBD_SPEED_HIGH;
00000a  2100              MOVS     r1,#0
                  |L9.12|
;;;243        break;
;;;244      case PCD_SPEED_FULL:
;;;245        speed = USBD_SPEED_FULL;
;;;246        break;
;;;247    
;;;248      default:
;;;249        speed = USBD_SPEED_FULL;
;;;250        break;
;;;251      }
;;;252      USBD_LL_SetSpeed(hpcd->pData, speed);
00000c  f8d403ac          LDR      r0,[r4,#0x3ac]
000010  f7fffffe          BL       USBD_LL_SetSpeed
;;;253    
;;;254      /*Reset Device*/
;;;255      USBD_LL_Reset(hpcd->pData);
000014  f8d403ac          LDR      r0,[r4,#0x3ac]
000018  e8bd4010          POP      {r4,lr}
00001c  f7ffbffe          B.W      USBD_LL_Reset
;;;256    }
;;;257    
                          ENDP


                          AREA ||i.HAL_PCD_ResumeCallback||, CODE, READONLY, ALIGN=1

                  HAL_PCD_ResumeCallback PROC
;;;272      */
;;;273    void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
000000  f8d003ac          LDR      r0,[r0,#0x3ac]
;;;274    {
;;;275      USBD_LL_Resume(hpcd->pData);
000004  f7ffbffe          B.W      USBD_LL_Resume
;;;276    }
;;;277    
                          ENDP


                          AREA ||i.HAL_PCD_SOFCallback||, CODE, READONLY, ALIGN=1

                  HAL_PCD_SOFCallback PROC
;;;223      */
;;;224    void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
000000  f8d003ac          LDR      r0,[r0,#0x3ac]
;;;225    {
;;;226      USBD_LL_SOF(hpcd->pData);
000004  f7ffbffe          B.W      USBD_LL_SOF
;;;227    }
;;;228    
                          ENDP


                          AREA ||i.HAL_PCD_SetupStageCallback||, CODE, READONLY, ALIGN=1

                  HAL_PCD_SetupStageCallback PROC
;;;191      */
;;;192    void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
000000  f8d023ac          LDR      r2,[r0,#0x3ac]
;;;193    {
;;;194      USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
000004  f500715f          ADD      r1,r0,#0x37c
000008  4610              MOV      r0,r2
00000a  f7ffbffe          B.W      USBD_LL_SetupStage
;;;195    }
;;;196    
                          ENDP


                          AREA ||i.HAL_PCD_SuspendCallback||, CODE, READONLY, ALIGN=1

                  HAL_PCD_SuspendCallback PROC
;;;262      */
;;;263    void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
000000  f8d003ac          LDR      r0,[r0,#0x3ac]
;;;264    {
;;;265      USBD_LL_Suspend(hpcd->pData);
000004  f7ffbffe          B.W      USBD_LL_Suspend
;;;266    }
;;;267    
                          ENDP


                          AREA ||i.USBD_LL_ClearStallEP||, CODE, READONLY, ALIGN=1

                  USBD_LL_ClearStallEP PROC
;;;475      */
;;;476    USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)
000000  b510              PUSH     {r4,lr}
;;;477    {
;;;478    
;;;479      HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
000002  f8d00220          LDR      r0,[r0,#0x220]
000006  f7fffffe          BL       HAL_PCD_EP_ClrStall
;;;480      return USBD_OK;
00000a  2000              MOVS     r0,#0
;;;481    }
00000c  bd10              POP      {r4,pc}
;;;482    
                          ENDP


                          AREA ||i.USBD_LL_CloseEP||, CODE, READONLY, ALIGN=1

                  USBD_LL_CloseEP PROC
;;;433      */
;;;434    USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)
000000  b510              PUSH     {r4,lr}
;;;435    {
;;;436    
;;;437      HAL_PCD_EP_Close(pdev->pData, ep_addr);
000002  f8d00220          LDR      r0,[r0,#0x220]
000006  f7fffffe          BL       HAL_PCD_EP_Close
;;;438      return USBD_OK;
00000a  2000              MOVS     r0,#0
;;;439    }
00000c  bd10              POP      {r4,pc}
;;;440    
                          ENDP


                          AREA ||i.USBD_LL_DeInit||, CODE, READONLY, ALIGN=1

                  USBD_LL_DeInit PROC
;;;373      */
;;;374    USBD_StatusTypeDef  USBD_LL_DeInit (USBD_HandleTypeDef *pdev)
000000  b510              PUSH     {r4,lr}
;;;375    {
;;;376      HAL_PCD_DeInit(pdev->pData);
000002  f8d00220          LDR      r0,[r0,#0x220]
000006  f7fffffe          BL       HAL_PCD_DeInit
;;;377      return USBD_OK;
00000a  2000              MOVS     r0,#0
;;;378    }
00000c  bd10              POP      {r4,pc}
;;;379    
                          ENDP


                          AREA ||i.USBD_LL_Delay||, CODE, READONLY, ALIGN=1

                  USBD_LL_Delay PROC
;;;572      */
;;;573    void  USBD_LL_Delay (uint32_t Delay)
000000  f7ffbffe          B.W      HAL_Delay
;;;574    {
;;;575      HAL_Delay(Delay);
;;;576    }
;;;577    /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
                          ENDP


                          AREA ||i.USBD_LL_FlushEP||, CODE, READONLY, ALIGN=1

                  USBD_LL_FlushEP PROC
;;;447      */
;;;448    USBD_StatusTypeDef  USBD_LL_FlushEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)
000000  b510              PUSH     {r4,lr}
;;;449    {
;;;450    
;;;451      HAL_PCD_EP_Flush(pdev->pData, ep_addr);
000002  f8d00220          LDR      r0,[r0,#0x220]
000006  f7fffffe          BL       HAL_PCD_EP_Flush
;;;452      return USBD_OK;
00000a  2000              MOVS     r0,#0
;;;453    }
00000c  bd10              POP      {r4,pc}
;;;454    
                          ENDP


                          AREA ||i.USBD_LL_GetRxDataSize||, CODE, READONLY, ALIGN=1

                  USBD_LL_GetRxDataSize PROC
;;;561      */
;;;562    uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)
000000  f8d00220          LDR      r0,[r0,#0x220]
;;;563    {
;;;564      return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
000004  f7ffbffe          B.W      HAL_PCD_EP_GetRxCount
;;;565    }
;;;566    
                          ENDP


                          AREA ||i.USBD_LL_Init||, CODE, READONLY, ALIGN=2

                  USBD_LL_Init PROC
;;;328      */
;;;329    USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
000000  b570              PUSH     {r4-r6,lr}
;;;330    	{
;;;331    	/* Init USB_IP */
;;;332    	if( pdev->id == DEVICE_HS )
000002  7801              LDRB     r1,[r0,#0]
000004  2901              CMP      r1,#1
000006  d12a              BNE      |L20.94|
;;;333    		{
;;;334    		/* Link The driver to the stack */
;;;335    		hpcd_USB_OTG_HS.pData = pdev;
000008  4c16              LDR      r4,|L20.100|
;;;336    		pdev->pData = &hpcd_USB_OTG_HS;
;;;337    
;;;338    		hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
;;;339    		hpcd_USB_OTG_HS.Init.dev_endpoints = 11;
;;;340    		hpcd_USB_OTG_HS.Init.dma_enable = ENABLE;
00000a  2601              MOVS     r6,#1
;;;341    		hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
00000c  2500              MOVS     r5,#0
00000e  f8c403ac          STR      r0,[r4,#0x3ac]        ;336  ; hpcd_USB_OTG_HS
000012  f8c04220          STR      r4,[r0,#0x220]        ;338
000016  4814              LDR      r0,|L20.104|
000018  6020              STR      r0,[r4,#0]            ;339  ; hpcd_USB_OTG_HS
00001a  200b              MOVS     r0,#0xb               ;339
00001c  6060              STR      r0,[r4,#4]  ; hpcd_USB_OTG_HS
00001e  e9c46504          STRD     r6,r5,[r4,#0x10]
;;;342    
;;;343    #ifdef USB_HARDWARE_FS
;;;344    		hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
;;;345    		hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
;;;346    #else
;;;347    		hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
;;;348    		hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
;;;349    
;;;350    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // ULPI_RESETB
000022  61a6              STR      r6,[r4,#0x18]  ; hpcd_USB_OTG_HS
000024  4632              MOV      r2,r6
000026  2102              MOVS     r1,#2
000028  4810              LDR      r0,|L20.108|
00002a  60e5              STR      r5,[r4,#0xc]  ; hpcd_USB_OTG_HS
00002c  f7fffffe          BL       HAL_GPIO_WritePin
;;;351    #endif
;;;352    
;;;353    		hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
000030  61e5              STR      r5,[r4,#0x1c]  ; hpcd_USB_OTG_HS
000032  e9c45608          STRD     r5,r6,[r4,#0x20]
000036  e9c4560a          STRD     r5,r6,[r4,#0x28]
;;;354    		hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
;;;355    		hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
;;;356    		hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
;;;357    		hpcd_USB_OTG_HS.Init.use_external_vbus = ENABLE;
;;;358    
;;;359    		HAL_PCD_Init(&hpcd_USB_OTG_HS);
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       HAL_PCD_Init
;;;360    
;;;361    		HAL_PCD_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
000040  0271              LSLS     r1,r6,#9
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       HAL_PCD_SetRxFiFo
;;;362    		HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
000048  2280              MOVS     r2,#0x80
00004a  2100              MOVS     r1,#0
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       HAL_PCD_SetTxFiFo
;;;363    		HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_HS, 3, 0x174);
000052  f44f72ba          MOV      r2,#0x174
000056  2103              MOVS     r1,#3
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       HAL_PCD_SetTxFiFo
                  |L20.94|
;;;364    		}
;;;365    	return USBD_OK;
00005e  2000              MOVS     r0,#0
;;;366    	}
000060  bd70              POP      {r4-r6,pc}
;;;367    
                          ENDP

000062  0000              DCW      0x0000
                  |L20.100|
                          DCD      ||.bss||
                  |L20.104|
                          DCD      0x40040000
                  |L20.108|
                          DCD      0x40020000

                          AREA ||i.USBD_LL_IsStallEP||, CODE, READONLY, ALIGN=1

                  USBD_LL_IsStallEP PROC
;;;489      */
;;;490    uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)
000000  060a              LSLS     r2,r1,#24
;;;491    {
;;;492      PCD_HandleTypeDef *hpcd = pdev->pData;
;;;493    
;;;494      if((ep_addr & 0x80) == 0x80)
;;;495      {
;;;496        return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
000002  f001017f          AND      r1,r1,#0x7f
000006  f8d00220          LDR      r0,[r0,#0x220]        ;492
00000a  ebc101c1          RSB      r1,r1,r1,LSL #3
00000e  eb000081          ADD      r0,r0,r1,LSL #2
000012  d502              BPL      |L21.26|
000014  f8900032          LDRB     r0,[r0,#0x32]
;;;497      }
;;;498      else
;;;499      {
;;;500        return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
;;;501      }
;;;502    }
000018  4770              BX       lr
                  |L21.26|
00001a  f89001d6          LDRB     r0,[r0,#0x1d6]        ;500
00001e  4770              BX       lr
;;;503    /**
                          ENDP


                          AREA ||i.USBD_LL_OpenEP||, CODE, READONLY, ALIGN=1

                  USBD_LL_OpenEP PROC
;;;412      */
;;;413    USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev,
000000  b510              PUSH     {r4,lr}
;;;414                                          uint8_t  ep_addr,
;;;415                                          uint8_t  ep_type,
;;;416                                          uint16_t ep_mps)
;;;417    {
000002  461c              MOV      r4,r3
;;;418    
;;;419      HAL_PCD_EP_Open(pdev->pData,
000004  4613              MOV      r3,r2
000006  f8d00220          LDR      r0,[r0,#0x220]
00000a  4622              MOV      r2,r4
00000c  f7fffffe          BL       HAL_PCD_EP_Open
;;;420                      ep_addr,
;;;421                      ep_mps,
;;;422                      ep_type);
;;;423    
;;;424      return USBD_OK;
000010  2000              MOVS     r0,#0
;;;425    }
000012  bd10              POP      {r4,pc}
;;;426    
                          ENDP


                          AREA ||i.USBD_LL_PrepareReceive||, CODE, READONLY, ALIGN=1

                  USBD_LL_PrepareReceive PROC
;;;544      */
;;;545    USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
000000  b510              PUSH     {r4,lr}
;;;546                                               uint8_t  ep_addr,
;;;547                                               uint8_t  *pbuf,
;;;548                                               uint16_t  size)
;;;549    {
;;;550    
;;;551      HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
000002  f8d00220          LDR      r0,[r0,#0x220]
000006  f7fffffe          BL       HAL_PCD_EP_Receive
;;;552      return USBD_OK;
00000a  2000              MOVS     r0,#0
;;;553    }
00000c  bd10              POP      {r4,pc}
;;;554    
                          ENDP


                          AREA ||i.USBD_LL_SetUSBAddress||, CODE, READONLY, ALIGN=1

                  USBD_LL_SetUSBAddress PROC
;;;509      */
;;;510    USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)
000000  b510              PUSH     {r4,lr}
;;;511    {
;;;512    
;;;513      HAL_PCD_SetAddress(pdev->pData, dev_addr);
000002  f8d00220          LDR      r0,[r0,#0x220]
000006  f7fffffe          BL       HAL_PCD_SetAddress
;;;514      return USBD_OK;
00000a  2000              MOVS     r0,#0
;;;515    }
00000c  bd10              POP      {r4,pc}
;;;516    
                          ENDP


                          AREA ||i.USBD_LL_StallEP||, CODE, READONLY, ALIGN=1

                  USBD_LL_StallEP PROC
;;;461      */
;;;462    USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)
000000  b510              PUSH     {r4,lr}
;;;463    {
;;;464    
;;;465      HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
000002  f8d00220          LDR      r0,[r0,#0x220]
000006  f7fffffe          BL       HAL_PCD_EP_SetStall
;;;466      return USBD_OK;
00000a  2000              MOVS     r0,#0
;;;467    }
00000c  bd10              POP      {r4,pc}
;;;468    
                          ENDP


                          AREA ||i.USBD_LL_Start||, CODE, READONLY, ALIGN=1

                  USBD_LL_Start PROC
;;;385      */
;;;386    USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
000000  b510              PUSH     {r4,lr}
;;;387    {
;;;388      HAL_PCD_Start(pdev->pData);
000002  f8d00220          LDR      r0,[r0,#0x220]
000006  f7fffffe          BL       HAL_PCD_Start
;;;389      return USBD_OK;
00000a  2000              MOVS     r0,#0
;;;390    }
00000c  bd10              POP      {r4,pc}
;;;391    
                          ENDP


                          AREA ||i.USBD_LL_Stop||, CODE, READONLY, ALIGN=1

                  USBD_LL_Stop PROC
;;;397      */
;;;398    USBD_StatusTypeDef  USBD_LL_Stop (USBD_HandleTypeDef *pdev)
000000  b510              PUSH     {r4,lr}
;;;399    {
;;;400      HAL_PCD_Stop(pdev->pData);
000002  f8d00220          LDR      r0,[r0,#0x220]
000006  f7fffffe          BL       HAL_PCD_Stop
;;;401      return USBD_OK;
00000a  2000              MOVS     r0,#0
;;;402    }
00000c  bd10              POP      {r4,pc}
;;;403    
                          ENDP


                          AREA ||i.USBD_LL_Transmit||, CODE, READONLY, ALIGN=1

                  USBD_LL_Transmit PROC
;;;525      */
;;;526    USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev,
000000  b510              PUSH     {r4,lr}
;;;527                                          uint8_t  ep_addr,
;;;528                                          uint8_t  *pbuf,
;;;529                                          uint16_t  size)
;;;530    {
;;;531    
;;;532      HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
000002  f8d00220          LDR      r0,[r0,#0x220]
000006  f7fffffe          BL       HAL_PCD_EP_Transmit
;;;533      return USBD_OK;
00000a  2000              MOVS     r0,#0
;;;534    }
00000c  bd10              POP      {r4,pc}
;;;535    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  hpcd_USB_OTG_HS
                          %        944

;*** Start embedded assembler ***

#line 1 "..\\..\\Src\\usbd_conf.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_usbd_conf_c_733e821e____REV16|
#line 129 "..\\..\\Drivers\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_usbd_conf_c_733e821e____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_usbd_conf_c_733e821e____REVSH|
#line 144
|__asm___11_usbd_conf_c_733e821e____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
