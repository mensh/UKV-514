; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o"bhd2 configuration\holtdriver.o" --asm_dir=.\list\ --list_dir=.\list\ --depend="bhd2 configuration\holtdriver.d" --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\..\Drivers\CMSIS\Device\ST\STM32F2xx\Include -I..\..\Drivers\CMSIS\Include -I..\..\Middlewares\ST\STM32_USB_Device_Library\Class\CDC\Inc -I..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc -I..\..\Drivers\STM32F2xx_HAL_Driver\Inc -I..\..\Inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_HAL_DRIVER -DSTM32F215xx --omf_browse="bhd2 configuration\holtdriver.crf" ..\..\Src\core\holtDriver.c]
                          THUMB

                          AREA ||i.HOLT_DRIVER_dataTransmition||, CODE, READONLY, ALIGN=1

                  HOLT_DRIVER_dataTransmition PROC
;;;4      
;;;5      tdStatus HOLT_DRIVER_dataTransmition(tdSpiDevice *_pDevice, uint8_t *_pTxData, uint8_t *_pRxData, uint16_t _size)
000000  f7ffbffe          B.W      SPI_DRIVER_dataTransmition
;;;6      	{
;;;7      	return SPI_DRIVER_dataTransmition( _pDevice, _pTxData, _pRxData, _size);
;;;8      	}
;;;9      
                          ENDP


                          AREA ||i.HOLT_DRIVER_masterReset||, CODE, READONLY, ALIGN=1

                  HOLT_DRIVER_masterReset PROC
;;;120    
;;;121    tdStatus HOLT_DRIVER_masterReset(tdSpiDevice *_pDevice)
000000  b51c              PUSH     {r2-r4,lr}
;;;122    	{
;;;123    	uint8_t txBuff[ HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE ];
;;;124    	uint8_t rxBuff[ HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE ];
;;;125    
;;;126    	txBuff[ 0 ] = (uint8_t)reset;
000002  2107              MOVS     r1,#7
000004  f88d1000          STRB     r1,[sp,#0]
;;;127    
;;;128    	return HOLT_DRIVER_dataTransmition(_pDevice, txBuff, rxBuff, HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE + HOLT_DRIVER_HI3598_DATA_STATUS_SIZE);
000008  2303              MOVS     r3,#3
00000a  aa01              ADD      r2,sp,#4
00000c  4669              MOV      r1,sp
00000e  f7fffffe          BL       SPI_DRIVER_dataTransmition
;;;129    	}
000012  bd1c              POP      {r2-r4,pc}
;;;130    
                          ENDP


                          AREA ||i.HOLT_DRIVER_readConfiguration||, CODE, READONLY, ALIGN=2

                  HOLT_DRIVER_readConfiguration PROC
;;;22     
;;;23     tdStatus HOLT_DRIVER_readConfiguration(tdSpiDevice *_pDevice, uint8_t _channel, uint16_t *_pConfiguration)
000000  b570              PUSH     {r4-r6,lr}
;;;24     	{
000002  4615              MOV      r5,r2
;;;25     	tdStatus status;
;;;26     	static uint8_t txBuff[ HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE + HOLT_DRIVER_HI3598_DATA_CONFIGURATION_SIZE ];
;;;27     	static uint8_t rxBuff[ HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE + HOLT_DRIVER_HI3598_DATA_CONFIGURATION_SIZE ];
;;;28     
;;;29     	txBuff[ 0 ] = (uint8_t)readConfiguration;
000004  2305              MOVS     r3,#5
000006  4a0b              LDR      r2,|L3.52|
;;;30     	txBuff[ 0 ] |= ( (_channel & HOLT_DRIVER_HI3598_DATA_CHANNEL_MASK) << HOLT_DRIVER_HI3598_DATA_CHANNEL_SHIFT );
000008  ea431101          ORR      r1,r3,r1,LSL #4
;;;31     	txBuff[ 1 ] = 0x00;
00000c  2400              MOVS     r4,#0
00000e  7011              STRB     r1,[r2,#0]            ;30
000010  7054              STRB     r4,[r2,#1]
;;;32     	txBuff[ 2 ] = 0x00;
000012  7094              STRB     r4,[r2,#2]
;;;33     
;;;34     	status = HOLT_DRIVER_dataTransmition(_pDevice, txBuff, rxBuff, HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE + HOLT_DRIVER_HI3598_DATA_CONFIGURATION_SIZE);
000014  1cd2              ADDS     r2,r2,#3
000016  2303              MOVS     r3,#3
000018  1ed1              SUBS     r1,r2,#3
00001a  f7fffffe          BL       HOLT_DRIVER_dataTransmition
;;;35     
;;;36     	if( status == Ok )
00001e  2801              CMP      r0,#1
000020  d001              BEQ      |L3.38|
;;;37     		{
;;;38     		*_pConfiguration = ( (rxBuff[ 1 ] << 8) | rxBuff[ 2 ] );
;;;39     		}
;;;40     	else
;;;41     		{
;;;42     		*_pConfiguration = 0x0000;
000022  802c              STRH     r4,[r5,#0]
;;;43     		}
;;;44     
;;;45     	return status;
;;;46     	}
000024  bd70              POP      {r4-r6,pc}
                  |L3.38|
000026  4903              LDR      r1,|L3.52|
000028  1cc9              ADDS     r1,r1,#3              ;38
00002a  f8b11001          LDRH     r1,[r1,#1]            ;38  ; rxBuff
00002e  ba49              REV16    r1,r1                 ;38
000030  8029              STRH     r1,[r5,#0]            ;38
000032  bd70              POP      {r4-r6,pc}
;;;47     
                          ENDP

                  |L3.52|
                          DCD      ||.data||+0x6

                          AREA ||i.HOLT_DRIVER_readFifoData||, CODE, READONLY, ALIGN=1

                  HOLT_DRIVER_readFifoData PROC
;;;72     
;;;73     tdStatus HOLT_DRIVER_readFifoData(tdSpiDevice *_pDevice, uint8_t _channel, uint8_t *_data)
000000  b57c              PUSH     {r2-r6,lr}
;;;74     	{
000002  460c              MOV      r4,r1
;;;75     	tdStatus status;
;;;76     	uint8_t txBuff[ HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE + HOLT_DRIVER_HI3598_DATA_WORD_SIZE ];
;;;77     
;;;78     	memset(txBuff, 0x00, HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE + HOLT_DRIVER_HI3598_DATA_WORD_SIZE);
000004  2100              MOVS     r1,#0
000006  9100              STR      r1,[sp,#0]
;;;79     
;;;80     	txBuff[ 0 ] = (uint8_t)readRxFifo;
000008  9101              STR      r1,[sp,#4]
00000a  2103              MOVS     r1,#3
;;;81     	txBuff[ 0 ] |= ( (_channel & HOLT_DRIVER_HI3598_DATA_CHANNEL_MASK) << HOLT_DRIVER_HI3598_DATA_CHANNEL_SHIFT );
00000c  ea411104          ORR      r1,r1,r4,LSL #4
000010  f88d1000          STRB     r1,[sp,#0]
000014  4615              MOV      r5,r2                 ;74
;;;82     
;;;83     	status = HOLT_DRIVER_dataTransmition(_pDevice, txBuff, _data, HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE + HOLT_DRIVER_HI3598_DATA_WORD_SIZE);
000016  2305              MOVS     r3,#5
000018  4669              MOV      r1,sp
00001a  f7fffffe          BL       HOLT_DRIVER_dataTransmition
;;;84     
;;;85     	if( status == Ok )
00001e  2801              CMP      r0,#1
000020  d101              BNE      |L4.38|
000022  1e64              SUBS     r4,r4,#1
;;;86     		*_data = _channel - 1; // Saving channel at firs byte after we get response(to prevent information lost)
000024  702c              STRB     r4,[r5,#0]
                  |L4.38|
;;;87     
;;;88     	return status;
;;;89     	}
000026  bd7c              POP      {r2-r6,pc}
;;;90     
                          ENDP


                          AREA ||i.HOLT_DRIVER_readFifoWord||, CODE, READONLY, ALIGN=1

                  HOLT_DRIVER_readFifoWord PROC
;;;47     
;;;48     tdStatus HOLT_DRIVER_readFifoWord(tdSpiDevice *_pDevice, uint8_t _channel, uint32_t *_word)
000000  b530              PUSH     {r4,r5,lr}
;;;49     	{
000002  b085              SUB      sp,sp,#0x14
000004  4614              MOV      r4,r2
;;;50     	tdStatus status;
;;;51     	uint8_t txBuff[ HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE + HOLT_DRIVER_HI3598_DATA_WORD_SIZE ];
;;;52     	uint8_t rxBuff[ HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE + HOLT_DRIVER_HI3598_DATA_WORD_SIZE ];
;;;53     
;;;54     	memset(txBuff, 0x00, HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE + HOLT_DRIVER_HI3598_DATA_WORD_SIZE);
000006  2500              MOVS     r5,#0
;;;55     
;;;56     	txBuff[ 0 ] = (uint8_t)readRxFifo;
000008  2203              MOVS     r2,#3
;;;57     	txBuff[ 0 ] |= ( (_channel & HOLT_DRIVER_HI3598_DATA_CHANNEL_MASK) << HOLT_DRIVER_HI3598_DATA_CHANNEL_SHIFT );
00000a  ea421101          ORR      r1,r2,r1,LSL #4
00000e  9502              STR      r5,[sp,#8]            ;54
000010  f88d1008          STRB     r1,[sp,#8]
000014  9503              STR      r5,[sp,#0xc]
;;;58     
;;;59     	status = HOLT_DRIVER_dataTransmition(_pDevice, txBuff, rxBuff, HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE + HOLT_DRIVER_HI3598_DATA_WORD_SIZE);
000016  2305              MOVS     r3,#5
000018  466a              MOV      r2,sp
00001a  a902              ADD      r1,sp,#8
00001c  f7fffffe          BL       HOLT_DRIVER_dataTransmition
;;;60     
;;;61     	if( status == Ok )
000020  2801              CMP      r0,#1
000022  d002              BEQ      |L5.42|
;;;62     		{
;;;63     		*_word = ( (rxBuff[ 1 ] << 24) | (rxBuff[ 2 ] << 16) | (rxBuff[ 3 ] << 8) | (rxBuff[ 4 ] << 0) );
;;;64     		}
;;;65     	else
;;;66     		{
;;;67     		*_word = 0x00000000;
000024  6025              STR      r5,[r4,#0]
                  |L5.38|
;;;68     		}
;;;69     
;;;70     	return status;
;;;71     	}
000026  b005              ADD      sp,sp,#0x14
000028  bd30              POP      {r4,r5,pc}
                  |L5.42|
00002a  f8dd1001          LDR      r1,[sp,#1]            ;63
00002e  f89d2004          LDRB     r2,[sp,#4]            ;63
000032  ba09              REV      r1,r1                 ;63
000034  f02101ff          BIC      r1,r1,#0xff           ;63
000038  4311              ORRS     r1,r1,r2              ;63
00003a  6021              STR      r1,[r4,#0]            ;63
00003c  e7f3              B        |L5.38|
;;;72     
                          ENDP


                          AREA ||i.HOLT_DRIVER_readStatus||, CODE, READONLY, ALIGN=1

                  HOLT_DRIVER_readStatus PROC
;;;90     
;;;91     tdStatus HOLT_DRIVER_readStatus(tdSpiDevice *_pDevice, tdHoltStatus *_pStatus)
000000  b57c              PUSH     {r2-r6,lr}
;;;92     	{
000002  460c              MOV      r4,r1
;;;93     	tdStatus status;
;;;94     
;;;95     	uint8_t txBuff[ HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE + HOLT_DRIVER_HI3598_DATA_STATUS_SIZE ];
;;;96     	uint8_t rxBuff[ HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE + HOLT_DRIVER_HI3598_DATA_STATUS_SIZE ];
;;;97     
;;;98     	txBuff[ 0 ] = (uint8_t)readStatus;
000004  2106              MOVS     r1,#6
;;;99     	txBuff[ 1 ] = 0x00;
000006  2500              MOVS     r5,#0
000008  f88d1004          STRB     r1,[sp,#4]            ;98
00000c  f88d5005          STRB     r5,[sp,#5]
;;;100    	txBuff[ 2 ] = 0x00;
;;;101    
;;;102    	rxBuff[ 1 ] = 0x00;
000010  f88d5001          STRB     r5,[sp,#1]
000014  f88d5006          STRB     r5,[sp,#6]            ;100
;;;103    	rxBuff[ 2 ] = 0x00;
000018  f88d5002          STRB     r5,[sp,#2]
;;;104    
;;;105    	status = HOLT_DRIVER_dataTransmition(_pDevice, txBuff, rxBuff, HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE + HOLT_DRIVER_HI3598_DATA_STATUS_SIZE);
00001c  2303              MOVS     r3,#3
00001e  466a              MOV      r2,sp
000020  a901              ADD      r1,sp,#4
000022  f7fffffe          BL       HOLT_DRIVER_dataTransmition
;;;106    
;;;107    	if( status == Ok )
000026  2801              CMP      r0,#1
000028  d002              BEQ      |L6.48|
;;;108    		{
;;;109    		_pStatus->notEmpty = ~rxBuff[ 2 ];	// HI3598 empty status. There is "0" in corresponding bit when some FIFO buffer not empty. So we do inversion.
;;;110    		_pStatus->full = rxBuff[ 1 ];			// HI3598 full status. There is "1" in corresponding bit when some FIFO buffer full.
;;;111    		}
;;;112    	else
;;;113    		{
;;;114    		_pStatus->notEmpty = HOLT_DRIVER_FIFO_STATUS_EMPTY;
00002a  7025              STRB     r5,[r4,#0]
;;;115    		_pStatus->full = HOLT_DRIVER_FIFO_STATUS_NOT_FULL;
00002c  7065              STRB     r5,[r4,#1]
;;;116    		}
;;;117    
;;;118    	return status;
;;;119    	}
00002e  bd7c              POP      {r2-r6,pc}
                  |L6.48|
000030  f89d1002          LDRB     r1,[sp,#2]            ;109
000034  43c9              MVNS     r1,r1                 ;109
000036  7021              STRB     r1,[r4,#0]            ;109
000038  f89d1001          LDRB     r1,[sp,#1]            ;110
00003c  7061              STRB     r1,[r4,#1]            ;110
00003e  bd7c              POP      {r2-r6,pc}
;;;120    
                          ENDP


                          AREA ||i.HOLT_DRIVER_setConfiguration||, CODE, READONLY, ALIGN=2

                  HOLT_DRIVER_setConfiguration PROC
;;;9      
;;;10     tdStatus HOLT_DRIVER_setConfiguration(tdSpiDevice *_pDevice, uint8_t _channel, uint16_t _configuration)
000000  b430              PUSH     {r4,r5}
;;;11     	{
;;;12     	static uint8_t txBuff[ HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE + HOLT_DRIVER_HI3598_DATA_CONFIGURATION_SIZE ];
;;;13     	static uint8_t rxBuff[ HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE + HOLT_DRIVER_HI3598_DATA_CONFIGURATION_SIZE ];
;;;14     
;;;15     	txBuff[ 0 ] = (uint8_t)setConfiguration;
000002  4b07              LDR      r3,|L7.32|
000004  2404              MOVS     r4,#4
;;;16     	txBuff[ 0 ] |= ( (_channel & HOLT_DRIVER_HI3598_DATA_CHANNEL_MASK) << HOLT_DRIVER_HI3598_DATA_CHANNEL_SHIFT );
000006  ea441101          ORR      r1,r4,r1,LSL #4
00000a  7019              STRB     r1,[r3,#0]
;;;17     	txBuff[ 1 ] = (_configuration >> 8) & HOLT_DRIVER_HI3598_DATA_BYTE_MASK;
00000c  0a11              LSRS     r1,r2,#8
00000e  7059              STRB     r1,[r3,#1]
;;;18     	txBuff[ 2 ] = (_configuration >> 0) & HOLT_DRIVER_HI3598_DATA_BYTE_MASK;
000010  709a              STRB     r2,[r3,#2]
;;;19     
;;;20     	return HOLT_DRIVER_dataTransmition(_pDevice, txBuff, rxBuff, HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE + HOLT_DRIVER_HI3598_DATA_CONFIGURATION_SIZE);
000012  4a03              LDR      r2,|L7.32|
000014  2303              MOVS     r3,#3
000016  1cd2              ADDS     r2,r2,#3
000018  bc30              POP      {r4,r5}
00001a  1ed1              SUBS     r1,r2,#3
00001c  f7ffbffe          B.W      SPI_DRIVER_dataTransmition
;;;21     	}
;;;22     
                          ENDP

                  |L7.32|
                          DCD      ||.data||

                          AREA ||i.HOLT_DRIVER_writeLoopBackFifoWord||, CODE, READONLY, ALIGN=1

                  HOLT_DRIVER_writeLoopBackFifoWord PROC
;;;130    
;;;131    tdStatus HOLT_DRIVER_writeLoopBackFifoWord(tdSpiDevice *_pDevice, uint8_t _speedHigh, uint32_t _word)
000000  b51f              PUSH     {r0-r4,lr}
;;;132    	{
;;;133    	uint8_t txBuff[ HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE + HOLT_DRIVER_HI3598_DATA_WORD_SIZE ];
;;;134    	uint8_t rxBuff[ HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE + HOLT_DRIVER_HI3598_DATA_WORD_SIZE ];
;;;135    
;;;136    	memset(txBuff, 0x00, HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE + HOLT_DRIVER_HI3598_DATA_WORD_SIZE);
000002  2200              MOVS     r2,#0
000004  9200              STR      r2,[sp,#0]
000006  9201              STR      r2,[sp,#4]            ;132
000008  b149              CBZ      r1,|L8.30|
;;;137    
;;;138    	if( _speedHigh == 0 )
;;;139    		txBuff[ 0 ] = (uint8_t)loopBackTxSpeedLow;
;;;140    	else
;;;141    		txBuff[ 0 ] = (uint8_t)loopBackTxSpeedHigh;
00000a  2108              MOVS     r1,#8
                  |L8.12|
00000c  f88d1000          STRB     r1,[sp,#0]
;;;142    
;;;143    	return HOLT_DRIVER_dataTransmition(_pDevice, txBuff, rxBuff, HOLT_DRIVER_HI3598_DATA_OP_INSTRUCTION_SIZE + HOLT_DRIVER_HI3598_DATA_WORD_SIZE);
000010  2305              MOVS     r3,#5
000012  aa02              ADD      r2,sp,#8
000014  4669              MOV      r1,sp
000016  f7fffffe          BL       SPI_DRIVER_dataTransmition
;;;144    	}
00001a  b004              ADD      sp,sp,#0x10
00001c  bd10              POP      {r4,pc}
                  |L8.30|
00001e  2109              MOVS     r1,#9                 ;139
000020  e7f4              B        |L8.12|
                          ENDP


                          AREA ||.data||, DATA, ALIGN=0

                  txBuff
000000  000000            DCB      0x00,0x00,0x00
                  rxBuff
000003  00                DCB      0x00
000004  0000              DCB      0x00,0x00
                  |symbol_number.24|
000006  0000              DCB      0x00,0x00
000008  00                DCB      0x00
                  |symbol_number.25|
000009  000000            DCB      0x00,0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\Src\\core\\holtDriver.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_holtDriver_c_ea9e357a____REV16|
#line 129 "..\\..\\Drivers\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_holtDriver_c_ea9e357a____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_holtDriver_c_ea9e357a____REVSH|
#line 144
|__asm___12_holtDriver_c_ea9e357a____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
