; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o"bhd2 configuration\stm32f2xx_hal_cortex.o" --asm_dir=.\list\ --list_dir=.\list\ --depend="bhd2 configuration\stm32f2xx_hal_cortex.d" --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\..\Drivers\CMSIS\Device\ST\STM32F2xx\Include -I..\..\Drivers\CMSIS\Include -I..\..\Middlewares\ST\STM32_USB_Device_Library\Class\CDC\Inc -I..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc -I..\..\Drivers\STM32F2xx_HAL_Driver\Inc -I..\..\Inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_HAL_DRIVER -DSTM32F215xx --omf_browse="bhd2 configuration\stm32f2xx_hal_cortex.crf" ..\..\Drivers\STM32F2xx_HAL_Driver\Src\stm32f2xx_hal_cortex.c]
                          THUMB

                          AREA ||i.HAL_NVIC_ClearPendingIRQ||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_ClearPendingIRQ PROC
;;;362      */
;;;363    void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
000000  f000021f          AND      r2,r0,#0x1f
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  0940              LSRS     r0,r0,#5
00000a  0080              LSLS     r0,r0,#2
00000c  f10020e0          ADD      r0,r0,#0xe000e000
000010  f8c01280          STR      r1,[r0,#0x280]
;;;364    { 
;;;365      /* Clear pending interrupt */
;;;366      NVIC_ClearPendingIRQ(IRQn);
;;;367    }
000014  4770              BX       lr
;;;368    
                          ENDP


                          AREA ||i.HAL_NVIC_DisableIRQ||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_DisableIRQ PROC
;;;239      */
;;;240    void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
000000  f000021f          AND      r2,r0,#0x1f
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  0940              LSRS     r0,r0,#5
00000a  0080              LSLS     r0,r0,#2
00000c  f10020e0          ADD      r0,r0,#0xe000e000
000010  f8c01180          STR      r1,[r0,#0x180]
;;;241    {
;;;242      /* Disable interrupt */
;;;243      NVIC_DisableIRQ(IRQn);
;;;244    }
000014  4770              BX       lr
;;;245    
                          ENDP


                          AREA ||i.HAL_NVIC_EnableIRQ||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_EnableIRQ PROC
;;;226      */
;;;227    void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
000000  f000021f          AND      r2,r0,#0x1f
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  0940              LSRS     r0,r0,#5
00000a  0080              LSLS     r0,r0,#2
00000c  f10020e0          ADD      r0,r0,#0xe000e000
000010  f8c01100          STR      r1,[r0,#0x100]
;;;228    {
;;;229      /* Enable interrupt */
;;;230      NVIC_EnableIRQ(IRQn);
;;;231    }
000014  4770              BX       lr
;;;232    
                          ENDP


                          AREA ||i.HAL_NVIC_GetActive||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_GetActive PROC
;;;376      */
;;;377    uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
000000  0941              LSRS     r1,r0,#5
000002  0089              LSLS     r1,r1,#2
000004  f10121e0          ADD      r1,r1,#0xe000e000
000008  f8d11300          LDR      r1,[r1,#0x300]
00000c  f000021f          AND      r2,r0,#0x1f
000010  2001              MOVS     r0,#1
000012  4090              LSLS     r0,r0,r2
000014  4201              TST      r1,r0
;;;378    { 
000016  d001              BEQ      |L4.28|
000018  2001              MOVS     r0,#1
;;;379      /* Return 1 if active else 0 */
;;;380      return NVIC_GetActive(IRQn);
;;;381    }
00001a  4770              BX       lr
                  |L4.28|
00001c  2000              MOVS     r0,#0
00001e  4770              BX       lr
;;;382    
                          ENDP


                          AREA ||i.HAL_NVIC_GetPendingIRQ||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_GetPendingIRQ PROC
;;;349      */
;;;350    uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
000000  0941              LSRS     r1,r0,#5
000002  0089              LSLS     r1,r1,#2
000004  f10121e0          ADD      r1,r1,#0xe000e000
000008  f8d11200          LDR      r1,[r1,#0x200]
00000c  f000021f          AND      r2,r0,#0x1f
000010  2001              MOVS     r0,#1
000012  4090              LSLS     r0,r0,r2
000014  4201              TST      r1,r0
;;;351    { 
000016  d001              BEQ      |L5.28|
000018  2001              MOVS     r0,#1
;;;352      /* Return 1 if pending else 0 */
;;;353      return NVIC_GetPendingIRQ(IRQn);
;;;354    }
00001a  4770              BX       lr
                  |L5.28|
00001c  2000              MOVS     r0,#0
00001e  4770              BX       lr
;;;355    
                          ENDP


                          AREA ||i.HAL_NVIC_GetPriority||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_GetPriority PROC
;;;319      */
;;;320    void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
000000  b570              PUSH     {r4-r6,lr}
000002  2800              CMP      r0,#0
;;;321    {
000004  da06              BGE      |L6.20|
000006  f000000f          AND      r0,r0,#0xf
00000a  f10020e0          ADD      r0,r0,#0xe000e000
00000e  f8900d14          LDRB     r0,[r0,#0xd14]
000012  e003              B        |L6.28|
                  |L6.20|
000014  f10020e0          ADD      r0,r0,#0xe000e000
000018  f8900400          LDRB     r0,[r0,#0x400]
                  |L6.28|
00001c  0904              LSRS     r4,r0,#4
00001e  f0010007          AND      r0,r1,#7
000022  f1c00507          RSB      r5,r0,#7
000026  2d04              CMP      r5,#4
000028  d900              BLS      |L6.44|
00002a  2504              MOVS     r5,#4
                  |L6.44|
00002c  1d01              ADDS     r1,r0,#4
00002e  2907              CMP      r1,#7
000030  d201              BCS      |L6.54|
000032  2000              MOVS     r0,#0
000034  e000              B        |L6.56|
                  |L6.54|
000036  1ec0              SUBS     r0,r0,#3
                  |L6.56|
000038  2101              MOVS     r1,#1
00003a  fa24f600          LSR      r6,r4,r0
00003e  fa01f505          LSL      r5,r1,r5
000042  1e6d              SUBS     r5,r5,#1
000044  402e              ANDS     r6,r6,r5
000046  4081              LSLS     r1,r1,r0
000048  1e49              SUBS     r1,r1,#1
00004a  4021              ANDS     r1,r1,r4
00004c  6016              STR      r6,[r2,#0]
00004e  6019              STR      r1,[r3,#0]
;;;322      /* Check the parameters */
;;;323      assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
;;;324     /* Get priority for Cortex-M system or device specific interrupts */
;;;325      NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
;;;326    }
000050  bd70              POP      {r4-r6,pc}
;;;327    
                          ENDP


                          AREA ||i.HAL_NVIC_GetPriorityGrouping||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_GetPriorityGrouping PROC
;;;292      */
;;;293    uint32_t HAL_NVIC_GetPriorityGrouping(void)
000000  4802              LDR      r0,|L7.12|
;;;294    {
;;;295      /* Get the PRIGROUP[10:8] field value */
;;;296      return NVIC_GetPriorityGrouping();
000002  6800              LDR      r0,[r0,#0]
000004  f3c02002          UBFX     r0,r0,#8,#3
;;;297    }
000008  4770              BX       lr
;;;298    
                          ENDP

00000a  0000              DCW      0x0000
                  |L7.12|
                          DCD      0xe000ed0c

                          AREA ||i.HAL_NVIC_SetPendingIRQ||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_SetPendingIRQ PROC
;;;334      */
;;;335    void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
000000  f000021f          AND      r2,r0,#0x1f
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  0940              LSRS     r0,r0,#5
00000a  0080              LSLS     r0,r0,#2
00000c  f10020e0          ADD      r0,r0,#0xe000e000
000010  f8c01200          STR      r1,[r0,#0x200]
;;;336    { 
;;;337      /* Set interrupt pending */
;;;338      NVIC_SetPendingIRQ(IRQn);
;;;339    }
000014  4770              BX       lr
;;;340    
                          ENDP


                          AREA ||i.HAL_NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SetPriority PROC
;;;204      */
;;;205    void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
000000  b4f0              PUSH     {r4-r7}
000002  4b0e              LDR      r3,|L9.60|
000004  681b              LDR      r3,[r3,#0]
;;;206    { 
;;;207      uint32_t prioritygroup = 0x00;
;;;208      
;;;209      /* Check the parameters */
;;;210      assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
;;;211      assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
;;;212      
;;;213      prioritygroup = NVIC_GetPriorityGrouping();
;;;214      
;;;215      NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
000006  460c              MOV      r4,r1
000008  f3c32302          UBFX     r3,r3,#8,#3
00000c  f1c30507          RSB      r5,r3,#7
000010  2d04              CMP      r5,#4
000012  d900              BLS      |L9.22|
000014  2504              MOVS     r5,#4                 ;206
                  |L9.22|
000016  1d19              ADDS     r1,r3,#4              ;206
000018  2907              CMP      r1,#7                 ;206
00001a  d201              BCS      |L9.32|
00001c  2300              MOVS     r3,#0                 ;206
00001e  e000              B        |L9.34|
                  |L9.32|
000020  1edb              SUBS     r3,r3,#3              ;206
                  |L9.34|
000022  2601              MOVS     r6,#1                 ;206
000024  fa06f105          LSL      r1,r6,r5              ;206
000028  1e49              SUBS     r1,r1,#1              ;206
00002a  4021              ANDS     r1,r1,r4              ;206
00002c  4099              LSLS     r1,r1,r3              ;206
00002e  409e              LSLS     r6,r6,r3              ;206
000030  1e76              SUBS     r6,r6,#1              ;206
000032  4016              ANDS     r6,r6,r2              ;206
000034  4331              ORRS     r1,r1,r6              ;206
000036  bcf0              POP      {r4-r7}
000038  f7ffbffe          B.W      NVIC_SetPriority
;;;216    }
;;;217    
                          ENDP

                  |L9.60|
                          DCD      0xe000ed0c

                          AREA ||i.HAL_NVIC_SetPriorityGrouping||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SetPriorityGrouping PROC
;;;182      */
;;;183    void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
000000  4906              LDR      r1,|L10.28|
000002  f0000207          AND      r2,r0,#7
000006  6808              LDR      r0,[r1,#0]
000008  f64f03ff          MOV      r3,#0xf8ff
00000c  4018              ANDS     r0,r0,r3
00000e  ea402002          ORR      r0,r0,r2,LSL #8
000012  4a03              LDR      r2,|L10.32|
000014  4310              ORRS     r0,r0,r2
000016  6008              STR      r0,[r1,#0]
;;;184    {
;;;185      /* Check the parameters */
;;;186      assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
;;;187      
;;;188      /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
;;;189      NVIC_SetPriorityGrouping(PriorityGroup);
;;;190    }
000018  4770              BX       lr
;;;191    
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      0xe000ed0c
                  |L10.32|
                          DCD      0x05fa0000

                          AREA ||i.HAL_NVIC_SystemReset||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SystemReset PROC
;;;250      */
;;;251    void HAL_NVIC_SystemReset(void)
000000  f3bf8f4f          DSB      
000004  4804              LDR      r0,|L11.24|
000006  6801              LDR      r1,[r0,#0]
000008  4a04              LDR      r2,|L11.28|
00000a  f40161e0          AND      r1,r1,#0x700
00000e  4311              ORRS     r1,r1,r2
000010  6001              STR      r1,[r0,#0]
000012  f3bf8f4f          DSB      
                  |L11.22|
000016  e7fe              B        |L11.22|
;;;252    {
;;;253      /* System Reset */
;;;254      NVIC_SystemReset();
;;;255    }
;;;256    
                          ENDP

                  |L11.24|
                          DCD      0xe000ed0c
                  |L11.28|
                          DCD      0x05fa0004

                          AREA ||i.HAL_SYSTICK_CLKSourceConfig||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_CLKSourceConfig PROC
;;;390      */
;;;391    void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
000000  f04f21e0          MOV      r1,#0xe000e000
;;;392    {
;;;393      /* Check the parameters */
;;;394      assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
;;;395      if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
000004  2804              CMP      r0,#4
;;;396      {
;;;397        SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
;;;398      }
;;;399      else
;;;400      {
;;;401        SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
000006  6908              LDR      r0,[r1,#0x10]
000008  d003              BEQ      |L12.18|
00000a  f0200004          BIC      r0,r0,#4
                  |L12.14|
00000e  6108              STR      r0,[r1,#0x10]         ;397
;;;402      }
;;;403    }
000010  4770              BX       lr
                  |L12.18|
000012  f0400004          ORR      r0,r0,#4              ;397
000016  e7fa              B        |L12.14|
;;;404    
                          ENDP


                          AREA ||i.HAL_SYSTICK_Callback||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_Callback PROC
;;;419      */
;;;420    __weak void HAL_SYSTICK_Callback(void)
000000  4770              BX       lr
;;;421    {
;;;422      /* NOTE : This function Should not be modified, when the callback is needed,
;;;423                the HAL_SYSTICK_Callback could be implemented in the user file
;;;424       */
;;;425    }
;;;426    
                          ENDP


                          AREA ||i.HAL_SYSTICK_Config||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_Config PROC
;;;263      */
;;;264    uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
000000  b510              PUSH     {r4,lr}
;;;265    {
000002  1e40              SUBS     r0,r0,#1
000004  f1b07f80          CMP      r0,#0x1000000
000008  d301              BCC      |L14.14|
00000a  2001              MOVS     r0,#1
;;;266       return SysTick_Config(TicksNumb);
;;;267    }
00000c  bd10              POP      {r4,pc}
                  |L14.14|
00000e  f04f24e0          MOV      r4,#0xe000e000
000012  6160              STR      r0,[r4,#0x14]
000014  210f              MOVS     r1,#0xf
000016  1760              ASRS     r0,r4,#29
000018  f7fffffe          BL       NVIC_SetPriority
00001c  2000              MOVS     r0,#0
00001e  61a0              STR      r0,[r4,#0x18]
000020  2007              MOVS     r0,#7
000022  6120              STR      r0,[r4,#0x10]
000024  2000              MOVS     r0,#0
000026  bd10              POP      {r4,pc}
;;;268    /**
                          ENDP


                          AREA ||i.HAL_SYSTICK_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_IRQHandler PROC
;;;409      */
;;;410    void HAL_SYSTICK_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;411    {
;;;412      HAL_SYSTICK_Callback();
000002  f7fffffe          BL       HAL_SYSTICK_Callback
;;;413    }
000006  bd10              POP      {r4,pc}
;;;414    
                          ENDP


                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=1

                  NVIC_SetPriority PROC
;;;1404    */
;;;1405   __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  0709              LSLS     r1,r1,#28
;;;1406   {
;;;1407     if(IRQn < 0) {
;;;1408       SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
000002  0e09              LSRS     r1,r1,#24
000004  2800              CMP      r0,#0                 ;1407
000006  da06              BGE      |L16.22|
000008  f000000f          AND      r0,r0,#0xf
00000c  f10020e0          ADD      r0,r0,#0xe000e000
000010  f8801d14          STRB     r1,[r0,#0xd14]
;;;1409     else {
;;;1410       NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
;;;1411   }
000014  4770              BX       lr
                  |L16.22|
000016  f10020e0          ADD      r0,r0,#0xe000e000
00001a  f8801400          STRB     r1,[r0,#0x400]        ;1410
00001e  4770              BX       lr
;;;1412   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\Drivers\\STM32F2xx_HAL_Driver\\Src\\stm32f2xx_hal_cortex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f2xx_hal_cortex_c_2992dbc0____REV16|
#line 129 "..\\..\\Drivers\\CMSIS\\Include\\core_cmInstr.h"
|__asm___22_stm32f2xx_hal_cortex_c_2992dbc0____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f2xx_hal_cortex_c_2992dbc0____REVSH|
#line 144
|__asm___22_stm32f2xx_hal_cortex_c_2992dbc0____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
