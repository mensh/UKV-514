; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o"bhd2 configuration\usbcore.o" --asm_dir=.\list\ --list_dir=.\list\ --depend="bhd2 configuration\usbcore.d" --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\..\Drivers\CMSIS\Device\ST\STM32F2xx\Include -I..\..\Drivers\CMSIS\Include -I..\..\Middlewares\ST\STM32_USB_Device_Library\Class\CDC\Inc -I..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc -I..\..\Drivers\STM32F2xx_HAL_Driver\Inc -I..\..\Inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_HAL_DRIVER -DSTM32F215xx --omf_browse="bhd2 configuration\usbcore.crf" ..\..\Src\core\usbCore.c]
                          THUMB

                          AREA ||i.USB_CORE_0x01||, CODE, READONLY, ALIGN=2

                  USB_CORE_0x01 PROC
;;;15     
;;;16     void USB_CORE_0x01(uint8_t* _buf, uint32_t *_len)
000000  b508              PUSH     {r3,lr}
;;;17     	{
;;;18     	// Device ID
;;;19     	tdData *pPacket;
;;;20     
;;;21     	USB_CORE_getPacketToPrepare(&pPacket);
000002  4668              MOV      r0,sp
000004  f7fffffe          BL       USB_CORE_getPacketToPrepare
;;;22     
;;;23     	*(pPacket->data +  0 ) = 0x01;
000008  9800              LDR      r0,[sp,#0]
00000a  2101              MOVS     r1,#1
;;;24     
;;;25     	MWN_M_setValue16ToBuffer(BHD2_ID_DEV, pPacket->data, 1);
00000c  220a              MOVS     r2,#0xa
00000e  7001              STRB     r1,[r0,#0]            ;23
000010  7081              STRB     r1,[r0,#2]
000012  7042              STRB     r2,[r0,#1]
;;;26     	MWN_M_setValue16ToBuffer(BHD2_SOFTWARE_VERSION, pPacket->data, 3);
000014  2200              MOVS     r2,#0
;;;27     
;;;28     	*(pPacket->data +  5 ) = configurationTable.exist;
000016  4b08              LDR      r3,|L1.56|
000018  7102              STRB     r2,[r0,#4]            ;26
00001a  70c1              STRB     r1,[r0,#3]            ;26
00001c  7a1b              LDRB     r3,[r3,#8]  ; configurationTable
00001e  7143              STRB     r3,[r0,#5]
;;;29     	*(pPacket->data +  6 ) = 0x01;
000020  7181              STRB     r1,[r0,#6]
;;;30     
;;;31     	*(pPacket->data + 14 ) = 0x00;
000022  7382              STRB     r2,[r0,#0xe]
;;;32     	*(pPacket->data + 15 ) = *(pPacket->data + 15 ) ? 1 : 0;
000024  7bc1              LDRB     r1,[r0,#0xf]
000026  b101              CBZ      r1,|L1.42|
000028  2101              MOVS     r1,#1
                  |L1.42|
00002a  73c1              STRB     r1,[r0,#0xf]
;;;33     
;;;34     	pPacket->size = USB_CORE_0x01_PACKET_SIZE;
00002c  f5005080          ADD      r0,r0,#0x1000
000030  2110              MOVS     r1,#0x10
000032  6101              STR      r1,[r0,#0x10]
;;;35     	}
000034  bd08              POP      {r3,pc}
;;;36     
                          ENDP

000036  0000              DCW      0x0000
                  |L1.56|
                          DCD      configurationTable

                          AREA ||i.USB_CORE_0x04||, CODE, READONLY, ALIGN=1

                  USB_CORE_0x04 PROC
;;;36     
;;;37     void USB_CORE_0x04(uint8_t* _buf, uint32_t *_len)
000000  b508              PUSH     {r3,lr}
;;;38     	{
;;;39     	// Memory chip info
;;;40     	tdData *pPacket;
;;;41     
;;;42     	USB_CORE_getPacketToPrepare(&pPacket);
000002  4668              MOV      r0,sp
000004  f7fffffe          BL       USB_CORE_getPacketToPrepare
;;;43     
;;;44     	*(pPacket->data + USB_CORE_0x04_PACKET_SERVICE_SHIFT +  0 ) = 0x04;
000008  9800              LDR      r0,[sp,#0]
00000a  2104              MOVS     r1,#4
00000c  f8801200          STRB     r1,[r0,#0x200]
;;;45     	*(pPacket->data + USB_CORE_0x04_PACKET_SERVICE_SHIFT +  1 ) = 0;
000010  2100              MOVS     r1,#0
000012  f8801201          STRB     r1,[r0,#0x201]
;;;46     	*(pPacket->data + USB_CORE_0x04_PACKET_SERVICE_SHIFT + 14 ) = 0;
000016  f880120e          STRB     r1,[r0,#0x20e]
;;;47     	*(pPacket->data + USB_CORE_0x04_PACKET_SERVICE_SHIFT + 15 ) = *(pPacket->data + USB_CORE_0x04_PACKET_SERVICE_SHIFT + 14 ) ? 1 : 0;
00001a  f880120f          STRB     r1,[r0,#0x20f]
;;;48     
;;;49     	pPacket->size = USB_CORE_0x04_PACKET_SIZE;
00001e  f5005080          ADD      r0,r0,#0x1000
000022  f44f7104          MOV      r1,#0x210
000026  6101              STR      r1,[r0,#0x10]
;;;50     	}
000028  bd08              POP      {r3,pc}
;;;51     
                          ENDP


                          AREA ||i.USB_CORE_0x05||, CODE, READONLY, ALIGN=1

                  USB_CORE_0x05 PROC
;;;51     
;;;52     void USB_CORE_0x05(uint8_t* _buf, uint32_t *_len)
000000  b51c              PUSH     {r2-r4,lr}
;;;53     	{
;;;54     	// Bad blocks status
;;;55     	tdData *pPacket;
;;;56     	uint8_t *pBadBlockListPtr;
;;;57     	uint8_t *pByte;
;;;58     	uint16_t byte;
;;;59     
;;;60     	USB_CORE_getPacketToPrepare(&pPacket);
000002  a801              ADD      r0,sp,#4
000004  f7fffffe          BL       USB_CORE_getPacketToPrepare
;;;61     
;;;62     	FILE_SYSTEM_getPtrToBadBlocksList(&pBadBlockListPtr);
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       FILE_SYSTEM_getPtrToBadBlocksList
;;;63     
;;;64     	byte = USB_CORE_0x05_PACKET_SERVICE_SHIFT;
00000e  f44f7100          MOV      r1,#0x200
;;;65     	pByte = pPacket->data;
;;;66     
;;;67     	while( byte-- )
000012  9801              LDR      r0,[sp,#4]
000014  e006              B        |L3.36|
                  |L3.22|
;;;68     		*pByte++ = *pBadBlockListPtr++;
000016  9a00              LDR      r2,[sp,#0]
000018  7812              LDRB     r2,[r2,#0]
00001a  f8002b01          STRB     r2,[r0],#1
00001e  9a00              LDR      r2,[sp,#0]
000020  1c52              ADDS     r2,r2,#1
000022  9200              STR      r2,[sp,#0]
                  |L3.36|
000024  1e49              SUBS     r1,r1,#1              ;67
000026  b289              UXTH     r1,r1                 ;67
000028  d2f5              BCS      |L3.22|
;;;69     
;;;70     	*(pPacket->data + USB_CORE_0x05_PACKET_SERVICE_SHIFT +  0 ) = 0x05;
00002a  9801              LDR      r0,[sp,#4]
00002c  2105              MOVS     r1,#5
00002e  f8801200          STRB     r1,[r0,#0x200]
;;;71     
;;;72     	*(pPacket->data + USB_CORE_0x05_PACKET_SERVICE_SHIFT + 15 ) = *(pPacket->data + USB_CORE_0x05_PACKET_SERVICE_SHIFT + 14 ) ? 1 : 0;
000032  f890120e          LDRB     r1,[r0,#0x20e]
000036  b101              CBZ      r1,|L3.58|
000038  2101              MOVS     r1,#1
                  |L3.58|
00003a  f880120f          STRB     r1,[r0,#0x20f]
;;;73     
;;;74     	pPacket->size = USB_CORE_0x05_PACKET_SIZE;
00003e  f5005080          ADD      r0,r0,#0x1000
000042  f44f7104          MOV      r1,#0x210
000046  6101              STR      r1,[r0,#0x10]
;;;75     	}
000048  bd1c              POP      {r2-r4,pc}
;;;76     
                          ENDP


                          AREA ||i.USB_CORE_0x07||, CODE, READONLY, ALIGN=2

                  USB_CORE_0x07 PROC
;;;107    
;;;108    void USB_CORE_0x07(uint8_t* _buf, uint32_t *_len)
000000  b510              PUSH     {r4,lr}
;;;109    	{
;;;110    	// erase main memory
;;;111    	uint32_t startPage, endPage;
;;;112    
;;;113    	//if( configurationTableAbsent == 0 )
;;;114    	CORE_initEraseMainMemory();
000002  f7fffffe          BL       CORE_initEraseMainMemory
;;;115    
;;;116    	startPage = 0;
;;;117    	endPage = FILE_SYSTEM_MEMORY_BLOCKS_AMOUNT;
;;;118    
;;;119    	packetManeger.pDataFactory = USB_CORE_ErasePage;
000006  4b06              LDR      r3,|L4.32|
000008  4804              LDR      r0,|L4.28|
00000a  2200              MOVS     r2,#0                 ;116
;;;120    
;;;121    	//if( configurationTableAbsent == 1 )
;;;122    		//packetManeger.packet.packetsToSent = 1;
;;;123    	//else
;;;124    	packetManeger.packet.packetsToSent = endPage - startPage;
00000c  6018              STR      r0,[r3,#0]  ; packetManeger
00000e  f5034080          ADD      r0,r3,#0x4000
000012  f44f5180          MOV      r1,#0x1000            ;117
000016  e9c01217          STRD     r1,r2,[r0,#0x5c]
;;;125    
;;;126    	packetManeger.packet.currentPacket = startPage;
;;;127    	}
00001a  bd10              POP      {r4,pc}
;;;128    
                          ENDP

                  |L4.28|
                          DCD      USB_CORE_ErasePage
                  |L4.32|
                          DCD      ||.bss||

                          AREA ||i.USB_CORE_0x08||, CODE, READONLY, ALIGN=1

                  USB_CORE_0x08 PROC
;;;128    
;;;129    void USB_CORE_0x08(uint8_t* _buf, uint32_t *_len)
000000  b508              PUSH     {r3,lr}
;;;130    	{
;;;131    	// Erase bad bloks list
;;;132    	tdData *pPacket;
;;;133    
;;;134    	USB_CORE_getPacketToPrepare(&pPacket);
000002  4668              MOV      r0,sp
000004  f7fffffe          BL       USB_CORE_getPacketToPrepare
;;;135    
;;;136    	CORE_initClearBadBlocks();
000008  f7fffffe          BL       CORE_initClearBadBlocks
;;;137    
;;;138    	*(pPacket->data + USB_CORE_0x08_PACKET_SERVICE_SHIFT +  0 ) = 0x08;
00000c  9800              LDR      r0,[sp,#0]
00000e  2108              MOVS     r1,#8
000010  f8001b0e          STRB     r1,[r0],#0xe
;;;139    	*(pPacket->data + USB_CORE_0x08_PACKET_SERVICE_SHIFT + 14 ) = 0;
000014  2100              MOVS     r1,#0
000016  f8001b01          STRB     r1,[r0],#1
;;;140    	*(pPacket->data + USB_CORE_0x08_PACKET_SERVICE_SHIFT + 15 ) = *(pPacket->data + USB_CORE_0x08_PACKET_SERVICE_SHIFT + 14 ) ? 1 : 0;
00001a  f8001b0f          STRB     r1,[r0],#0xf
;;;141    
;;;142    	pPacket->size = USB_CORE_0x08_PACKET_SIZE;
00001e  2110              MOVS     r1,#0x10
000020  f8c01ff2          STR      r1,[r0,#0xff2]
;;;143    	}
000024  bd08              POP      {r3,pc}
;;;144    
                          ENDP


                          AREA ||i.USB_CORE_0x09||, CODE, READONLY, ALIGN=2

                  USB_CORE_0x09 PROC
;;;158    
;;;159    void USB_CORE_0x09(uint8_t* _buf, uint32_t *_len)
000000  7841              LDRB     r1,[r0,#1]
;;;160    	{
;;;161    	// Read stream data
;;;162    	unsigned int startPage, endPage;
;;;163    
;;;164    	startPage = MWN_M_getValue32FromBuffer(_buf, 1);
000002  f8d02002          LDR      r2,[r0,#2]
;;;165    	endPage = MWN_M_getValue32FromBuffer(_buf, 5);
;;;166    
;;;167    	packetManeger.pDataFactory = USB_CORE_FillSmdPacket;
000006  4b09              LDR      r3,|L6.44|
000008  ea412102          ORR      r1,r1,r2,LSL #8       ;164
00000c  7942              LDRB     r2,[r0,#5]            ;165
00000e  f8d00006          LDR      r0,[r0,#6]            ;165
000012  ea422000          ORR      r0,r2,r0,LSL #8       ;165
000016  4a04              LDR      r2,|L6.40|
;;;168    	packetManeger.packet.packetsToSent = 1 + endPage - startPage; //not (start...end) but [start...end]  so + 1
000018  601a              STR      r2,[r3,#0]  ; packetManeger
00001a  1a42              SUBS     r2,r0,r1
00001c  f5034080          ADD      r0,r3,#0x4000
000020  1c52              ADDS     r2,r2,#1
000022  e9c02117          STRD     r2,r1,[r0,#0x5c]
;;;169    
;;;170    	packetManeger.packet.currentPacket = startPage;
;;;171    	}
000026  4770              BX       lr
;;;172    
                          ENDP

                  |L6.40|
                          DCD      USB_CORE_FillSmdPacket
                  |L6.44|
                          DCD      ||.bss||

                          AREA ||i.USB_CORE_0x1A||, CODE, READONLY, ALIGN=2

                  USB_CORE_0x1A PROC
;;;172    
;;;173    void USB_CORE_0x1A(uint8_t* _buf, uint32_t *_len)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;174    	{
000004  4604              MOV      r4,r0
;;;175    	// Configuration table IN
;;;176    	tdData *pPacket;
;;;177    	uint32_t len, SBD, NTD;
;;;178    	uint8_t crc8;
;;;179    	uint8_t crcNotMatches;
;;;180    	uint32_t byte;
;;;181    	uint8_t *pByteFrom;
;;;182    	uint8_t *pByteTo;
;;;183    
;;;184    	SBD = MWN_M_getValue32FromBuffer(_buf, 25);
000006  7e40              LDRB     r0,[r0,#0x19]
000008  f8d4101a          LDR      r1,[r4,#0x1a]
;;;185    	NTD = MWN_M_getValue8FromBuffer(_buf, 29);
00000c  7f67              LDRB     r7,[r4,#0x1d]
00000e  ea402801          ORR      r8,r0,r1,LSL #8       ;184
;;;186    
;;;187    	len = 30 + SBD + NTD;
000012  eb080507          ADD      r5,r8,r7
;;;188    
;;;189    	crc8 = CRC8_( _buf + 1, len - 1);
000016  f105011d          ADD      r1,r5,#0x1d
00001a  1c60              ADDS     r0,r4,#1
00001c  351e              ADDS     r5,r5,#0x1e
00001e  f7fffffe          BL       CRC8_
;;;190    	crcNotMatches = crc8 != *(_buf + len);// because length = 30 + SBD + NTD;
000022  5d61              LDRB     r1,[r4,r5]
000024  f00009ff          AND      r9,r0,#0xff           ;189
000028  4549              CMP      r1,r9
00002a  d001              BEQ      |L7.48|
00002c  2601              MOVS     r6,#1
00002e  e018              B        |L7.98|
                  |L7.48|
;;;191    
;;;192    	if( crcNotMatches == 0 )
;;;193    		{
;;;194    		configurationTable.exist = 1;
000030  4816              LDR      r0,|L7.140|
000032  2101              MOVS     r1,#1
000034  1e6d              SUBS     r5,r5,#1
000036  7201              STRB     r1,[r0,#8]
000038  e9c05800          STRD     r5,r8,[r0,#0]
00003c  2600              MOVS     r6,#0                 ;190
;;;195    		configurationTable.size = len - 1;
;;;196    		configurationTable.SBD = SBD;
;;;197    		configurationTable.NTD = NTD;
00003e  7247              STRB     r7,[r0,#9]
;;;198    
;;;199    		byte = 0;
000040  4632              MOV      r2,r6
;;;200    		pByteTo = configurationTable.data;
000042  f100010a          ADD      r1,r0,#0xa
000046  1c64              ADDS     r4,r4,#1
000048  e005              B        |L7.86|
;;;201    		pByteFrom = _buf + 1;
;;;202    		while( byte < configurationTable.size )
;;;203    			{
;;;204    			*pByteTo++ = *pByteFrom++;
00004a  bf00              NOP      
                  |L7.76|
00004c  f8143b01          LDRB     r3,[r4],#1
000050  f8013b01          STRB     r3,[r1],#1
000054  1c52              ADDS     r2,r2,#1
                  |L7.86|
000056  6803              LDR      r3,[r0,#0]            ;202  ; configurationTable
000058  4293              CMP      r3,r2                 ;202
00005a  d8f7              BHI      |L7.76|
;;;205    			byte++;
;;;206    			}
;;;207    
;;;208    		FILE_SYSTEM_saveConfigurationTable(&configurationTable);
00005c  480b              LDR      r0,|L7.140|
00005e  f7fffffe          BL       FILE_SYSTEM_saveConfigurationTable
                  |L7.98|
;;;209    		}
;;;210    
;;;211    	USB_CORE_getPacketToPrepare(&pPacket);
000062  4668              MOV      r0,sp
000064  f7fffffe          BL       USB_CORE_getPacketToPrepare
;;;212    
;;;213    	*(pPacket->data + USB_CORE_0x1A_PACKET_SERVICE_SHIFT +  0 ) = 0x27;
000068  9800              LDR      r0,[sp,#0]
00006a  2127              MOVS     r1,#0x27
00006c  7001              STRB     r1,[r0,#0]
;;;214    	*(pPacket->data + USB_CORE_0x1A_PACKET_SERVICE_SHIFT +  1 ) = crc8;
00006e  f8809001          STRB     r9,[r0,#1]
;;;215    	*(pPacket->data + USB_CORE_0x1A_PACKET_SERVICE_SHIFT + 14 ) = crcNotMatches;
000072  7386              STRB     r6,[r0,#0xe]
;;;216    	*(pPacket->data + USB_CORE_0x1A_PACKET_SERVICE_SHIFT + 15 ) = *(pPacket->data + USB_CORE_0x1A_PACKET_SERVICE_SHIFT + 14 ) ? 1 : 0;
000074  b10e              CBZ      r6,|L7.122|
000076  2101              MOVS     r1,#1
000078  e000              B        |L7.124|
                  |L7.122|
00007a  2100              MOVS     r1,#0
                  |L7.124|
00007c  73c1              STRB     r1,[r0,#0xf]
;;;217    
;;;218    	pPacket->size = USB_CORE_0x1A_PACKET_SIZE;
00007e  f5005080          ADD      r0,r0,#0x1000
000082  2110              MOVS     r1,#0x10
000084  6101              STR      r1,[r0,#0x10]
;;;219    	}
000086  e8bd83f8          POP      {r3-r9,pc}
;;;220    
                          ENDP

00008a  0000              DCW      0x0000
                  |L7.140|
                          DCD      configurationTable

                          AREA ||i.USB_CORE_0x1B||, CODE, READONLY, ALIGN=2

                  USB_CORE_0x1B PROC
;;;266    
;;;267    void USB_CORE_0x1B(uint8_t* _buf, uint32_t *_len)
000000  4a05              LDR      r2,|L8.24|
;;;268    	{
;;;269    	// Configuration table OUT
;;;270    	uint32_t startPage, endPage;
;;;271    	startPage = 0;
;;;272    	endPage = 2;
;;;273    
;;;274    	packetManeger.pDataFactory = USB_CORE_FillConfigurationTable;
000002  4804              LDR      r0,|L8.20|
000004  2100              MOVS     r1,#0                 ;271
;;;275    
;;;276    	packetManeger.packet.packetsToSent = endPage - startPage;
;;;277    
;;;278    	packetManeger.packet.currentPacket = startPage;
;;;279    	}
000006  6010              STR      r0,[r2,#0]  ; packetManeger
000008  4804              LDR      r0,|L8.28|
00000a  2202              MOVS     r2,#2
00000c  e9c02117          STRD     r2,r1,[r0,#0x5c]      ;276
000010  4770              BX       lr
;;;280    
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
                          DCD      USB_CORE_FillConfigurationTable
                  |L8.24|
                          DCD      ||.bss||
                  |L8.28|
                          DCD      ||.bss||+0x4000

                          AREA ||i.USB_CORE_0x1C||, CODE, READONLY, ALIGN=2

                  USB_CORE_0x1C PROC
;;;280    
;;;281    void USB_CORE_0x1C(uint8_t* _buf, uint32_t *_len)
000000  b508              PUSH     {r3,lr}
;;;282    	{
000002  4603              MOV      r3,r0
;;;283    	// Data types in
;;;284    	tdData *pPacket;
;;;285    	tdArincConfigurationStatus status;
;;;286    	tdDataTypes dataType;
;;;287    	uint8_t slotsAmount;
;;;288    
;;;289    	USB_CORE_getPacketToPrepare(&pPacket);
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       USB_CORE_getPacketToPrepare
;;;290    
;;;291    	dataType = (tdDataTypes) *(_buf + 1);
00000a  7859              LDRB     r1,[r3,#1]
;;;292    	slotsAmount = *(_buf + 2);
00000c  789a              LDRB     r2,[r3,#2]
;;;293    
;;;294    	status = configDataTypeError;
00000e  2003              MOVS     r0,#3
;;;295    	if( dataType == ARINC_DATA )
000010  2910              CMP      r1,#0x10
000012  d103              BNE      |L9.28|
;;;296    		{
;;;297    		status = HOLT_CORE_handleSlotTD(&arinc, _buf + 3, slotsAmount);
000014  1cd9              ADDS     r1,r3,#3
000016  4807              LDR      r0,|L9.52|
000018  f7fffffe          BL       HOLT_CORE_handleSlotTD
                  |L9.28|
;;;298    		}
;;;299    
;;;300    	*(pPacket->data + USB_CORE_0x1C_PACKET_SERVICE_SHIFT +  0 ) = 0x29;
00001c  9900              LDR      r1,[sp,#0]
00001e  2229              MOVS     r2,#0x29
000020  700a              STRB     r2,[r1,#0]
;;;301    
;;;302    	*(pPacket->data + USB_CORE_0x1C_PACKET_SERVICE_SHIFT + 14 ) = status;
000022  7388              STRB     r0,[r1,#0xe]
;;;303    	*(pPacket->data + USB_CORE_0x1C_PACKET_SERVICE_SHIFT + 15 ) = *(pPacket->data + USB_CORE_0x1C_PACKET_SERVICE_SHIFT + 14 ) ? 1 : 0;
000024  b100              CBZ      r0,|L9.40|
000026  2001              MOVS     r0,#1
                  |L9.40|
000028  73c8              STRB     r0,[r1,#0xf]
;;;304    
;;;305    	pPacket->size = USB_CORE_0x1C_PACKET_SIZE;
00002a  f5015180          ADD      r1,r1,#0x1000
00002e  2010              MOVS     r0,#0x10
000030  6108              STR      r0,[r1,#0x10]
;;;306    	}
000032  bd08              POP      {r3,pc}
;;;307    
                          ENDP

                  |L9.52|
                          DCD      arinc

                          AREA ||i.USB_CORE_0x1D||, CODE, READONLY, ALIGN=2

                  USB_CORE_0x1D PROC
;;;350    
;;;351    void USB_CORE_0x1D(uint8_t* _buf, uint32_t *_len)
000000  4a05              LDR      r2,|L10.24|
;;;352    	{
;;;353    	// Data types out
;;;354    	uint32_t startPage, endPage;
;;;355    
;;;356    	startPage = 0;
;;;357    	endPage = 2;
;;;358    
;;;359    	packetManeger.pDataFactory = USB_CORE_FillDataTypes;
000002  4804              LDR      r0,|L10.20|
000004  2100              MOVS     r1,#0                 ;356
;;;360    
;;;361    	packetManeger.packet.packetsToSent = endPage - startPage;
;;;362    	packetManeger.packet.currentPacket = startPage;
;;;363    	}
000006  6010              STR      r0,[r2,#0]  ; packetManeger
000008  4804              LDR      r0,|L10.28|
00000a  2202              MOVS     r2,#2
00000c  e9c02117          STRD     r2,r1,[r0,#0x5c]      ;361
000010  4770              BX       lr
;;;364    
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      USB_CORE_FillDataTypes
                  |L10.24|
                          DCD      ||.bss||
                  |L10.28|
                          DCD      ||.bss||+0x4000

                          AREA ||i.USB_CORE_0x1E||, CODE, READONLY, ALIGN=2

                  USB_CORE_0x1E PROC
;;;421    
;;;422    void USB_CORE_0x1E(uint8_t* _buf, uint32_t *_len)
000000  4b0b              LDR      r3,|L11.48|
;;;423    	{
;;;424    	// FAT
;;;425    	int packetsToSent;
;;;426    
;;;427    	if( FAT.filesAmount )
;;;428    		{
;;;429    		pCurrentFile = FAT.pFirstFile;
000002  490c              LDR      r1,|L11.52|
000004  2200              MOVS     r2,#0
000006  6818              LDR      r0,[r3,#0]            ;423  ; FAT
000008  b138              CBZ      r0,|L11.26|
00000a  685b              LDR      r3,[r3,#4]  ; FAT
;;;430    		packetsToSent = (FAT.filesAmount / USB_CORE_0x1E_SLOTS_IN_TRANSMISSION) + ((FAT.filesAmount % USB_CORE_0x1E_SLOTS_IN_TRANSMISSION) ? 1 : 0);
00000c  604b              STR      r3,[r1,#4]  ; pCurrentFile
00000e  0701              LSLS     r1,r0,#28
000010  d000              BEQ      |L11.20|
000012  2101              MOVS     r1,#1
                  |L11.20|
000014  eb011010          ADD      r0,r1,r0,LSR #4
000018  e001              B        |L11.30|
                  |L11.26|
;;;431    		}
;;;432    	else
;;;433    		{
;;;434    		pCurrentFile = NULL;
;;;435    		packetsToSent = 1;
00001a  2001              MOVS     r0,#1
00001c  604a              STR      r2,[r1,#4]  ; pCurrentFile
                  |L11.30|
;;;436    		}
;;;437    
;;;438    	packetManeger.pDataFactory = USB_CORE_FillFatPacket;
00001e  4b07              LDR      r3,|L11.60|
000020  4905              LDR      r1,|L11.56|
;;;439    	packetManeger.packet.packetsToSent = packetsToSent;
000022  6019              STR      r1,[r3,#0]  ; packetManeger
000024  f5034180          ADD      r1,r3,#0x4000
000028  e9c10217          STRD     r0,r2,[r1,#0x5c]
;;;440    
;;;441    	packetManeger.packet.currentPacket = 0;
;;;442    	}
00002c  4770              BX       lr
;;;443    
                          ENDP

00002e  0000              DCW      0x0000
                  |L11.48|
                          DCD      ||FAT||
                  |L11.52|
                          DCD      ||.data||
                  |L11.56|
                          DCD      USB_CORE_FillFatPacket
                  |L11.60|
                          DCD      ||.bss||

                          AREA ||i.USB_CORE_0x1F||, CODE, READONLY, ALIGN=2

                  USB_CORE_0x1F PROC
;;;453    
;;;454    void USB_CORE_0x1F(uint8_t* _buf, uint32_t *_len)
000000  7841              LDRB     r1,[r0,#1]
;;;455    	{
;;;456    	// Read Spare Data
;;;457    	uint32_t startPage, endPage;
;;;458    
;;;459    	startPage = MWN_M_getValue32FromBuffer( _buf, 1 );
000002  f8d02002          LDR      r2,[r0,#2]
;;;460    	endPage = MWN_M_getValue32FromBuffer( _buf, 5 );
;;;461    
;;;462    	packetManeger.pDataFactory = USB_CORE_FillSsdPacket;
000006  4b09              LDR      r3,|L12.44|
000008  ea412102          ORR      r1,r1,r2,LSL #8       ;459
00000c  7942              LDRB     r2,[r0,#5]            ;460
00000e  f8d00006          LDR      r0,[r0,#6]            ;460
000012  ea422000          ORR      r0,r2,r0,LSL #8       ;460
000016  4a04              LDR      r2,|L12.40|
;;;463    	packetManeger.packet.packetsToSent = 1 + endPage - startPage; //not (start...end) but [start...end]  so + 1
000018  601a              STR      r2,[r3,#0]  ; packetManeger
00001a  1a42              SUBS     r2,r0,r1
00001c  f5034080          ADD      r0,r3,#0x4000
000020  1c52              ADDS     r2,r2,#1
000022  e9c02117          STRD     r2,r1,[r0,#0x5c]
;;;464    
;;;465    	packetManeger.packet.currentPacket = startPage;
;;;466    	}
000026  4770              BX       lr
;;;467    
                          ENDP

                  |L12.40|
                          DCD      USB_CORE_FillSsdPacket
                  |L12.44|
                          DCD      ||.bss||

                          AREA ||i.USB_CORE_0x20||, CODE, READONLY, ALIGN=2

                  USB_CORE_0x20 PROC
;;;500    
;;;501    void USB_CORE_0x20(uint8_t* _buf, uint32_t *_len)
000000  b530              PUSH     {r4,r5,lr}
;;;502    	{
;;;503    	// Read Spare Data
;;;504    	uint32_t startPage, endPage;
;;;505    	uint32_t pagesToSent;
;;;506    
;;;507    	startPage = MWN_M_getValue32FromBuffer( _buf, 1 );
000002  7841              LDRB     r1,[r0,#1]
000004  f8d02002          LDR      r2,[r0,#2]
;;;508    	endPage = MWN_M_getValue32FromBuffer( _buf, 5 );
;;;509    
;;;510    	usbCore0x20endPage = endPage;
;;;511    
;;;512    	packetManeger.pDataFactory = USB_CORE_FillSsd;
000008  4b10              LDR      r3,|L13.76|
00000a  ea412102          ORR      r1,r1,r2,LSL #8       ;507
00000e  7942              LDRB     r2,[r0,#5]            ;508
000010  f8d00006          LDR      r0,[r0,#6]            ;508
;;;513    
;;;514    	pagesToSent = 1 + endPage - startPage;
;;;515    	packetManeger.packet.packetsToSent = pagesToSent / USB_CORE_0x20_SSD_IN_TRANSMISSION;
000014  2412              MOVS     r4,#0x12
000016  ea422000          ORR      r0,r2,r0,LSL #8       ;508
00001a  4a0a              LDR      r2,|L13.68|
00001c  6010              STR      r0,[r2,#0]            ;512  ; usbCore0x20endPage
00001e  4a0a              LDR      r2,|L13.72|
000020  601a              STR      r2,[r3,#0]            ;514  ; packetManeger
000022  1a42              SUBS     r2,r0,r1              ;514
000024  1c52              ADDS     r2,r2,#1
000026  fbb2f3f4          UDIV     r3,r2,r4
;;;516    
;;;517    	if( pagesToSent % USB_CORE_0x20_SSD_IN_TRANSMISSION != 0 )
00002a  fbb2f5f4          UDIV     r5,r2,r4
00002e  4808              LDR      r0,|L13.80|
000030  fb042215          MLS      r2,r4,r5,r2
000034  65c3              STR      r3,[r0,#0x5c]         ;502  ; packetManeger
000036  b10a              CBZ      r2,|L13.60|
000038  1c5b              ADDS     r3,r3,#1              ;502
;;;518    		packetManeger.packet.packetsToSent += 1;
00003a  65c3              STR      r3,[r0,#0x5c]  ; packetManeger
                  |L13.60|
;;;519    
;;;520    	packetManeger.packet.currentPage = startPage;
;;;521    	packetManeger.packet.currentPacket = startPage;
00003c  6641              STR      r1,[r0,#0x64]  ; packetManeger
00003e  6601              STR      r1,[r0,#0x60]  ; packetManeger
;;;522    	}
000040  bd30              POP      {r4,r5,pc}
;;;523    
                          ENDP

000042  0000              DCW      0x0000
                  |L13.68|
                          DCD      ||.data||
                  |L13.72|
                          DCD      USB_CORE_FillSsd
                  |L13.76|
                          DCD      ||.bss||
                  |L13.80|
                          DCD      ||.bss||+0x4000

                          AREA ||i.USB_CORE_0xFE||, CODE, READONLY, ALIGN=2

                  USB_CORE_0xFE PROC
;;;523    
;;;524    void USB_CORE_0xFE(uint8_t* _buf, uint32_t *_len)
000000  480d              LDR      r0,|L14.56|
;;;525    	{
;;;526    	tdData *pPacket = &packetManeger.packet.packet[ (packetManeger.packet.pen - 1) % FRAMES_AMOUNT ];
000002  f8901054          LDRB     r1,[r0,#0x54]  ; packetManeger
000006  1e49              SUBS     r1,r1,#1
000008  f0010103          AND      r1,r1,#3
00000c  eb010281          ADD      r2,r1,r1,LSL #2
000010  eb022181          ADD      r1,r2,r1,LSL #10
000014  f5a04280          SUB      r2,r0,#0x4000
000018  eb020181          ADD      r1,r2,r1,LSL #2
00001c  1d09              ADDS     r1,r1,#4
;;;527    
;;;528    	if( pPacket->size > 3 ) // (pPacket->size - 3) in worst case size -> 0
00001e  f2410210          MOV      r2,#0x1010
000022  5852              LDR      r2,[r2,r1]
000024  2a03              CMP      r2,#3
000026  d902              BLS      |L14.46|
;;;529    		{
;;;530    		*( pPacket->data + (pPacket->size - 3) ) = 1;	// Break Command
000028  2301              MOVS     r3,#1
00002a  1ec9              SUBS     r1,r1,#3
00002c  5453              STRB     r3,[r2,r1]
                  |L14.46|
00002e  e9d01215          LDRD     r1,r2,[r0,#0x54]
;;;531    		}
;;;532    
;;;533    	packetManeger.packet.packetsToSent = packetManeger.packet.pen - packetManeger.packet.eye;
000032  1a89              SUBS     r1,r1,r2
000034  65c1              STR      r1,[r0,#0x5c]  ; packetManeger
;;;534    	}
000036  4770              BX       lr
;;;535    
                          ENDP

                  |L14.56|
                          DCD      ||.bss||+0x4000

                          AREA ||i.USB_CORE_ErasePage||, CODE, READONLY, ALIGN=2

                  USB_CORE_ErasePage PROC
;;;76     
;;;77     void USB_CORE_ErasePage(tdData *_pPacket)
000000  b570              PUSH     {r4-r6,lr}
;;;78     	{
000002  4604              MOV      r4,r0
;;;79     	unsigned char status;
;;;80     
;;;81     	packetManeger.packet.currentPacket = CORE_getErasingBlock();
000004  f7fffffe          BL       CORE_getErasingBlock
000008  4d0f              LDR      r5,|L15.72|
;;;82     
;;;83     	MWN_M_setValue8ToBuffer(0x07, _pPacket->data, 0);
00000a  6628              STR      r0,[r5,#0x60]  ; packetManeger
00000c  2007              MOVS     r0,#7
00000e  7020              STRB     r0,[r4,#0]
;;;84     	MWN_M_setValue32ToBuffer(packetManeger.packet.currentPacket, _pPacket->data, 1);
000010  6e28              LDR      r0,[r5,#0x60]  ; packetManeger
000012  0e00              LSRS     r0,r0,#24
000014  7120              STRB     r0,[r4,#4]
000016  6e28              LDR      r0,[r5,#0x60]  ; packetManeger
000018  0c00              LSRS     r0,r0,#16
00001a  70e0              STRB     r0,[r4,#3]
00001c  f8b50060          LDRH     r0,[r5,#0x60]  ; packetManeger
000020  0a00              LSRS     r0,r0,#8
000022  70a0              STRB     r0,[r4,#2]
000024  f8950060          LDRB     r0,[r5,#0x60]  ; packetManeger
000028  7060              STRB     r0,[r4,#1]
;;;85     
;;;86     	if( CORE_isErasing() == 1 )
00002a  f7fffffe          BL       CORE_isErasing
00002e  2801              CMP      r0,#1
000030  d008              BEQ      |L15.68|
;;;87     		{
;;;88     		status = 0x02; // in progress
;;;89     		}
;;;90     	else
;;;91     		{
;;;92     		packetManeger.packet.packetsToSent = 1;
000032  2001              MOVS     r0,#1
;;;93     		status = 0x00; // Complete;
000034  65e8              STR      r0,[r5,#0x5c]  ; packetManeger
000036  2000              MOVS     r0,#0
                  |L15.56|
;;;94     		}
;;;95     
;;;96     	/*
;;;97     	if( configurationTableAbsent == 1 )
;;;98     		{
;;;99     		*(pPacket->data + USB_CORE_0x07_PACKET_SERVICE_SHIFT + 14 ) = 1;
;;;100    		status = 0x01;
;;;101    		}
;;;102    	*/
;;;103    
;;;104    	MWN_M_setValue8ToBuffer(status, _pPacket->data, 15);
000038  73e0              STRB     r0,[r4,#0xf]
;;;105    	_pPacket->size = USB_CORE_0x07_PACKET_SIZE;
00003a  f5045480          ADD      r4,r4,#0x1000
00003e  2010              MOVS     r0,#0x10
;;;106    	};
000040  6120              STR      r0,[r4,#0x10]
000042  bd70              POP      {r4-r6,pc}
                  |L15.68|
000044  2002              MOVS     r0,#2                 ;88
000046  e7f7              B        |L15.56|
;;;107    
                          ENDP

                  |L15.72|
                          DCD      ||.bss||+0x4000

                          AREA ||i.USB_CORE_FillConfigurationTable||, CODE, READONLY, ALIGN=2

                  USB_CORE_FillConfigurationTable PROC
;;;220    
;;;221    void USB_CORE_FillConfigurationTable(tdData *_pPacket)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;222    	{
000004  4604              MOV      r4,r0
;;;223    	uint32_t lenS, lenE, crc8;
;;;224    	uint32_t byte;
;;;225    	uint8_t *pByteFrom;
;;;226    	uint8_t *pByteTo;
;;;227    
;;;228    	if( packetManeger.packet.currentPacket == 0 )
000006  481f              LDR      r0,|L16.132|
000008  2700              MOVS     r7,#0
;;;229    		{
;;;230    		*(_pPacket->data + 0 ) = 0x28;
;;;231    		*(_pPacket->data + 1 ) = 0x5A;
;;;232    
;;;233    		MWN_M_setValue32ToBuffer(configurationTable.SBD, _pPacket->data, 2);
00000a  4d1f              LDR      r5,|L16.136|
00000c  6e01              LDR      r1,[r0,#0x60]         ;230  ; packetManeger
00000e  2028              MOVS     r0,#0x28              ;230
;;;234    		MWN_M_setValue8ToBuffer(configurationTable.NTD,  _pPacket->data, 6);
;;;235    
;;;236    		*(_pPacket->data + 14 ) = 0; // configurationTable.exist;
;;;237    		*(_pPacket->data + 15 ) = *(_pPacket->data + 14 ) ? 1 : 0;
;;;238    
;;;239    		_pPacket->size	= USB_CORE_CONFIGURATION_TABLE_PACKET_SIZE;
000010  f5045680          ADD      r6,r4,#0x1000
;;;240    		}
;;;241    	else
;;;242    		{
;;;243    		*(_pPacket->data + 0 ) = 0x28;
000014  7020              STRB     r0,[r4,#0]
000016  b121              CBZ      r1,|L16.34|
;;;244    
;;;245    		byte = 0;
000018  2200              MOVS     r2,#0
;;;246    		pByteTo = _pPacket->data + 1;
00001a  1c60              ADDS     r0,r4,#1
;;;247    		pByteFrom = configurationTable.data;
00001c  f105010a          ADD      r1,r5,#0xa
;;;248    		while( byte < configurationTable.size )
000020  e019              B        |L16.86|
                  |L16.34|
000022  205a              MOVS     r0,#0x5a              ;231
000024  7060              STRB     r0,[r4,#1]            ;231
000026  6868              LDR      r0,[r5,#4]            ;233  ; configurationTable
000028  0e00              LSRS     r0,r0,#24             ;233
00002a  7160              STRB     r0,[r4,#5]            ;233
00002c  6868              LDR      r0,[r5,#4]            ;233  ; configurationTable
00002e  0c00              LSRS     r0,r0,#16             ;233
000030  7120              STRB     r0,[r4,#4]            ;233
000032  88a8              LDRH     r0,[r5,#4]            ;233  ; configurationTable
000034  0a00              LSRS     r0,r0,#8              ;233
000036  70e0              STRB     r0,[r4,#3]            ;233
000038  7928              LDRB     r0,[r5,#4]            ;233  ; configurationTable
00003a  70a0              STRB     r0,[r4,#2]            ;233
00003c  7a68              LDRB     r0,[r5,#9]            ;234  ; configurationTable
00003e  71a0              STRB     r0,[r4,#6]            ;234
000040  73a7              STRB     r7,[r4,#0xe]          ;236
000042  2000              MOVS     r0,#0                 ;237
000044  73e0              STRB     r0,[r4,#0xf]          ;237
000046  2010              MOVS     r0,#0x10              ;239
000048  e018              B        |L16.124|
;;;249    			{
;;;250    			*pByteTo++ = *pByteFrom++;
00004a  bf00              NOP      
                  |L16.76|
00004c  f8113b01          LDRB     r3,[r1],#1
000050  f8003b01          STRB     r3,[r0],#1
000054  1c52              ADDS     r2,r2,#1
                  |L16.86|
000056  682b              LDR      r3,[r5,#0]            ;248  ; configurationTable
000058  4293              CMP      r3,r2                 ;248
00005a  d8f7              BHI      |L16.76|
;;;251    			byte++;
;;;252    			}
;;;253    
;;;254    		lenS = 1;
;;;255    		lenE = configurationTable.size;
00005c  4619              MOV      r1,r3
;;;256    		crc8 = CRC8_( (_pPacket->data + lenS), lenE);
00005e  1c60              ADDS     r0,r4,#1
000060  f7fffffe          BL       CRC8_
;;;257    
;;;258    		MWN_M_setValue8ToBuffer(crc8, _pPacket->data, lenS + configurationTable.size );
000064  682a              LDR      r2,[r5,#0]  ; configurationTable
000066  1c61              ADDS     r1,r4,#1
000068  5450              STRB     r0,[r2,r1]
;;;259    
;;;260    		*(_pPacket->data + lenS + configurationTable.size + 1 ) = 0x00; // configuration table absent
00006a  6828              LDR      r0,[r5,#0]  ; configurationTable
;;;261    		*(_pPacket->data + lenS + configurationTable.size + 2 ) = *(_pPacket->data + lenS + configurationTable.size + 1 ) ? 1 : 0;
00006c  2100              MOVS     r1,#0
00006e  4420              ADD      r0,r0,r4              ;260
000070  7087              STRB     r7,[r0,#2]            ;260
000072  6828              LDR      r0,[r5,#0]  ; configurationTable
000074  4420              ADD      r0,r0,r4
000076  70c1              STRB     r1,[r0,#3]
;;;262    
;;;263    		_pPacket->size	= lenS + configurationTable.size + 3;
000078  6828              LDR      r0,[r5,#0]  ; configurationTable
00007a  1d00              ADDS     r0,r0,#4
                  |L16.124|
00007c  6130              STR      r0,[r6,#0x10]         ;239
;;;264    		}
;;;265    	}
00007e  e8bd81f0          POP      {r4-r8,pc}
;;;266    
                          ENDP

000082  0000              DCW      0x0000
                  |L16.132|
                          DCD      ||.bss||+0x4000
                  |L16.136|
                          DCD      configurationTable

                          AREA ||i.USB_CORE_FillDataTypes||, CODE, READONLY, ALIGN=2

                  USB_CORE_FillDataTypes PROC
;;;307    
;;;308    void USB_CORE_FillDataTypes(tdData *_pPacket)
000000  b5f0              PUSH     {r4-r7,lr}
;;;309    	{
;;;310    	uint8_t channel;
;;;311    	uint16_t shift;
;;;312    	uint32_t STD;
;;;313    
;;;314    	if( packetManeger.packet.currentPacket == 0 )
000002  491e              LDR      r1,|L17.124|
000004  2400              MOVS     r4,#0
;;;315    		{
;;;316    		*(_pPacket->data + 0 ) = 0x2A;
000006  222a              MOVS     r2,#0x2a
;;;317    		*(_pPacket->data + 1 ) = 0x5A;
;;;318    
;;;319    		STD = 1 + (2 * arinc.enabledChannels);
000008  6e0d              LDR      r5,[r1,#0x60]  ; packetManeger
00000a  491d              LDR      r1,|L17.128|
;;;320    		MWN_M_setValue32ToBuffer(STD, _pPacket->data, 2);
;;;321    
;;;322    		*(_pPacket->data + 6 ) = 0; // 0x01 - unknown data type ????
;;;323    		*(_pPacket->data + 7 ) = *(_pPacket->data + 6 ) ? 1 : 0;
;;;324    
;;;325    		_pPacket->size = USB_CORE_0x1C_PACKET_FIRST_SIZE;
00000c  f5005380          ADD      r3,r0,#0x1000
;;;326    		}
;;;327    	else
;;;328    		{
;;;329    		*(_pPacket->data + 0 ) = 0x2A;
000010  7002              STRB     r2,[r0,#0]
000012  b1f5              CBZ      r5,|L17.82|
;;;330    		*(_pPacket->data + 1 ) = arinc.enabledChannels;
000014  f8911184          LDRB     r1,[r1,#0x184]  ; arinc
000018  7041              STRB     r1,[r0,#1]
;;;331    
;;;332    		shift = 2;
00001a  2102              MOVS     r1,#2
00001c  4d19              LDR      r5,|L17.132|
;;;333    		for( channel = 0; channel < HOLT_CORE_CHANNELS_AMOUNT; channel++ )
00001e  2200              MOVS     r2,#0
                  |L17.32|
;;;334    			{
;;;335    			if( arinc.channel[ channel ].status.enable == 0 )
000020  eb021682          ADD      r6,r2,r2,LSL #6
000024  eb051606          ADD      r6,r5,r6,LSL #4
000028  f896740c          LDRB     r7,[r6,#0x40c]
00002c  b137              CBZ      r7,|L17.60|
;;;336    				continue;
;;;337    
;;;338    			*(_pPacket->data + shift + 0 ) = channel;
00002e  5442              STRB     r2,[r0,r1]
;;;339    			*(_pPacket->data + shift + 1 ) = arinc.channel[ channel ].freq;
000030  1847              ADDS     r7,r0,r1
000032  f8966410          LDRB     r6,[r6,#0x410]
000036  1c89              ADDS     r1,r1,#2
000038  707e              STRB     r6,[r7,#1]
;;;340    
;;;341    			shift += HOLT_CORE_USB_SLOT_TD_SIZE;
00003a  b289              UXTH     r1,r1
                  |L17.60|
00003c  1c52              ADDS     r2,r2,#1
00003e  b2d2              UXTB     r2,r2                 ;333
000040  2a08              CMP      r2,#8                 ;333
000042  d3ed              BCC      |L17.32|
;;;342    			}
;;;343    
;;;344    		*(_pPacket->data + shift + 0 ) = 0; // 0x01 - unknown data type ????
000044  5444              STRB     r4,[r0,r1]
;;;345    		*(_pPacket->data + shift + 1 ) = *(_pPacket->data + shift + 0 ) ? 1 : 0;
000046  2200              MOVS     r2,#0
000048  4408              ADD      r0,r0,r1
00004a  1c89              ADDS     r1,r1,#2
00004c  7042              STRB     r2,[r0,#1]
00004e  6119              STR      r1,[r3,#0x10]
;;;346    
;;;347    		_pPacket->size = shift + 2;
;;;348    		}
;;;349    	}
000050  bdf0              POP      {r4-r7,pc}
                  |L17.82|
000052  225a              MOVS     r2,#0x5a              ;317
000054  7042              STRB     r2,[r0,#1]            ;317
000056  f8911184          LDRB     r1,[r1,#0x184]        ;319  ; arinc
00005a  2201              MOVS     r2,#1                 ;319
00005c  eb020141          ADD      r1,r2,r1,LSL #1       ;319
000060  0e0a              LSRS     r2,r1,#24             ;320
000062  7142              STRB     r2,[r0,#5]            ;320
000064  0c0a              LSRS     r2,r1,#16             ;320
000066  7102              STRB     r2,[r0,#4]            ;320
000068  0a0a              LSRS     r2,r1,#8              ;320
00006a  70c2              STRB     r2,[r0,#3]            ;320
00006c  7081              STRB     r1,[r0,#2]            ;320
00006e  7184              STRB     r4,[r0,#6]            ;322
000070  2100              MOVS     r1,#0                 ;323
000072  71c1              STRB     r1,[r0,#7]            ;323
000074  2008              MOVS     r0,#8                 ;325
000076  6118              STR      r0,[r3,#0x10]         ;325
000078  bdf0              POP      {r4-r7,pc}
;;;350    
                          ENDP

00007a  0000              DCW      0x0000
                  |L17.124|
                          DCD      ||.bss||+0x4000
                  |L17.128|
                          DCD      arinc+0x2000
                  |L17.132|
                          DCD      arinc

                          AREA ||i.USB_CORE_FillFatPacket||, CODE, READONLY, ALIGN=2

                  USB_CORE_FillFatPacket PROC
;;;365    tdFileNode *pCurrentFile;
;;;366    void USB_CORE_FillFatPacket(tdData *_pPacket)
000000  b5f0              PUSH     {r4-r7,lr}
;;;367    	{
;;;368    	// FAT
;;;369    	uint16_t slot;
;;;370    	uint16_t byteShift;
;;;371    	uint8_t transmitionEnd = 0;
;;;372    
;;;373    	if( FAT.filesAmount && pCurrentFile != NULL )
000002  4e32              LDR      r6,|L18.204|
000004  4932              LDR      r1,|L18.208|
000006  2500              MOVS     r5,#0                 ;371
000008  6832              LDR      r2,[r6,#0]            ;367  ; FAT
00000a  b3b2              CBZ      r2,|L18.122|
00000c  684a              LDR      r2,[r1,#4]  ; pCurrentFile
00000e  b3a2              CBZ      r2,|L18.122|
;;;374    		{
;;;375    		byteShift = 0;
000010  2400              MOVS     r4,#0
;;;376    		for( slot = 0; slot < USB_CORE_0x1E_SLOTS_IN_TRANSMISSION; slot++ )
000012  4623              MOV      r3,r4
                  |L18.20|
;;;377    			{
;;;378    			MWN_M_setValue32ToBuffer(pCurrentFile->fileNum,      _pPacket->data, byteShift + 0);
000014  6812              LDR      r2,[r2,#0]
000016  0e17              LSRS     r7,r2,#24
000018  1902              ADDS     r2,r0,r4
00001a  70d7              STRB     r7,[r2,#3]
00001c  684f              LDR      r7,[r1,#4]  ; pCurrentFile
00001e  683f              LDR      r7,[r7,#0]
000020  0c3f              LSRS     r7,r7,#16
000022  7097              STRB     r7,[r2,#2]
000024  684f              LDR      r7,[r1,#4]  ; pCurrentFile
000026  883f              LDRH     r7,[r7,#0]
000028  0a3f              LSRS     r7,r7,#8
00002a  7057              STRB     r7,[r2,#1]
00002c  684f              LDR      r7,[r1,#4]  ; pCurrentFile
00002e  783f              LDRB     r7,[r7,#0]
000030  5507              STRB     r7,[r0,r4]
;;;379    			MWN_M_setValue32ToBuffer(pCurrentFile->addressStart, _pPacket->data, byteShift + 4);
000032  684f              LDR      r7,[r1,#4]  ; pCurrentFile
000034  687f              LDR      r7,[r7,#4]
000036  0e3f              LSRS     r7,r7,#24
000038  71d7              STRB     r7,[r2,#7]
00003a  684f              LDR      r7,[r1,#4]  ; pCurrentFile
00003c  687f              LDR      r7,[r7,#4]
00003e  0c3f              LSRS     r7,r7,#16
000040  7197              STRB     r7,[r2,#6]
000042  684f              LDR      r7,[r1,#4]  ; pCurrentFile
000044  88bf              LDRH     r7,[r7,#4]
000046  0a3f              LSRS     r7,r7,#8
000048  7157              STRB     r7,[r2,#5]
00004a  684f              LDR      r7,[r1,#4]  ; pCurrentFile
00004c  793f              LDRB     r7,[r7,#4]
00004e  7117              STRB     r7,[r2,#4]
;;;380    			MWN_M_setValue32ToBuffer(pCurrentFile->addressEnd,   _pPacket->data, byteShift + 8);
000050  684f              LDR      r7,[r1,#4]  ; pCurrentFile
000052  68bf              LDR      r7,[r7,#8]
000054  0e3f              LSRS     r7,r7,#24
000056  72d7              STRB     r7,[r2,#0xb]
000058  684f              LDR      r7,[r1,#4]  ; pCurrentFile
00005a  68bf              LDR      r7,[r7,#8]
00005c  0c3f              LSRS     r7,r7,#16
00005e  7297              STRB     r7,[r2,#0xa]
000060  684f              LDR      r7,[r1,#4]  ; pCurrentFile
000062  893f              LDRH     r7,[r7,#8]
000064  0a3f              LSRS     r7,r7,#8
000066  7257              STRB     r7,[r2,#9]
000068  684f              LDR      r7,[r1,#4]  ; pCurrentFile
00006a  7a3f              LDRB     r7,[r7,#8]
00006c  7217              STRB     r7,[r2,#8]
;;;381    
;;;382    			if( pCurrentFile == FAT.pLastFile ) // In upper code we sent last file. Considering thet we hawe "ring FAT" and that we don't want to trap in infinite loop...
00006e  68b2              LDR      r2,[r6,#8]  ; FAT
000070  684f              LDR      r7,[r1,#4]  ; pCurrentFile
000072  42ba              CMP      r2,r7
000074  d102              BNE      |L18.124|
;;;383    				{
;;;384    				transmitionEnd = 1;
000076  2501              MOVS     r5,#1
;;;385    				break;
000078  e009              B        |L18.142|
                  |L18.122|
00007a  e00b              B        |L18.148|
                  |L18.124|
;;;386    				}
;;;387    
;;;388    			pCurrentFile = pCurrentFile->pPreviousFile;
00007c  697a              LDR      r2,[r7,#0x14]
;;;389    
;;;390    			if( pCurrentFile == NULL )
00007e  604a              STR      r2,[r1,#4]  ; pCurrentFile
000080  b12a              CBZ      r2,|L18.142|
000082  340c              ADDS     r4,r4,#0xc
;;;391    				break;
;;;392    
;;;393    			byteShift += 12;
000084  1c5b              ADDS     r3,r3,#1
000086  b29b              UXTH     r3,r3                 ;376
000088  b2a4              UXTH     r4,r4
00008a  2b10              CMP      r3,#0x10              ;376
00008c  d3c2              BCC      |L18.20|
                  |L18.142|
00008e  1c5b              ADDS     r3,r3,#1              ;376
;;;394    			}
;;;395    
;;;396    		slot += 1; // because slot will show amount(size)
000090  b29a              UXTH     r2,r3
000092  e001              B        |L18.152|
                  |L18.148|
;;;397    		}
;;;398    	else
;;;399    		{
;;;400    		transmitionEnd = 1;	
000094  2501              MOVS     r5,#1
;;;401    		slot = 0;
000096  2200              MOVS     r2,#0
                  |L18.152|
;;;402    		}
;;;403    
;;;404    	MWN_M_setValue8ToBuffer(0x2B,   _pPacket->data, USB_CORE_0x1E_PACKET_SERVICE_SHIFT + 0);
000098  232b              MOVS     r3,#0x2b
00009a  f88030c0          STRB     r3,[r0,#0xc0]
;;;405    
;;;406    	if( (pCurrentFile == FAT.pLastFile && transmitionEnd == 1) || pCurrentFile == NULL )
00009e  68b4              LDR      r4,[r6,#8]  ; FAT
0000a0  6849              LDR      r1,[r1,#4]  ; pCurrentFile
0000a2  2300              MOVS     r3,#0
0000a4  428c              CMP      r4,r1
0000a6  d100              BNE      |L18.170|
0000a8  b955              CBNZ     r5,|L18.192|
                  |L18.170|
0000aa  b149              CBZ      r1,|L18.192|
;;;407    		{
;;;408    		//NT
;;;409    		MWN_M_setValue8ToBuffer(0x00, _pPacket->data, USB_CORE_0x1E_PACKET_SERVICE_SHIFT + 1);
;;;410    		//CF
;;;411    		MWN_M_setValue8ToBuffer(slot, _pPacket->data, USB_CORE_0x1E_PACKET_SERVICE_SHIFT + 2);
;;;412    		}
;;;413    	else
;;;414    		{
;;;415    		MWN_M_setValue8ToBuffer(0x01, _pPacket->data, USB_CORE_0x1E_PACKET_SERVICE_SHIFT + 1);
0000ac  2101              MOVS     r1,#1
0000ae  f88010c1          STRB     r1,[r0,#0xc1]
;;;416    		MWN_M_setValue8ToBuffer(0x00, _pPacket->data, USB_CORE_0x1E_PACKET_SERVICE_SHIFT + 2);
0000b2  f88030c2          STRB     r3,[r0,#0xc2]
                  |L18.182|
;;;417    		}
;;;418    
;;;419    	_pPacket->size = USB_CORE_0x1E_PACKET_SIZE;
0000b6  f5005080          ADD      r0,r0,#0x1000
0000ba  21c5              MOVS     r1,#0xc5
;;;420    	};
0000bc  6101              STR      r1,[r0,#0x10]
0000be  bdf0              POP      {r4-r7,pc}
                  |L18.192|
0000c0  f88030c1          STRB     r3,[r0,#0xc1]         ;409
0000c4  f88020c2          STRB     r2,[r0,#0xc2]         ;411
0000c8  e7f5              B        |L18.182|
;;;421    
                          ENDP

0000ca  0000              DCW      0x0000
                  |L18.204|
                          DCD      ||FAT||
                  |L18.208|
                          DCD      ||.data||

                          AREA ||i.USB_CORE_FillSmdPacket||, CODE, READONLY, ALIGN=2

                  USB_CORE_FillSmdPacket PROC
;;;144    
;;;145    void USB_CORE_FillSmdPacket(tdData *_pPacket)
000000  b570              PUSH     {r4-r6,lr}
;;;146    	{
;;;147    	FILE_SYSTEM_readPage_( packetManeger.packet.currentPacket, _pPacket->data, USB_CORE_PAGE_SMD_DATA_SIZE);
000002  4d0f              LDR      r5,|L19.64|
000004  4604              MOV      r4,r0                 ;146
000006  f44f5280          MOV      r2,#0x1000
00000a  4621              MOV      r1,r4
00000c  6828              LDR      r0,[r5,#0]  ; packetManeger
00000e  f7fffffe          BL       FILE_SYSTEM_readPage_
;;;148    
;;;149    	MWN_M_setValue8ToBuffer(0x09, _pPacket->data, USB_CORE_PAGE_SMD_DATA_SIZE + 0);
000012  f5045480          ADD      r4,r4,#0x1000
000016  2009              MOVS     r0,#9
000018  7020              STRB     r0,[r4,#0]
;;;150    	MWN_M_setValue32ToBuffer(packetManeger.packet.currentPacket, _pPacket->data, USB_CORE_PAGE_SMD_DATA_SIZE + 1);
00001a  6828              LDR      r0,[r5,#0]  ; packetManeger
00001c  0e00              LSRS     r0,r0,#24
00001e  7120              STRB     r0,[r4,#4]
000020  6828              LDR      r0,[r5,#0]  ; packetManeger
000022  0c00              LSRS     r0,r0,#16
000024  70e0              STRB     r0,[r4,#3]
000026  8828              LDRH     r0,[r5,#0]  ; packetManeger
000028  0a00              LSRS     r0,r0,#8
00002a  70a0              STRB     r0,[r4,#2]
00002c  7828              LDRB     r0,[r5,#0]  ; packetManeger
00002e  7060              STRB     r0,[r4,#1]
;;;151    
;;;152    	#warning: "implement wrong address"
;;;153    	*(_pPacket->data + USB_CORE_PAGE_SMD_DATA_SIZE + 14 ) = 0; // wrong address
000030  2000              MOVS     r0,#0
000032  73a0              STRB     r0,[r4,#0xe]
;;;154    	*(_pPacket->data + USB_CORE_PAGE_SMD_DATA_SIZE + 15 ) = *(_pPacket->data + USB_CORE_PAGE_SMD_DATA_SIZE + 14 ) ? 1 : 0;
000034  73e0              STRB     r0,[r4,#0xf]
;;;155    
;;;156    	_pPacket->size = USB_CORE_FRAME_SMD_SIZE;
000036  f2410010          MOV      r0,#0x1010
00003a  6120              STR      r0,[r4,#0x10]
;;;157    	};
00003c  bd70              POP      {r4-r6,pc}
;;;158    
                          ENDP

00003e  0000              DCW      0x0000
                  |L19.64|
                          DCD      ||.bss||+0x4060

                          AREA ||i.USB_CORE_FillSsd||, CODE, READONLY, ALIGN=2

                  USB_CORE_FillSsd PROC
;;;468    uint32_t usbCore0x20endPage = 0;
;;;469    void USB_CORE_FillSsd(tdData *_pPacket)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;470    	{
;;;471    	uint32_t page;
;;;472    	uint32_t pagesToRead;
;;;473    	uint32_t pagesNeededToRead;
;;;474    	uint8_t *pData;
;;;475    
;;;476    	pagesNeededToRead = 1 + usbCore0x20endPage - packetManeger.packet.currentPage;
000004  4d1d              LDR      r5,|L20.124|
000006  491e              LDR      r1,|L20.128|
000008  4604              MOV      r4,r0                 ;470
00000a  6e68              LDR      r0,[r5,#0x64]  ; packetManeger
00000c  6809              LDR      r1,[r1,#0]  ; usbCore0x20endPage
00000e  1a0f              SUBS     r7,r1,r0
000010  1c7f              ADDS     r7,r7,#1
;;;477    	if( pagesNeededToRead < USB_CORE_0x20_SSD_IN_TRANSMISSION )
000012  2f12              CMP      r7,#0x12
000014  d300              BCC      |L20.24|
;;;478    		pagesToRead = pagesNeededToRead;
;;;479    	else
;;;480    		pagesToRead = USB_CORE_0x20_SSD_IN_TRANSMISSION;
000016  2712              MOVS     r7,#0x12
                  |L20.24|
;;;481    
;;;482    	pData = _pPacket->data;
000018  46a0              MOV      r8,r4
;;;483    	for( page = 0; page < pagesToRead; page++ )
00001a  2600              MOVS     r6,#0
00001c  e009              B        |L20.50|
                  |L20.30|
;;;484    		{
;;;485    		FILE_SYSTEM_readSparePage_( packetManeger.packet.currentPage, pData, USB_CORE_PAGE_SSD_DATA_SIZE);
00001e  22e0              MOVS     r2,#0xe0
000020  4641              MOV      r1,r8
000022  f7fffffe          BL       FILE_SYSTEM_readSparePage_
;;;486    
;;;487    		pData += USB_CORE_PAGE_SSD_DATA_SIZE;
;;;488    
;;;489    		packetManeger.packet.currentPage++;
000026  6e68              LDR      r0,[r5,#0x64]  ; packetManeger
000028  f10808e0          ADD      r8,r8,#0xe0           ;487
00002c  1c40              ADDS     r0,r0,#1
00002e  1c76              ADDS     r6,r6,#1
000030  6668              STR      r0,[r5,#0x64]  ; packetManeger
                  |L20.50|
000032  42be              CMP      r6,r7                 ;483
000034  d3f3              BCC      |L20.30|
;;;490    		}
;;;491    
;;;492    	MWN_M_setValue8ToBuffer(0x2D, _pPacket->data, USB_CORE_0x20_SERVICE_SHIFT + 0);
000036  202d              MOVS     r0,#0x2d
000038  f8840fc0          STRB     r0,[r4,#0xfc0]
;;;493    	MWN_M_setValue32ToBuffer( (packetManeger.packet.currentPage - 1), _pPacket->data, USB_CORE_0x20_SERVICE_SHIFT + 1);
00003c  f8550f64          LDR      r0,[r5,#0x64]!  ; packetManeger
000040  1e40              SUBS     r0,r0,#1
000042  0e00              LSRS     r0,r0,#24
000044  f8840fc4          STRB     r0,[r4,#0xfc4]
000048  6828              LDR      r0,[r5,#0]  ; packetManeger
00004a  1e40              SUBS     r0,r0,#1
00004c  0c00              LSRS     r0,r0,#16
00004e  f8840fc3          STRB     r0,[r4,#0xfc3]
000052  8828              LDRH     r0,[r5,#0]  ; packetManeger
000054  1e40              SUBS     r0,r0,#1
000056  0a00              LSRS     r0,r0,#8
000058  f8840fc2          STRB     r0,[r4,#0xfc2]
00005c  7828              LDRB     r0,[r5,#0]  ; packetManeger
00005e  1e40              SUBS     r0,r0,#1
000060  f8840fc1          STRB     r0,[r4,#0xfc1]
;;;494    
;;;495    	*(_pPacket->data + USB_CORE_0x20_SERVICE_SHIFT + 14 ) = 0;
000064  2000              MOVS     r0,#0
000066  f8840fce          STRB     r0,[r4,#0xfce]
;;;496    	*(_pPacket->data + USB_CORE_0x20_SERVICE_SHIFT + 15 ) = *(_pPacket->data + USB_CORE_0x20_SERVICE_SHIFT + 14 ) ? 1 : 0;
00006a  f8840fcf          STRB     r0,[r4,#0xfcf]
;;;497    
;;;498    	_pPacket->size = USB_CORE_0x20_PACKET_SIZE;
00006e  f5045480          ADD      r4,r4,#0x1000
000072  f44f607d          MOV      r0,#0xfd0
000076  6120              STR      r0,[r4,#0x10]
;;;499    	};
000078  e8bd81f0          POP      {r4-r8,pc}
;;;500    
                          ENDP

                  |L20.124|
                          DCD      ||.bss||+0x4000
                  |L20.128|
                          DCD      ||.data||

                          AREA ||i.USB_CORE_FillSsdPacket||, CODE, READONLY, ALIGN=2

                  USB_CORE_FillSsdPacket PROC
;;;443    
;;;444    void USB_CORE_FillSsdPacket(tdData *_pPacket)
000000  b570              PUSH     {r4-r6,lr}
;;;445    	{
;;;446    	FILE_SYSTEM_readSparePage_( packetManeger.packet.currentPacket, _pPacket->data, USB_CORE_PAGE_SSD_DATA_SIZE);
000002  4d0e              LDR      r5,|L21.60|
000004  4604              MOV      r4,r0                 ;445
000006  22e0              MOVS     r2,#0xe0
000008  4621              MOV      r1,r4
00000a  6828              LDR      r0,[r5,#0]  ; packetManeger
00000c  f7fffffe          BL       FILE_SYSTEM_readSparePage_
;;;447    
;;;448    	MWN_M_setValue8ToBuffer(0x2C, _pPacket->data, USB_CORE_PAGE_SSD_DATA_SIZE + 0);
000010  202c              MOVS     r0,#0x2c
000012  f8040fe0          STRB     r0,[r4,#0xe0]!
;;;449    	MWN_M_setValue32ToBuffer(packetManeger.packet.currentPacket, _pPacket->data, USB_CORE_PAGE_SSD_DATA_SIZE + 1);
000016  6828              LDR      r0,[r5,#0]  ; packetManeger
000018  0e00              LSRS     r0,r0,#24
00001a  f8040f04          STRB     r0,[r4,#4]!
00001e  6828              LDR      r0,[r5,#0]  ; packetManeger
000020  0c00              LSRS     r0,r0,#16
000022  f8040c01          STRB     r0,[r4,#-1]
000026  8828              LDRH     r0,[r5,#0]  ; packetManeger
000028  0a00              LSRS     r0,r0,#8
00002a  f8040c02          STRB     r0,[r4,#-2]
00002e  7828              LDRB     r0,[r5,#0]  ; packetManeger
000030  f8040c03          STRB     r0,[r4,#-3]
;;;450    
;;;451    	_pPacket->size = USB_CORE_FRAME_SSD_SIZE;
000034  20f0              MOVS     r0,#0xf0
000036  f8c40f2c          STR      r0,[r4,#0xf2c]
;;;452    	};
00003a  bd70              POP      {r4-r6,pc}
;;;453    
                          ENDP

                  |L21.60|
                          DCD      ||.bss||+0x4060

                          AREA ||i.USB_CORE_clearAllPackets||, CODE, READONLY, ALIGN=2

                  USB_CORE_clearAllPackets PROC
;;;568    
;;;569    void USB_CORE_clearAllPackets(void)
000000  f2440140          MOV      r1,#0x4040
;;;570    	{
;;;571    	memset( &packetManeger.packet.packet, 0x00, PACKET_STRUCTURE_MAX_SIZE * FRAMES_AMOUNT );
000004  4801              LDR      r0,|L22.12|
000006  f7ffbffe          B.W      __aeabi_memclr4
;;;572    	}
;;;573    
                          ENDP

00000a  0000              DCW      0x0000
                  |L22.12|
                          DCD      ||.bss||+0x4

                          AREA ||i.USB_CORE_clearPacket||, CODE, READONLY, ALIGN=1

                  USB_CORE_clearPacket PROC
;;;553    
;;;554    void USB_CORE_clearPacket(tdData *_pPacket, uint32_t _size)
000000  f2410210          MOV      r2,#0x1010
;;;555    	{
000004  b109              CBZ      r1,|L23.10|
;;;556    	if( _size == 0 || _size > PACKET_STRUCTURE_MAX_SIZE )
000006  4291              CMP      r1,r2
000008  d900              BLS      |L23.12|
                  |L23.10|
;;;557    		_size = PACKET_STRUCTURE_MAX_SIZE;
00000a  4611              MOV      r1,r2
                  |L23.12|
;;;558    
;;;559    	memset( _pPacket->data, 0x00, _size );
00000c  f7ffbffe          B.W      __aeabi_memclr4
;;;560    	}
;;;561    
                          ENDP


                          AREA ||i.USB_CORE_clearPacketIndex||, CODE, READONLY, ALIGN=2

                  USB_CORE_clearPacketIndex PROC
;;;561    
;;;562    void USB_CORE_clearPacketIndex(uint32_t _index, uint32_t _size)
000000  eb000280          ADD      r2,r0,r0,LSL #2
;;;563    	{
;;;564    	tdData *pPacket = &packetManeger.packet.packet[ _index ];
000004  eb022080          ADD      r0,r2,r0,LSL #10
000008  4a02              LDR      r2,|L24.20|
00000a  eb020080          ADD      r0,r2,r0,LSL #2
00000e  1d00              ADDS     r0,r0,#4
;;;565    
;;;566    	USB_CORE_clearPacket(pPacket, _size);
000010  f7ffbffe          B.W      USB_CORE_clearPacket
;;;567    	}
;;;568    
                          ENDP

                  |L24.20|
                          DCD      ||.bss||

                          AREA ||i.USB_CORE_getPacketToPrepare||, CODE, READONLY, ALIGN=2

                  USB_CORE_getPacketToPrepare PROC
;;;573    
;;;574    void USB_CORE_getPacketToPrepare(tdData **_pPacket)
000000  4907              LDR      r1,|L25.32|
;;;575    	{
;;;576    	*_pPacket = &packetManeger.packet.packet[ packetManeger.packet.pen % FRAMES_AMOUNT ];
000002  f8911054          LDRB     r1,[r1,#0x54]  ; packetManeger
000006  f0010103          AND      r1,r1,#3
00000a  eb010281          ADD      r2,r1,r1,LSL #2
00000e  eb022181          ADD      r1,r2,r1,LSL #10
000012  4a04              LDR      r2,|L25.36|
000014  eb020181          ADD      r1,r2,r1,LSL #2
000018  1d09              ADDS     r1,r1,#4
00001a  6001              STR      r1,[r0,#0]
;;;577    	}
00001c  4770              BX       lr
;;;578    
                          ENDP

00001e  0000              DCW      0x0000
                  |L25.32|
                          DCD      ||.bss||+0x4000
                  |L25.36|
                          DCD      ||.bss||

                          AREA ||i.USB_CORE_getPacketToSent||, CODE, READONLY, ALIGN=2

                  USB_CORE_getPacketToSent PROC
;;;578    
;;;579    void USB_CORE_getPacketToSent(tdData **_pPacket)
000000  4907              LDR      r1,|L26.32|
;;;580    	{
;;;581    	*_pPacket = &packetManeger.packet.packet[ packetManeger.packet.eye % FRAMES_AMOUNT ];
000002  f8911058          LDRB     r1,[r1,#0x58]  ; packetManeger
000006  f0010103          AND      r1,r1,#3
00000a  eb010281          ADD      r2,r1,r1,LSL #2
00000e  eb022181          ADD      r1,r2,r1,LSL #10
000012  4a04              LDR      r2,|L26.36|
000014  eb020181          ADD      r1,r2,r1,LSL #2
000018  1d09              ADDS     r1,r1,#4
00001a  6001              STR      r1,[r0,#0]
;;;582    	}
00001c  4770              BX       lr
;;;583    
                          ENDP

00001e  0000              DCW      0x0000
                  |L26.32|
                          DCD      ||.bss||+0x4000
                  |L26.36|
                          DCD      ||.bss||

                          AREA ||i.USB_CORE_init||, CODE, READONLY, ALIGN=2

                  USB_CORE_init PROC
;;;664    
;;;665    void USB_CORE_init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;666    	{
;;;667    	tdMapFunctionSettings settings;
;;;668    
;;;669    	MAP_init(&usbCoreAnswers);
000002  4861              LDR      r0,|L27.392|
000004  f7fffffe          BL       MAP_init
;;;670    
;;;671    	settings.clearPacket = USB_CORE_HANDLER_SETTINGS_PACKET_CLEAR_TRUE;
000008  2401              MOVS     r4,#1
00000a  f88d4000          STRB     r4,[sp,#0]
;;;672    	settings.preparePacket = USB_CORE_HANDLER_SETTINGS_PACKET_PREPARE_FALSE;
00000e  2500              MOVS     r5,#0
000010  f88d5001          STRB     r5,[sp,#1]
;;;673    	settings.sendPacket = USB_CORE_HANDLER_SETTINGS_PACKET_SEND_TRUE;
000014  f88d4002          STRB     r4,[sp,#2]
;;;674    	settings.usbSetLowPriority = USB_CORE_HANDLER_SETTINGS_SET_LOW_PRIORITY_FALSE;
000018  f88d5003          STRB     r5,[sp,#3]
;;;675    	MAP_add(&usbCoreAnswers, 0x01, USB_CORE_0x01, &settings);
00001c  466b              MOV      r3,sp
00001e  4a5b              LDR      r2,|L27.396|
000020  4621              MOV      r1,r4
000022  4859              LDR      r0,|L27.392|
000024  f7fffffe          BL       MAP_add
;;;676    
;;;677    	settings.clearPacket = USB_CORE_HANDLER_SETTINGS_PACKET_CLEAR_TRUE;
000028  f88d4000          STRB     r4,[sp,#0]
;;;678    	settings.preparePacket = USB_CORE_HANDLER_SETTINGS_PACKET_PREPARE_FALSE;
00002c  f88d5001          STRB     r5,[sp,#1]
;;;679    	settings.sendPacket = USB_CORE_HANDLER_SETTINGS_PACKET_SEND_TRUE;
000030  f88d4002          STRB     r4,[sp,#2]
;;;680    	settings.usbSetLowPriority = USB_CORE_HANDLER_SETTINGS_SET_LOW_PRIORITY_FALSE;
000034  f88d5003          STRB     r5,[sp,#3]
;;;681    	MAP_add(&usbCoreAnswers, 0x04, USB_CORE_0x04, &settings);
000038  466b              MOV      r3,sp
00003a  4a55              LDR      r2,|L27.400|
00003c  2104              MOVS     r1,#4
00003e  4852              LDR      r0,|L27.392|
000040  f7fffffe          BL       MAP_add
;;;682    
;;;683    	settings.clearPacket = USB_CORE_HANDLER_SETTINGS_PACKET_CLEAR_TRUE;
000044  f88d4000          STRB     r4,[sp,#0]
;;;684    	settings.preparePacket = USB_CORE_HANDLER_SETTINGS_PACKET_PREPARE_FALSE;
000048  f88d5001          STRB     r5,[sp,#1]
;;;685    	settings.sendPacket = USB_CORE_HANDLER_SETTINGS_PACKET_SEND_TRUE;
00004c  f88d4002          STRB     r4,[sp,#2]
;;;686    	settings.usbSetLowPriority = USB_CORE_HANDLER_SETTINGS_SET_LOW_PRIORITY_FALSE;
000050  f88d5003          STRB     r5,[sp,#3]
;;;687    	MAP_add(&usbCoreAnswers, 0x05, USB_CORE_0x05, &settings);
000054  466b              MOV      r3,sp
000056  4a4f              LDR      r2,|L27.404|
000058  2105              MOVS     r1,#5
00005a  484b              LDR      r0,|L27.392|
00005c  f7fffffe          BL       MAP_add
;;;688    
;;;689    	settings.clearPacket = USB_CORE_HANDLER_SETTINGS_PACKET_CLEAR_TRUE;
000060  f88d4000          STRB     r4,[sp,#0]
;;;690    	settings.preparePacket = USB_CORE_HANDLER_SETTINGS_PACKET_PREPARE_TRUE;
000064  f88d4001          STRB     r4,[sp,#1]
;;;691    	settings.sendPacket = USB_CORE_HANDLER_SETTINGS_PACKET_SEND_TRUE;
000068  f88d4002          STRB     r4,[sp,#2]
;;;692    	settings.usbSetLowPriority = USB_CORE_HANDLER_SETTINGS_SET_LOW_PRIORITY_FALSE;
00006c  f88d5003          STRB     r5,[sp,#3]
;;;693    	MAP_add(&usbCoreAnswers, 0x07, USB_CORE_0x07, &settings);
000070  466b              MOV      r3,sp
000072  4a49              LDR      r2,|L27.408|
000074  2107              MOVS     r1,#7
000076  4844              LDR      r0,|L27.392|
000078  f7fffffe          BL       MAP_add
;;;694    
;;;695    	settings.clearPacket = USB_CORE_HANDLER_SETTINGS_PACKET_CLEAR_TRUE;
00007c  f88d4000          STRB     r4,[sp,#0]
;;;696    	settings.preparePacket = USB_CORE_HANDLER_SETTINGS_PACKET_PREPARE_FALSE;
000080  f88d5001          STRB     r5,[sp,#1]
;;;697    	settings.sendPacket = USB_CORE_HANDLER_SETTINGS_PACKET_SEND_TRUE;
000084  f88d4002          STRB     r4,[sp,#2]
;;;698    	settings.usbSetLowPriority = USB_CORE_HANDLER_SETTINGS_SET_LOW_PRIORITY_FALSE;
000088  f88d5003          STRB     r5,[sp,#3]
;;;699    	MAP_add(&usbCoreAnswers, 0x08, USB_CORE_0x08, &settings);
00008c  466b              MOV      r3,sp
00008e  4a43              LDR      r2,|L27.412|
000090  2108              MOVS     r1,#8
000092  483d              LDR      r0,|L27.392|
000094  f7fffffe          BL       MAP_add
;;;700    
;;;701    	settings.clearPacket = USB_CORE_HANDLER_SETTINGS_PACKET_CLEAR_TRUE;
000098  f88d4000          STRB     r4,[sp,#0]
;;;702    	settings.preparePacket = USB_CORE_HANDLER_SETTINGS_PACKET_PREPARE_TRUE;
00009c  f88d4001          STRB     r4,[sp,#1]
;;;703    	settings.sendPacket = USB_CORE_HANDLER_SETTINGS_PACKET_SEND_TRUE;
0000a0  f88d4002          STRB     r4,[sp,#2]
;;;704    	settings.usbSetLowPriority = USB_CORE_HANDLER_SETTINGS_SET_LOW_PRIORITY_FALSE;
0000a4  f88d5003          STRB     r5,[sp,#3]
;;;705    	MAP_add(&usbCoreAnswers, 0x09, USB_CORE_0x09, &settings);
0000a8  466b              MOV      r3,sp
0000aa  4a3d              LDR      r2,|L27.416|
0000ac  2109              MOVS     r1,#9
0000ae  4836              LDR      r0,|L27.392|
0000b0  f7fffffe          BL       MAP_add
;;;706    
;;;707    	settings.clearPacket = USB_CORE_HANDLER_SETTINGS_PACKET_CLEAR_TRUE;
0000b4  f88d4000          STRB     r4,[sp,#0]
;;;708    	settings.preparePacket = USB_CORE_HANDLER_SETTINGS_PACKET_PREPARE_FALSE;
0000b8  f88d5001          STRB     r5,[sp,#1]
;;;709    	settings.sendPacket = USB_CORE_HANDLER_SETTINGS_PACKET_SEND_TRUE;
0000bc  f88d4002          STRB     r4,[sp,#2]
;;;710    	settings.usbSetLowPriority = USB_CORE_HANDLER_SETTINGS_SET_LOW_PRIORITY_TRUE;
0000c0  f88d4003          STRB     r4,[sp,#3]
;;;711    	MAP_add(&usbCoreAnswers, 0x27, USB_CORE_0x1A, &settings);
0000c4  466b              MOV      r3,sp
0000c6  4a37              LDR      r2,|L27.420|
0000c8  2127              MOVS     r1,#0x27
0000ca  482f              LDR      r0,|L27.392|
0000cc  f7fffffe          BL       MAP_add
;;;712    
;;;713    	settings.clearPacket = USB_CORE_HANDLER_SETTINGS_PACKET_CLEAR_TRUE;
0000d0  f88d4000          STRB     r4,[sp,#0]
;;;714    	settings.preparePacket = USB_CORE_HANDLER_SETTINGS_PACKET_PREPARE_TRUE;
0000d4  f88d4001          STRB     r4,[sp,#1]
;;;715    	settings.sendPacket = USB_CORE_HANDLER_SETTINGS_PACKET_SEND_TRUE;
0000d8  f88d4002          STRB     r4,[sp,#2]
;;;716    	settings.usbSetLowPriority = USB_CORE_HANDLER_SETTINGS_SET_LOW_PRIORITY_FALSE;
0000dc  f88d5003          STRB     r5,[sp,#3]
;;;717    	MAP_add(&usbCoreAnswers, 0x28, USB_CORE_0x1B, &settings);
0000e0  466b              MOV      r3,sp
0000e2  4a31              LDR      r2,|L27.424|
0000e4  2128              MOVS     r1,#0x28
0000e6  4828              LDR      r0,|L27.392|
0000e8  f7fffffe          BL       MAP_add
;;;718    
;;;719    	settings.clearPacket = USB_CORE_HANDLER_SETTINGS_PACKET_CLEAR_TRUE;
0000ec  f88d4000          STRB     r4,[sp,#0]
;;;720    	settings.preparePacket = USB_CORE_HANDLER_SETTINGS_PACKET_PREPARE_TRUE;
0000f0  f88d4001          STRB     r4,[sp,#1]
;;;721    	settings.sendPacket = USB_CORE_HANDLER_SETTINGS_PACKET_SEND_TRUE;
0000f4  f88d4002          STRB     r4,[sp,#2]
;;;722    	settings.usbSetLowPriority = USB_CORE_HANDLER_SETTINGS_SET_LOW_PRIORITY_TRUE;
0000f8  f88d4003          STRB     r4,[sp,#3]
;;;723    	MAP_add(&usbCoreAnswers, 0x29, USB_CORE_0x1C, &settings);
0000fc  466b              MOV      r3,sp
0000fe  4a2b              LDR      r2,|L27.428|
000100  2129              MOVS     r1,#0x29
000102  4821              LDR      r0,|L27.392|
000104  f7fffffe          BL       MAP_add
;;;724    
;;;725    	settings.clearPacket = USB_CORE_HANDLER_SETTINGS_PACKET_CLEAR_TRUE;
000108  f88d4000          STRB     r4,[sp,#0]
;;;726    	settings.preparePacket = USB_CORE_HANDLER_SETTINGS_PACKET_PREPARE_TRUE;
00010c  f88d4001          STRB     r4,[sp,#1]
;;;727    	settings.sendPacket = USB_CORE_HANDLER_SETTINGS_PACKET_SEND_TRUE;
000110  f88d4002          STRB     r4,[sp,#2]
;;;728    	settings.usbSetLowPriority = USB_CORE_HANDLER_SETTINGS_SET_LOW_PRIORITY_FALSE;
000114  f88d5003          STRB     r5,[sp,#3]
;;;729    	MAP_add(&usbCoreAnswers, 0x2A, USB_CORE_0x1D, &settings);
000118  466b              MOV      r3,sp
00011a  4a25              LDR      r2,|L27.432|
00011c  212a              MOVS     r1,#0x2a
00011e  481a              LDR      r0,|L27.392|
000120  f7fffffe          BL       MAP_add
;;;730    
;;;731    	settings.clearPacket = USB_CORE_HANDLER_SETTINGS_PACKET_CLEAR_TRUE;
000124  f88d4000          STRB     r4,[sp,#0]
;;;732    	settings.preparePacket = USB_CORE_HANDLER_SETTINGS_PACKET_PREPARE_TRUE;
000128  f88d4001          STRB     r4,[sp,#1]
;;;733    	settings.sendPacket = USB_CORE_HANDLER_SETTINGS_PACKET_SEND_TRUE;
00012c  f88d4002          STRB     r4,[sp,#2]
;;;734    	settings.usbSetLowPriority = USB_CORE_HANDLER_SETTINGS_SET_LOW_PRIORITY_FALSE;
000130  f88d5003          STRB     r5,[sp,#3]
;;;735    	MAP_add(&usbCoreAnswers, 0x2B, USB_CORE_0x1E, &settings);
000134  466b              MOV      r3,sp
000136  4a1f              LDR      r2,|L27.436|
000138  212b              MOVS     r1,#0x2b
00013a  4813              LDR      r0,|L27.392|
00013c  f7fffffe          BL       MAP_add
;;;736    
;;;737    	settings.clearPacket = USB_CORE_HANDLER_SETTINGS_PACKET_CLEAR_TRUE;
000140  f88d4000          STRB     r4,[sp,#0]
;;;738    	settings.preparePacket = USB_CORE_HANDLER_SETTINGS_PACKET_PREPARE_TRUE;
000144  f88d4001          STRB     r4,[sp,#1]
;;;739    	settings.sendPacket = USB_CORE_HANDLER_SETTINGS_PACKET_SEND_TRUE;
000148  f88d4002          STRB     r4,[sp,#2]
;;;740    	settings.usbSetLowPriority = USB_CORE_HANDLER_SETTINGS_SET_LOW_PRIORITY_FALSE;
00014c  f88d5003          STRB     r5,[sp,#3]
;;;741    	MAP_add(&usbCoreAnswers, 0x2C, USB_CORE_0x1F, &settings);
000150  466b              MOV      r3,sp
000152  4a19              LDR      r2,|L27.440|
000154  212c              MOVS     r1,#0x2c
000156  480c              LDR      r0,|L27.392|
000158  f7fffffe          BL       MAP_add
;;;742    
;;;743    	settings.clearPacket = USB_CORE_HANDLER_SETTINGS_PACKET_CLEAR_TRUE;
00015c  f88d4000          STRB     r4,[sp,#0]
;;;744    	settings.preparePacket = USB_CORE_HANDLER_SETTINGS_PACKET_PREPARE_TRUE;
000160  f88d4001          STRB     r4,[sp,#1]
;;;745    	settings.sendPacket = USB_CORE_HANDLER_SETTINGS_PACKET_SEND_TRUE;
000164  f88d4002          STRB     r4,[sp,#2]
;;;746    	settings.usbSetLowPriority = USB_CORE_HANDLER_SETTINGS_SET_LOW_PRIORITY_FALSE;
000168  f88d5003          STRB     r5,[sp,#3]
;;;747    	MAP_add(&usbCoreAnswers, 0x2D, USB_CORE_0x20, &settings);
00016c  466b              MOV      r3,sp
00016e  4a13              LDR      r2,|L27.444|
000170  212d              MOVS     r1,#0x2d
000172  4805              LDR      r0,|L27.392|
000174  f7fffffe          BL       MAP_add
;;;748    
;;;749    	settings.clearPacket = USB_CORE_HANDLER_SETTINGS_PACKET_CLEAR_FALSE;
;;;750    	settings.preparePacket = USB_CORE_HANDLER_SETTINGS_PACKET_PREPARE_FALSE;
;;;751    	settings.sendPacket = USB_CORE_HANDLER_SETTINGS_PACKET_SEND_FALSE;
;;;752    	settings.usbSetLowPriority = USB_CORE_HANDLER_SETTINGS_SET_LOW_PRIORITY_FALSE;
;;;753    	MAP_add(&usbCoreAnswers, 0xFE, USB_CORE_0xFE, &settings);
000178  466b              MOV      r3,sp
00017a  4a11              LDR      r2,|L27.448|
00017c  21fe              MOVS     r1,#0xfe
00017e  4802              LDR      r0,|L27.392|
000180  9500              STR      r5,[sp,#0]
000182  f7fffffe          BL       MAP_add
;;;754    	}
000186  bd38              POP      {r3-r5,pc}
;;;755    
                          ENDP

                  |L27.392|
                          DCD      ||.bss||+0x406c
                  |L27.396|
                          DCD      USB_CORE_0x01
                  |L27.400|
                          DCD      USB_CORE_0x04
                  |L27.404|
                          DCD      USB_CORE_0x05
                  |L27.408|
                          DCD      USB_CORE_0x07
                  |L27.412|
                          DCD      USB_CORE_0x08
                  |L27.416|
                          DCD      USB_CORE_0x09
                  |L27.420|
                          DCD      USB_CORE_0x1A
                  |L27.424|
                          DCD      USB_CORE_0x1B
                  |L27.428|
                          DCD      USB_CORE_0x1C
                  |L27.432|
                          DCD      USB_CORE_0x1D
                  |L27.436|
                          DCD      USB_CORE_0x1E
                  |L27.440|
                          DCD      USB_CORE_0x1F
                  |L27.444|
                          DCD      USB_CORE_0x20
                  |L27.448|
                          DCD      USB_CORE_0xFE

                          AREA ||i.USB_CORE_initPacketManeger||, CODE, READONLY, ALIGN=2

                  USB_CORE_initPacketManeger PROC
;;;543    
;;;544    void USB_CORE_initPacketManeger(void)
000000  4806              LDR      r0,|L28.28|
;;;545    	{
;;;546    	packetManeger.pDataFactory = NULL;
000002  2100              MOVS     r1,#0
;;;547    	packetManeger.packet.pen = 0;
;;;548    	packetManeger.packet.eye = 0;
;;;549    	packetManeger.packet.packetsToSent = 1; // if not so function will calculate required value
000004  2201              MOVS     r2,#1
000006  6001              STR      r1,[r0,#0]            ;547  ; packetManeger
000008  f5004080          ADD      r0,r0,#0x4000         ;547
00000c  6541              STR      r1,[r0,#0x54]  ; packetManeger
00000e  e9c01216          STRD     r1,r2,[r0,#0x58]
;;;550    	packetManeger.packet.currentPacket = 0;
;;;551    	USB_CORE_clearPacketIndex( 0 , 0 );
000012  6601              STR      r1,[r0,#0x60]  ; packetManeger
000014  4608              MOV      r0,r1
000016  f7ffbffe          B.W      USB_CORE_clearPacketIndex
;;;552    	}
;;;553    
                          ENDP

00001a  0000              DCW      0x0000
                  |L28.28|
                          DCD      ||.bss||

                          AREA ||i.USB_CORE_prepareNextPacket||, CODE, READONLY, ALIGN=2

                  USB_CORE_prepareNextPacket PROC
;;;583    
;;;584    void USB_CORE_prepareNextPacket(void)
000000  b538              PUSH     {r3-r5,lr}
;;;585    	{
;;;586    	tdData *pPacket;
;;;587    
;;;588    	if( packetManeger.pDataFactory != NULL )
000002  4c0c              LDR      r4,|L29.52|
000004  6820              LDR      r0,[r4,#0]            ;585  ; packetManeger
000006  2800              CMP      r0,#0                 ;585
000008  d013              BEQ      |L29.50|
;;;589    		{
;;;590    		USB_CORE_getPacketToPrepare( &pPacket );
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       USB_CORE_getPacketToPrepare
;;;591    
;;;592    		USB_CORE_clearPacket( pPacket, pPacket->size );
000010  9800              LDR      r0,[sp,#0]
000012  f2410110          MOV      r1,#0x1010
000016  5809              LDR      r1,[r1,r0]
000018  f7fffffe          BL       USB_CORE_clearPacket
;;;593    
;;;594    		packetManeger.pDataFactory( pPacket );
00001c  6821              LDR      r1,[r4,#0]  ; packetManeger
00001e  9800              LDR      r0,[sp,#0]
000020  4788              BLX      r1
;;;595    
;;;596    		packetManeger.packet.currentPacket++;
000022  f5044080          ADD      r0,r4,#0x4000
000026  6e01              LDR      r1,[r0,#0x60]  ; packetManeger
000028  1c49              ADDS     r1,r1,#1
;;;597    		packetManeger.packet.pen++;
00002a  6601              STR      r1,[r0,#0x60]  ; packetManeger
00002c  6d41              LDR      r1,[r0,#0x54]  ; packetManeger
00002e  1c49              ADDS     r1,r1,#1
000030  6541              STR      r1,[r0,#0x54]  ; packetManeger
                  |L29.50|
;;;598    		}
;;;599    	}
000032  bd38              POP      {r3-r5,pc}
;;;600    
                          ENDP

                  |L29.52|
                          DCD      ||.bss||

                          AREA ||i.USB_CORE_requestHandler||, CODE, READONLY, ALIGN=2

                  USB_CORE_requestHandler PROC
;;;600    
;;;601    void USB_CORE_requestHandler(uint8_t *_buf, uint32_t *_len)
000000  b53e              PUSH     {r1-r5,lr}
;;;602    	{
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;603    	tdMapHandler handler;
;;;604    
;;;605    	MAP_getElement( _buf[ 0 ], &handler, &usbCoreAnswers );
000006  7800              LDRB     r0,[r0,#0]
000008  4a15              LDR      r2,|L30.96|
00000a  4669              MOV      r1,sp
00000c  f7fffffe          BL       MAP_getElement
;;;606    
;;;607    	if( handler.function == NULL )
000010  9801              LDR      r0,[sp,#4]
000012  2800              CMP      r0,#0
000014  d023              BEQ      |L30.94|
;;;608    		return;
;;;609    
;;;610    	if( handler.settings.usbSetLowPriority == USB_CORE_HANDLER_SETTINGS_SET_LOW_PRIORITY_TRUE )
000016  f89d000b          LDRB     r0,[sp,#0xb]
00001a  2801              CMP      r0,#1
00001c  d109              BNE      |L30.50|
;;;611    		{
;;;612    		packetManeger.usbSetHighPriority = 1;
00001e  4810              LDR      r0,|L30.96|
000020  2101              MOVS     r1,#1
000022  386c              SUBS     r0,r0,#0x6c
;;;613    		HAL_NVIC_SetPriority(OTG_HS_IRQn, 3, 3);
000024  2203              MOVS     r2,#3
000026  f8801068          STRB     r1,[r0,#0x68]         ;612
00002a  4611              MOV      r1,r2
00002c  204d              MOVS     r0,#0x4d
00002e  f7fffffe          BL       HAL_NVIC_SetPriority
                  |L30.50|
;;;614    		}
;;;615    
;;;616    	if( handler.settings.clearPacket == USB_CORE_HANDLER_SETTINGS_PACKET_CLEAR_TRUE )
000032  f89d0008          LDRB     r0,[sp,#8]
000036  2801              CMP      r0,#1
000038  d101              BNE      |L30.62|
;;;617    		{
;;;618    		USB_CORE_initPacketManeger();
00003a  f7fffffe          BL       USB_CORE_initPacketManeger
                  |L30.62|
;;;619    		}
;;;620    
;;;621    	handler.function(_buf, _len);
00003e  9a01              LDR      r2,[sp,#4]
000040  4629              MOV      r1,r5
000042  4620              MOV      r0,r4
000044  4790              BLX      r2
;;;622    
;;;623    	if( handler.settings.preparePacket == USB_CORE_HANDLER_SETTINGS_PACKET_PREPARE_TRUE )
000046  f89d0009          LDRB     r0,[sp,#9]
00004a  2801              CMP      r0,#1
00004c  d101              BNE      |L30.82|
;;;624    		{
;;;625    		USB_CORE_prepareNextPacket();
00004e  f7fffffe          BL       USB_CORE_prepareNextPacket
                  |L30.82|
;;;626    		}
;;;627    
;;;628    	if( handler.settings.sendPacket == USB_CORE_HANDLER_SETTINGS_PACKET_SEND_TRUE )
000052  f89d000a          LDRB     r0,[sp,#0xa]
000056  2801              CMP      r0,#1
000058  d101              BNE      |L30.94|
;;;629    		{
;;;630    		USB_CORE_sendPacket();
00005a  f7fffffe          BL       USB_CORE_sendPacket
                  |L30.94|
;;;631    		}
;;;632    
;;;633    	}
00005e  bd3e              POP      {r1-r5,pc}
;;;634    
                          ENDP

                  |L30.96|
                          DCD      ||.bss||+0x406c

                          AREA ||i.USB_CORE_sendPacket||, CODE, READONLY, ALIGN=2

                  USB_CORE_sendPacket PROC
;;;634    
;;;635    void USB_CORE_sendPacket(void)
000000  b538              PUSH     {r3-r5,lr}
;;;636    	{
;;;637    	tdData *packet;
;;;638    
;;;639    	if( packetManeger.packet.packetsToSent == 0 )
000002  4c13              LDR      r4,|L31.80|
000004  6de0              LDR      r0,[r4,#0x5c]         ;636  ; packetManeger
000006  2800              CMP      r0,#0                 ;636
000008  d016              BEQ      |L31.56|
;;;640    		return;
;;;641    
;;;642    	USB_CORE_getPacketToSent(&packet);
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       USB_CORE_getPacketToSent
;;;643    
;;;644    	if( packet->data == NULL || packet->size == 0 )
000010  9800              LDR      r0,[sp,#0]
000012  2800              CMP      r0,#0
000014  d010              BEQ      |L31.56|
000016  f2410110          MOV      r1,#0x1010
00001a  5809              LDR      r1,[r1,r0]
00001c  2900              CMP      r1,#0
00001e  d00b              BEQ      |L31.56|
;;;645    		return;
;;;646    
;;;647    	CDC_Transmit_HS(packet->data, packet->size);
000020  b289              UXTH     r1,r1
000022  f7fffffe          BL       CDC_Transmit_HS
;;;648    
;;;649    	packetManeger.packet.eye++;
000026  6da0              LDR      r0,[r4,#0x58]  ; packetManeger
000028  1c40              ADDS     r0,r0,#1
;;;650    	packetManeger.packet.packetsToSent--;
00002a  65a0              STR      r0,[r4,#0x58]  ; packetManeger
00002c  6de0              LDR      r0,[r4,#0x5c]  ; packetManeger
00002e  1e40              SUBS     r0,r0,#1
;;;651    
;;;652    	if( packetManeger.packet.packetsToSent != 0 )
000030  65e0              STR      r0,[r4,#0x5c]  ; packetManeger
000032  d002              BEQ      |L31.58|
;;;653    		{
;;;654    		USB_CORE_prepareNextPacket();
000034  f7fffffe          BL       USB_CORE_prepareNextPacket
                  |L31.56|
;;;655    		}
;;;656    	else
;;;657    		{
;;;658    		if( packetManeger.usbSetHighPriority == 1 )
;;;659    			{
;;;660    			HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
;;;661    			}
;;;662    		}
;;;663    	}
000038  bd38              POP      {r3-r5,pc}
                  |L31.58|
00003a  f8940068          LDRB     r0,[r4,#0x68]         ;658  ; packetManeger
00003e  2801              CMP      r0,#1                 ;658
000040  d1fa              BNE      |L31.56|
000042  2200              MOVS     r2,#0                 ;660
000044  4611              MOV      r1,r2                 ;660
000046  204d              MOVS     r0,#0x4d              ;660
000048  f7fffffe          BL       HAL_NVIC_SetPriority
00004c  bd38              POP      {r3-r5,pc}
;;;664    
                          ENDP

00004e  0000              DCW      0x0000
                  |L31.80|
                          DCD      ||.bss||+0x4000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  packetManeger
                          %        16492
                  usbCoreAnswers
                          %        388

                          AREA ||.data||, DATA, ALIGN=2

                  usbCore0x20endPage
                          DCD      0x00000000
                  pCurrentFile
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Src\\core\\usbCore.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_usbCore_c_f46014af____REV16|
#line 129 "..\\..\\Drivers\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_usbCore_c_f46014af____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_usbCore_c_f46014af____REVSH|
#line 144
|__asm___9_usbCore_c_f46014af____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
