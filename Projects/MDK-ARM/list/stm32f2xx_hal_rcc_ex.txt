; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o"bhd2 configuration\stm32f2xx_hal_rcc_ex.o" --asm_dir=.\list\ --list_dir=.\list\ --depend="bhd2 configuration\stm32f2xx_hal_rcc_ex.d" --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\..\Drivers\CMSIS\Device\ST\STM32F2xx\Include -I..\..\Drivers\CMSIS\Include -I..\..\Middlewares\ST\STM32_USB_Device_Library\Class\CDC\Inc -I..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc -I..\..\Drivers\STM32F2xx_HAL_Driver\Inc -I..\..\Inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_HAL_DRIVER -DSTM32F215xx --omf_browse="bhd2 configuration\stm32f2xx_hal_rcc_ex.crf" ..\..\Drivers\STM32F2xx_HAL_Driver\Src\stm32f2xx_hal_rcc_ex.c]
                          THUMB

                          AREA ||i.HAL_RCCEx_GetPeriphCLKConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_GetPeriphCLKConfig PROC
;;;206      */
;;;207    void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
000000  4a12              LDR      r2,|L1.76|
;;;208    {
;;;209      uint32_t tempreg;
;;;210      
;;;211      /* Set all possible values for the extended clock type parameter------------*/
;;;212      PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
000002  2109              MOVS     r1,#9
;;;213      
;;;214      /* Get the PLLI2S Clock configuration -----------------------------------------------*/
;;;215      PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
000004  6001              STR      r1,[r0,#0]
000006  6811              LDR      r1,[r2,#0]
000008  f64773c0          MOV      r3,#0x7fc0
00000c  4019              ANDS     r1,r1,r3
00000e  fa93f3a3          RBIT     r3,r3
000012  fab3f383          CLZ      r3,r3
000016  40d9              LSRS     r1,r1,r3
;;;216      PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
000018  6041              STR      r1,[r0,#4]
00001a  6811              LDR      r1,[r2,#0]
00001c  f04f42e0          MOV      r2,#0x70000000
000020  fa92f2a2          RBIT     r2,r2
000024  f00141e0          AND      r1,r1,#0x70000000
000028  fab2f282          CLZ      r2,r2
00002c  40d1              LSRS     r1,r1,r2
;;;217      
;;;218      /* Get the RTC Clock configuration -----------------------------------------------*/
;;;219      tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
00002e  6081              STR      r1,[r0,#8]
000030  4906              LDR      r1,|L1.76|
000032  397c              SUBS     r1,r1,#0x7c
000034  6809              LDR      r1,[r1,#0]
;;;220      PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
000036  4a05              LDR      r2,|L1.76|
000038  f40111f8          AND      r1,r1,#0x1f0000       ;219
00003c  3a14              SUBS     r2,r2,#0x14
00003e  6812              LDR      r2,[r2,#0]
000040  f4027240          AND      r2,r2,#0x300
000044  430a              ORRS     r2,r2,r1
000046  60c2              STR      r2,[r0,#0xc]
;;;221      
;;;222    }
000048  4770              BX       lr
;;;223    /**
                          ENDP

00004a  0000              DCW      0x0000
                  |L1.76|
                          DCD      0x40023884

                          AREA ||i.HAL_RCCEx_PeriphCLKConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_PeriphCLKConfig PROC
;;;98       */
;;;99     HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;100    {
000004  4604              MOV      r4,r0
;;;101      uint32_t timeout = 0;
;;;102      uint32_t tmpreg = 0;
;;;103        
;;;104      /* Check the parameters */
;;;105      assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
;;;106      
;;;107      /*---------------------------- I2S configuration -------------------------------*/      
;;;108      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
000006  7800              LDRB     r0,[r0,#0]
000008  f04f0900          MOV      r9,#0
00000c  07c0              LSLS     r0,r0,#31
;;;109      {
;;;110        /* check for Parameters */
;;;111        assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
;;;112        assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
;;;113          
;;;114        /* Disable the PLLI2S */
;;;115        __HAL_RCC_PLLI2S_DISABLE();    
;;;116        /* Get new Timeout value */
;;;117        timeout = HAL_GetTick() + PLLI2S_TIMEOUT_VALUE;
;;;118        /* Wait till PLLI2S is disabled */
;;;119        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
;;;120        {
;;;121          if(HAL_GetTick() >= timeout)
;;;122          {
;;;123            /* return in case of Timeout detected */         
;;;124            return HAL_TIMEOUT;
;;;125          } 
;;;126        }
;;;127        /* Configure the PLLI2S division factors */
;;;128        /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM) */
;;;129        /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
;;;130        __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
;;;131        
;;;132        /* Enable the PLLI2S */
;;;133        __HAL_RCC_PLLI2S_ENABLE();
00000e  f04f0801          MOV      r8,#1
000012  d032              BEQ      |L2.122|
000014  4f47              LDR      r7,|L2.308|
000016  f8c79068          STR      r9,[r7,#0x68]         ;115
00001a  f7fffffe          BL       HAL_GetTick
00001e  f1000664          ADD      r6,r0,#0x64           ;117
000022  4d45              LDR      r5,|L2.312|
000024  e004              B        |L2.48|
000026  bf00              NOP                            ;121
                  |L2.40|
000028  f7fffffe          BL       HAL_GetTick
00002c  42b0              CMP      r0,r6                 ;121
00002e  d25f              BCS      |L2.240|
                  |L2.48|
000030  6828              LDR      r0,[r5,#0]            ;119
000032  0100              LSLS     r0,r0,#4              ;119
000034  d4f8              BMI      |L2.40|
000036  f64771c0          MOV      r1,#0x7fc0            ;130
00003a  fa91f1a1          RBIT     r1,r1                 ;130
00003e  6860              LDR      r0,[r4,#4]            ;130
000040  fab1f181          CLZ      r1,r1                 ;130
000044  4088              LSLS     r0,r0,r1              ;130
000046  f04f42e0          MOV      r2,#0x70000000        ;130
00004a  fa92f2a2          RBIT     r2,r2                 ;130
00004e  68a1              LDR      r1,[r4,#8]            ;130
000050  fab2f282          CLZ      r2,r2                 ;130
000054  4091              LSLS     r1,r1,r2              ;130
000056  4308              ORRS     r0,r0,r1              ;130
000058  4937              LDR      r1,|L2.312|
00005a  3184              ADDS     r1,r1,#0x84           ;130
00005c  6008              STR      r0,[r1,#0]            ;130
00005e  f8c78068          STR      r8,[r7,#0x68]
;;;134        /* Get new Timeout value */
;;;135        timeout = HAL_GetTick() + PLLI2S_TIMEOUT_VALUE;
000062  f7fffffe          BL       HAL_GetTick
000066  f1000664          ADD      r6,r0,#0x64
;;;136        /* Wait till PLLI2S is ready */
;;;137        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
00006a  e003              B        |L2.116|
                  |L2.108|
;;;138        {
;;;139          if(HAL_GetTick() >= timeout)
00006c  f7fffffe          BL       HAL_GetTick
000070  42b0              CMP      r0,r6
000072  d23d              BCS      |L2.240|
                  |L2.116|
000074  6828              LDR      r0,[r5,#0]            ;137
000076  0100              LSLS     r0,r0,#4              ;137
000078  d5f8              BPL      |L2.108|
                  |L2.122|
;;;140          {
;;;141            /* return in case of Timeout detected */         
;;;142            return HAL_TIMEOUT;
;;;143          }
;;;144        }
;;;145      }
;;;146      
;;;147      /*---------------------------- RTC configuration -------------------------------*/
;;;148      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
00007a  7820              LDRB     r0,[r4,#0]
00007c  0700              LSLS     r0,r0,#28
00007e  d54e              BPL      |L2.286|
;;;149      {
;;;150        /* Enable Power Clock*/
;;;151        __PWR_CLK_ENABLE();
000080  482d              LDR      r0,|L2.312|
000082  3040              ADDS     r0,r0,#0x40
000084  6801              LDR      r1,[r0,#0]
000086  f0415180          ORR      r1,r1,#0x10000000
00008a  6001              STR      r1,[r0,#0]
;;;152        
;;;153        /* Enable write access to Backup domain */
;;;154        PWR->CR |= PWR_CR_DBP;
00008c  4d2b              LDR      r5,|L2.316|
00008e  6828              LDR      r0,[r5,#0]
000090  f4407080          ORR      r0,r0,#0x100
000094  6028              STR      r0,[r5,#0]
;;;155        
;;;156        /* Wait for Backup domain Write protection disable */
;;;157        timeout = HAL_GetTick() + DBP_TIMEOUT_VALUE;
000096  f7fffffe          BL       HAL_GetTick
00009a  f1000664          ADD      r6,r0,#0x64
;;;158        
;;;159        while((PWR->CR & PWR_CR_DBP) == RESET)
00009e  e003              B        |L2.168|
                  |L2.160|
;;;160        {
;;;161          if(HAL_GetTick() >= timeout)
0000a0  f7fffffe          BL       HAL_GetTick
0000a4  42b0              CMP      r0,r6
0000a6  d223              BCS      |L2.240|
                  |L2.168|
0000a8  6828              LDR      r0,[r5,#0]            ;159
0000aa  05c0              LSLS     r0,r0,#23             ;159
0000ac  d5f8              BPL      |L2.160|
;;;162          {
;;;163            return HAL_TIMEOUT;
;;;164          }      
;;;165        }
;;;166            
;;;167        /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
;;;168        if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
0000ae  4d22              LDR      r5,|L2.312|
0000b0  3570              ADDS     r5,r5,#0x70
0000b2  6828              LDR      r0,[r5,#0]
0000b4  89a1              LDRH     r1,[r4,#0xc]
0000b6  f4007040          AND      r0,r0,#0x300
0000ba  f4017140          AND      r1,r1,#0x300
0000be  4288              CMP      r0,r1
0000c0  d008              BEQ      |L2.212|
;;;169        {
;;;170          /* Store the content of BDCR register before the reset of Backup Domain */
;;;171          tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
0000c2  6828              LDR      r0,[r5,#0]
;;;172          /* RTC Clock selection can be changed only if the Backup Domain is reset */
;;;173          __HAL_RCC_BACKUPRESET_FORCE();
0000c4  491e              LDR      r1,|L2.320|
0000c6  f4207040          BIC      r0,r0,#0x300          ;171
0000ca  f8c18000          STR      r8,[r1,#0]
;;;174          __HAL_RCC_BACKUPRESET_RELEASE();
0000ce  f8c19000          STR      r9,[r1,#0]
;;;175          /* Restore the Content of BDCR register */
;;;176          RCC->BDCR = tmpreg;
0000d2  6028              STR      r0,[r5,#0]
                  |L2.212|
;;;177        }
;;;178          
;;;179        /* If LSE is selected as RTC clock source, wait for LSE reactivation */
;;;180        if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
0000d4  68e0              LDR      r0,[r4,#0xc]
0000d6  f5b07f80          CMP      r0,#0x100
0000da  d10f              BNE      |L2.252|
;;;181        {
;;;182          /* Get timeout */
;;;183          timeout = HAL_GetTick() + LSE_TIMEOUT_VALUE;
0000dc  f7fffffe          BL       HAL_GetTick
0000e0  f2413188          MOV      r1,#0x1388
0000e4  1846              ADDS     r6,r0,r1
;;;184          
;;;185          /* Wait till LSE is ready */  
;;;186          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
0000e6  e006              B        |L2.246|
                  |L2.232|
;;;187          {
;;;188            if(HAL_GetTick() >= timeout)
0000e8  f7fffffe          BL       HAL_GetTick
0000ec  42b0              CMP      r0,r6
0000ee  d302              BCC      |L2.246|
                  |L2.240|
;;;189            {
;;;190              return HAL_TIMEOUT;
0000f0  2003              MOVS     r0,#3
                  |L2.242|
;;;191            }      
;;;192          }  
;;;193        }
;;;194        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
;;;195      }
;;;196      
;;;197      return HAL_OK;
;;;198    }
0000f2  e8bd87f0          POP      {r4-r10,pc}
                  |L2.246|
0000f6  6828              LDR      r0,[r5,#0]            ;186
0000f8  0780              LSLS     r0,r0,#30             ;186
0000fa  d5f5              BPL      |L2.232|
                  |L2.252|
0000fc  68e1              LDR      r1,[r4,#0xc]          ;194
0000fe  480e              LDR      r0,|L2.312|
000100  f3c12201          UBFX     r2,r1,#8,#2           ;194
000104  3008              ADDS     r0,r0,#8              ;194
000106  2a03              CMP      r2,#3                 ;194
000108  d00b              BEQ      |L2.290|
00010a  6801              LDR      r1,[r0,#0]            ;194
00010c  f42111f8          BIC      r1,r1,#0x1f0000       ;194
000110  6001              STR      r1,[r0,#0]            ;194
                  |L2.274|
000112  6828              LDR      r0,[r5,#0]            ;194
000114  89a1              LDRH     r1,[r4,#0xc]          ;194
000116  f3c1010b          UBFX     r1,r1,#0,#12          ;194
00011a  4308              ORRS     r0,r0,r1              ;194
00011c  6028              STR      r0,[r5,#0]            ;194
                  |L2.286|
00011e  2000              MOVS     r0,#0                 ;197
000120  e7e7              B        |L2.242|
                  |L2.290|
000122  6802              LDR      r2,[r0,#0]            ;194
000124  4b07              LDR      r3,|L2.324|
000126  f42212f8          BIC      r2,r2,#0x1f0000       ;194
00012a  4019              ANDS     r1,r1,r3              ;194
00012c  430a              ORRS     r2,r2,r1              ;194
00012e  6002              STR      r2,[r0,#0]            ;194
000130  e7ef              B        |L2.274|
;;;199    
                          ENDP

000132  0000              DCW      0x0000
                  |L2.308|
                          DCD      0x42470000
                  |L2.312|
                          DCD      0x40023800
                  |L2.316|
                          DCD      0x40007000
                  |L2.320|
                          DCD      0x42470e40
                  |L2.324|
                          DCD      0x0ffffcff

;*** Start embedded assembler ***

#line 1 "..\\..\\Drivers\\STM32F2xx_HAL_Driver\\Src\\stm32f2xx_hal_rcc_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f2xx_hal_rcc_ex_c_bed13b44____REV16|
#line 129 "..\\..\\Drivers\\CMSIS\\Include\\core_cmInstr.h"
|__asm___22_stm32f2xx_hal_rcc_ex_c_bed13b44____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f2xx_hal_rcc_ex_c_bed13b44____REVSH|
#line 144
|__asm___22_stm32f2xx_hal_rcc_ex_c_bed13b44____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
