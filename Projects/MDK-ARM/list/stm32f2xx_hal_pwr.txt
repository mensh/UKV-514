; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o"bhd2 configuration\stm32f2xx_hal_pwr.o" --asm_dir=.\list\ --list_dir=.\list\ --depend="bhd2 configuration\stm32f2xx_hal_pwr.d" --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\..\Drivers\CMSIS\Device\ST\STM32F2xx\Include -I..\..\Drivers\CMSIS\Include -I..\..\Middlewares\ST\STM32_USB_Device_Library\Class\CDC\Inc -I..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc -I..\..\Drivers\STM32F2xx_HAL_Driver\Inc -I..\..\Inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_HAL_DRIVER -DSTM32F215xx --omf_browse="bhd2 configuration\stm32f2xx_hal_pwr.crf" ..\..\Drivers\STM32F2xx_HAL_Driver\Src\stm32f2xx_hal_pwr.c]
                          THUMB

                          AREA ||i.HAL_PWR_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DeInit PROC
;;;92       */
;;;93     void HAL_PWR_DeInit(void)
000000  4804              LDR      r0,|L1.20|
;;;94     {
;;;95       __PWR_FORCE_RESET();
000002  6801              LDR      r1,[r0,#0]
000004  f0415180          ORR      r1,r1,#0x10000000
000008  6001              STR      r1,[r0,#0]
;;;96       __PWR_RELEASE_RESET();
00000a  6801              LDR      r1,[r0,#0]
00000c  f0215180          BIC      r1,r1,#0x10000000
000010  6001              STR      r1,[r0,#0]
;;;97     }
000012  4770              BX       lr
;;;98     
                          ENDP

                  |L1.20|
                          DCD      0x40023820

                          AREA ||i.HAL_PWR_DisableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableBkUpAccess PROC
;;;119      */
;;;120    void HAL_PWR_DisableBkUpAccess(void)
000000  4901              LDR      r1,|L2.8|
;;;121    {
;;;122      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
000002  2000              MOVS     r0,#0
000004  6208              STR      r0,[r1,#0x20]
;;;123    }
000006  4770              BX       lr
;;;124    
                          ENDP

                  |L2.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_DisablePVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisablePVD PROC
;;;310      */
;;;311    void HAL_PWR_DisablePVD(void)
000000  4901              LDR      r1,|L3.8|
;;;312    {
;;;313      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
000002  2000              MOVS     r0,#0
000004  6108              STR      r0,[r1,#0x10]
;;;314    }
000006  4770              BX       lr
;;;315    
                          ENDP

                  |L3.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_DisableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableWakeUpPin PROC
;;;336      */
;;;337    void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
000000  4902              LDR      r1,|L4.12|
;;;338    {
;;;339      /* Check the parameter */
;;;340      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  
;;;341      *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)DISABLE;
000002  2000              MOVS     r0,#0
000004  f8c100a0          STR      r0,[r1,#0xa0]
;;;342    }
000008  4770              BX       lr
;;;343      
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableBkUpAccess PROC
;;;106      */
;;;107    void HAL_PWR_EnableBkUpAccess(void)
000000  4901              LDR      r1,|L5.8|
;;;108    {
;;;109      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  6208              STR      r0,[r1,#0x20]
;;;110    }
000006  4770              BX       lr
;;;111    
                          ENDP

                  |L5.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnablePVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnablePVD PROC
;;;300      */
;;;301    void HAL_PWR_EnablePVD(void)
000000  4901              LDR      r1,|L6.8|
;;;302    {
;;;303      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  6108              STR      r0,[r1,#0x10]
;;;304    }
000006  4770              BX       lr
;;;305    
                          ENDP

                  |L6.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableWakeUpPin PROC
;;;322      */
;;;323    void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
000000  4902              LDR      r1,|L7.12|
;;;324    {
;;;325      /* Check the parameter */
;;;326      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
;;;327      *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  f8c100a0          STR      r0,[r1,#0xa0]
;;;328    }
000008  4770              BX       lr
;;;329    
                          ENDP

00000a  0000              DCW      0x0000
                  |L7.12|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnterSLEEPMode||, CODE, READONLY, ALIGN=1

                  HAL_PWR_EnterSLEEPMode PROC
;;;363      */
;;;364    void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
000000  f04f20e0          MOV      r0,#0xe000e000
;;;365    {
;;;366      /* Check the parameters */
;;;367      assert_param(IS_PWR_REGULATOR(Regulator));
;;;368      assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
;;;369      
;;;370      /* Disable SysTick Timer */
;;;371      SysTick->CTRL  &= 0xFE;
000004  6902              LDR      r2,[r0,#0x10]
000006  f00202fe          AND      r2,r2,#0xfe
00000a  6102              STR      r2,[r0,#0x10]
;;;372      
;;;373      /* Select SLEEP mode entry -------------------------------------------------*/
;;;374      if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
00000c  2901              CMP      r1,#1
00000e  d005              BEQ      |L8.28|
;;;375      {   
;;;376        /* Request Wait For Interrupt */
;;;377        __WFI();
;;;378      }
;;;379      else
;;;380      {
;;;381        /* Request Wait For Event */
;;;382        __WFE();
000010  bf20              WFE      
                  |L8.18|
;;;383      }
;;;384    
;;;385      /* Enable SysTick Timer */
;;;386      SysTick->CTRL  |= 0x01;
000012  6901              LDR      r1,[r0,#0x10]
000014  f0410101          ORR      r1,r1,#1
000018  6101              STR      r1,[r0,#0x10]
;;;387    }
00001a  4770              BX       lr
                  |L8.28|
00001c  bf30              WFI                            ;377
00001e  e7f8              B        |L8.18|
;;;388    
                          ENDP


                          AREA ||i.HAL_PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSTANDBYMode PROC
;;;455      */
;;;456    void HAL_PWR_EnterSTANDBYMode(void)
000000  4807              LDR      r0,|L9.32|
;;;457    {
;;;458      /* Clear Wakeup flag */
;;;459      PWR->CR |= PWR_CR_CWUF;
000002  6801              LDR      r1,[r0,#0]
000004  f0410104          ORR      r1,r1,#4
000008  6001              STR      r1,[r0,#0]
;;;460      
;;;461      /* Select Standby mode */
;;;462      PWR->CR |= PWR_CR_PDDS;
00000a  6801              LDR      r1,[r0,#0]
00000c  f0410102          ORR      r1,r1,#2
000010  6001              STR      r1,[r0,#0]
;;;463      
;;;464      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;465      SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
000012  4804              LDR      r0,|L9.36|
000014  6801              LDR      r1,[r0,#0]
000016  f0410104          ORR      r1,r1,#4
00001a  6001              STR      r1,[r0,#0]
;;;466      
;;;467      /* This option is used to ensure that store operations are completed */
;;;468    #if defined ( __CC_ARM)
;;;469      __force_stores();
;;;470    #endif
;;;471      /* Request Wait For Interrupt */
;;;472      __WFI();
00001c  bf30              WFI      
;;;473    }
00001e  4770              BX       lr
;;;474    
                          ENDP

                  |L9.32|
                          DCD      0x40007000
                  |L9.36|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSTOPMode PROC
;;;407      */
;;;408    void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
000000  4b0a              LDR      r3,|L10.44|
;;;409    {
;;;410      uint32_t tmpreg = 0;
;;;411      
;;;412      /* Check the parameters */
;;;413      assert_param(IS_PWR_REGULATOR(Regulator));
;;;414      assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
;;;415      
;;;416      /* Select the regulator state in Stop mode ---------------------------------*/
;;;417      tmpreg = PWR->CR;
000002  681a              LDR      r2,[r3,#0]
;;;418      /* Clear PDDS and LPDS bits */
;;;419      tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
000004  f0220203          BIC      r2,r2,#3
;;;420      
;;;421      /* Set LPDS, MRLVDS and LPLVDS bits according to Regulator value */
;;;422      tmpreg |= Regulator;
000008  4302              ORRS     r2,r2,r0
;;;423      
;;;424      /* Store the new value */
;;;425      PWR->CR = tmpreg;
00000a  601a              STR      r2,[r3,#0]
;;;426      
;;;427      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;428      SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
00000c  4808              LDR      r0,|L10.48|
00000e  6802              LDR      r2,[r0,#0]
000010  f0420204          ORR      r2,r2,#4
000014  6002              STR      r2,[r0,#0]
;;;429      
;;;430      /* Select Stop mode entry --------------------------------------------------*/
;;;431      if(STOPEntry == PWR_STOPENTRY_WFI)
000016  2901              CMP      r1,#1
000018  d005              BEQ      |L10.38|
;;;432      {   
;;;433        /* Request Wait For Interrupt */
;;;434        __WFI();
;;;435      }
;;;436      else
;;;437      {
;;;438        /* Request Wait For Event */
;;;439        __WFE();
00001a  bf20              WFE      
                  |L10.28|
;;;440      }
;;;441      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;442      SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
00001c  6801              LDR      r1,[r0,#0]
00001e  f0210104          BIC      r1,r1,#4
000022  6001              STR      r1,[r0,#0]
;;;443    }
000024  4770              BX       lr
                  |L10.38|
000026  bf30              WFI                            ;434
000028  e7f8              B        |L10.28|
;;;444    
                          ENDP

00002a  0000              DCW      0x0000
                  |L10.44|
                          DCD      0x40007000
                  |L10.48|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_PVDCallback||, CODE, READONLY, ALIGN=1

                  HAL_PWR_PVDCallback PROC
;;;498      */
;;;499    __weak void HAL_PWR_PVDCallback(void)
000000  4770              BX       lr
;;;500    {
;;;501      /* NOTE : This function Should not be modified, when the callback is needed,
;;;502                the HAL_PWR_PVDCallback could be implemented in the user file
;;;503       */ 
;;;504    }
;;;505    
                          ENDP


                          AREA ||i.HAL_PWR_PVDConfig||, CODE, READONLY, ALIGN=2

                  HAL_PWR_PVDConfig PROC
;;;252      */
;;;253    void HAL_PWR_PVDConfig(PWR_PVDTypeDef *sConfigPVD)
000000  4a18              LDR      r2,|L12.100|
;;;254    {
;;;255      uint32_t tmpreg = 0;
;;;256    
;;;257      /* Check the parameters */
;;;258      assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
;;;259      assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
;;;260      
;;;261      tmpreg = PWR->CR;
000002  6811              LDR      r1,[r2,#0]
;;;262      
;;;263      /* Clear PLS[7:5] bits */
;;;264      tmpreg &= ~ (uint32_t)PWR_CR_PLS;
000004  f02103e0          BIC      r3,r1,#0xe0
;;;265      
;;;266      /* Set PLS[7:5] bits according to PVDLevel value */
;;;267      tmpreg |= sConfigPVD->PVDLevel;
000008  6801              LDR      r1,[r0,#0]
00000a  4319              ORRS     r1,r1,r3
;;;268      
;;;269      /* Store the new value */
;;;270      PWR->CR = tmpreg;
00000c  6011              STR      r1,[r2,#0]
;;;271      
;;;272      /* Configure the EXTI 16 interrupt */
;;;273      if((sConfigPVD->Mode == PWR_MODE_IT_RISING_FALLING) ||\
00000e  6841              LDR      r1,[r0,#4]
000010  2903              CMP      r1,#3
000012  d003              BEQ      |L12.28|
;;;274         (sConfigPVD->Mode == PWR_MODE_IT_FALLING) ||\
000014  2902              CMP      r1,#2
000016  d001              BEQ      |L12.28|
;;;275         (sConfigPVD->Mode == PWR_MODE_IT_RISING)) 
000018  2901              CMP      r1,#1
00001a  d104              BNE      |L12.38|
                  |L12.28|
;;;276      {
;;;277        __HAL_PVD_EXTI_ENABLE_IT(PWR_EXTI_LINE_PVD);
00001c  4912              LDR      r1,|L12.104|
00001e  680a              LDR      r2,[r1,#0]
000020  f4423280          ORR      r2,r2,#0x10000
000024  600a              STR      r2,[r1,#0]
                  |L12.38|
;;;278      }
;;;279      /* Clear the edge trigger  for the EXTI Line 16 (PVD) */
;;;280      EXTI->RTSR &= ~EXTI_RTSR_TR16;
000026  4910              LDR      r1,|L12.104|
000028  3108              ADDS     r1,r1,#8
00002a  680a              LDR      r2,[r1,#0]
00002c  f4223280          BIC      r2,r2,#0x10000
000030  600a              STR      r2,[r1,#0]
;;;281      EXTI->FTSR &= ~EXTI_FTSR_TR16;  
000032  1d0a              ADDS     r2,r1,#4
000034  6813              LDR      r3,[r2,#0]
000036  f4233380          BIC      r3,r3,#0x10000
00003a  6013              STR      r3,[r2,#0]
;;;282      /* Configure the rising edge */
;;;283      if((sConfigPVD->Mode == PWR_MODE_IT_RISING_FALLING) ||\
00003c  6843              LDR      r3,[r0,#4]
00003e  2b03              CMP      r3,#3
000040  d001              BEQ      |L12.70|
;;;284         (sConfigPVD->Mode == PWR_MODE_IT_RISING))
000042  2b01              CMP      r3,#1
000044  d106              BNE      |L12.84|
                  |L12.70|
;;;285      {
;;;286        EXTI->RTSR |= PWR_EXTI_LINE_PVD;
000046  680b              LDR      r3,[r1,#0]
000048  f4433380          ORR      r3,r3,#0x10000
00004c  600b              STR      r3,[r1,#0]
;;;287      }
;;;288      /* Configure the falling edge */
;;;289      if((sConfigPVD->Mode == PWR_MODE_IT_RISING_FALLING) ||\
00004e  6841              LDR      r1,[r0,#4]
000050  2903              CMP      r1,#3
000052  d002              BEQ      |L12.90|
                  |L12.84|
;;;290         (sConfigPVD->Mode == PWR_MODE_IT_FALLING))
000054  6840              LDR      r0,[r0,#4]
000056  2802              CMP      r0,#2
000058  d103              BNE      |L12.98|
                  |L12.90|
;;;291      {
;;;292        EXTI->FTSR |= PWR_EXTI_LINE_PVD;
00005a  6810              LDR      r0,[r2,#0]
00005c  f4403080          ORR      r0,r0,#0x10000
000060  6010              STR      r0,[r2,#0]
                  |L12.98|
;;;293      }
;;;294    }
000062  4770              BX       lr
;;;295    
                          ENDP

                  |L12.100|
                          DCD      0x40007000
                  |L12.104|
                          DCD      0x40013c00

                          AREA ||i.HAL_PWR_PVD_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_PWR_PVD_IRQHandler PROC
;;;480      */
;;;481    void HAL_PWR_PVD_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;482    {
;;;483      /* Check PWR exti flag */
;;;484      if(__HAL_PVD_EXTI_GET_FLAG(PWR_EXTI_LINE_PVD) != RESET)
000002  4c05              LDR      r4,|L13.24|
000004  6820              LDR      r0,[r4,#0]
000006  03c0              LSLS     r0,r0,#15
000008  d504              BPL      |L13.20|
;;;485      {
;;;486        /* PWR PVD interrupt user callback */
;;;487        HAL_PWR_PVDCallback();
00000a  f7fffffe          BL       HAL_PWR_PVDCallback
;;;488        
;;;489        /* Clear PWR Exti pending bit */
;;;490        __HAL_PVD_EXTI_CLEAR_FLAG(PWR_EXTI_LINE_PVD);
00000e  f44f3080          MOV      r0,#0x10000
000012  6020              STR      r0,[r4,#0]
                  |L13.20|
;;;491      }
;;;492    }
000014  bd10              POP      {r4,pc}
;;;493    
                          ENDP

000016  0000              DCW      0x0000
                  |L13.24|
                          DCD      0x40013c14

;*** Start embedded assembler ***

#line 1 "..\\..\\Drivers\\STM32F2xx_HAL_Driver\\Src\\stm32f2xx_hal_pwr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f2xx_hal_pwr_c_f2cfe8be____REV16|
#line 129 "..\\..\\Drivers\\CMSIS\\Include\\core_cmInstr.h"
|__asm___19_stm32f2xx_hal_pwr_c_f2cfe8be____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f2xx_hal_pwr_c_f2cfe8be____REVSH|
#line 144
|__asm___19_stm32f2xx_hal_pwr_c_f2cfe8be____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
