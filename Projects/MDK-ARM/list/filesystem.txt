; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o"bhd2 configuration\filesystem.o" --asm_dir=.\list\ --list_dir=.\list\ --depend="bhd2 configuration\filesystem.d" --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\..\Drivers\CMSIS\Device\ST\STM32F2xx\Include -I..\..\Drivers\CMSIS\Include -I..\..\Middlewares\ST\STM32_USB_Device_Library\Class\CDC\Inc -I..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc -I..\..\Drivers\STM32F2xx_HAL_Driver\Inc -I..\..\Inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_HAL_DRIVER -DSTM32F215xx --omf_browse="bhd2 configuration\filesystem.crf" ..\..\Src\core\fileSystem.c]
                          THUMB

                          AREA ||i.FILE_SYSTEM_clearBadBlock||, CODE, READONLY, ALIGN=1

                  FILE_SYSTEM_clearBadBlock PROC
;;;322    
;;;323    tdStatus FILE_SYSTEM_clearBadBlock(tdFileSystemBlock _block)
000000  f5b05f80          CMP      r0,#0x1000
;;;324    	{
000004  d301              BCC      |L1.10|
;;;325    	if( (_block < FILE_SYSTEM_MEMORY_BLOCKS_AMOUNT) == 0 )
;;;326    		return Fail;
000006  2002              MOVS     r0,#2
;;;327    
;;;328    	return  FILE_SYSTEM_saveBadBlockStatusToMemmory( _block, 0 );
;;;329    	}
000008  4770              BX       lr
                  |L1.10|
00000a  2100              MOVS     r1,#0                 ;328
00000c  f7ffbffe          B.W      FILE_SYSTEM_saveBadBlockStatusToMemmory
;;;330    
                          ENDP


                          AREA ||i.FILE_SYSTEM_clearBadBlocksList||, CODE, READONLY, ALIGN=2

                  FILE_SYSTEM_clearBadBlocksList PROC
;;;236    
;;;237    tdStatus FILE_SYSTEM_clearBadBlocksList(void)
000000  b510              PUSH     {r4,lr}
;;;238    	{
;;;239    	tdStatus status = Ok;
;;;240    
;;;241    	if( EEPROM_DRIVER_eraseRange(pFileSystemDataRam, FILE_SYSTEM_ADDRESS_OF_BAD_BLOCKS_LIST, FILE_SYSTEM_ADDRESS_OF_BAD_BLOCKS_LIST + FILE_SYSTEM_MEMORY_BAD_BLOCK_LIST_SIZE) != Ok )
000002  4809              LDR      r0,|L2.40|
000004  2401              MOVS     r4,#1                 ;239
000006  f44f7240          MOV      r2,#0x300
00000a  0221              LSLS     r1,r4,#8
00000c  6800              LDR      r0,[r0,#0]  ; pFileSystemDataRam
00000e  f7fffffe          BL       EEPROM_DRIVER_eraseRange
000012  2801              CMP      r0,#1
000014  d000              BEQ      |L2.24|
;;;242    		status = Fail;
000016  2402              MOVS     r4,#2
                  |L2.24|
;;;243    
;;;244    	memset(badBlocksList, 0x00, (sizeof(badBlocksList) / sizeof(badBlocksList[0])) );
000018  f44f7100          MOV      r1,#0x200
00001c  4803              LDR      r0,|L2.44|
00001e  f7fffffe          BL       __aeabi_memclr4
;;;245    
;;;246    	return status;
000022  4620              MOV      r0,r4
;;;247    	}
000024  bd10              POP      {r4,pc}
;;;248    
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      ||.data||
                  |L2.44|
                          DCD      ||.bss||

                          AREA ||i.FILE_SYSTEM_clearBadBlocksList_||, CODE, READONLY, ALIGN=2

                  FILE_SYSTEM_clearBadBlocksList_ PROC
;;;248    
;;;249    tdStatus FILE_SYSTEM_clearBadBlocksList_(uint32_t _from, uint32_t _size)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;250    	{
;;;251    	tdStatus status = Ok;
;;;252    	uint32_t to;
;;;253    	uint8_t *pByte;
;;;254    	uint16_t block;
;;;255    
;;;256    	if( (_from < FILE_SYSTEM_MEMORY_BLOCKS_AMOUNT) == 0 )
000004  f44f5280          MOV      r2,#0x1000
000008  f04f0901          MOV      r9,#1                 ;251
00000c  4290              CMP      r0,r2
00000e  d302              BCC      |L3.22|
;;;257    		return Fail;
000010  2002              MOVS     r0,#2
                  |L3.18|
;;;258    
;;;259    	block = _from;
;;;260    	pByte = &badBlocksList[ block ];
;;;261    	to = _from + _size;
;;;262    
;;;263    	if( (to < FILE_SYSTEM_MEMORY_BLOCKS_AMOUNT) == 0 )
;;;264    		to = FILE_SYSTEM_MEMORY_BLOCKS_AMOUNT;
;;;265    
;;;266    	while( block < to )
;;;267    		{
;;;268    		if( *pByte != 0 )
;;;269    			{
;;;270    			*pByte = 0;
;;;271    
;;;272    			HAL_NVIC_DisableIRQ(OTG_HS_IRQn);
;;;273    			EEPROM_DRIVER_writeByte(pFileSystemDataRam, FILE_SYSTEM_ADDRESS_OF_BAD_BLOCKS_LIST + block, 0x00);
;;;274    			HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
;;;275    			}
;;;276    
;;;277    		pByte++;
;;;278    		block++;
;;;279    		}
;;;280    
;;;281    	return status;
;;;282    	}
000012  e8bd87f0          POP      {r4-r10,pc}
                  |L3.22|
000016  4b11              LDR      r3,|L3.92|
000018  b284              UXTH     r4,r0                 ;259
00001a  191e              ADDS     r6,r3,r4              ;260
00001c  1845              ADDS     r5,r0,r1              ;261
00001e  4295              CMP      r5,r2                 ;263
000020  d300              BCC      |L3.36|
000022  4615              MOV      r5,r2                 ;264
                  |L3.36|
000024  f8df8038          LDR      r8,|L3.96|
000028  2700              MOVS     r7,#0                 ;264
                  |L3.42|
00002a  42ac              CMP      r4,r5                 ;266
00002c  d214              BCS      |L3.88|
00002e  7830              LDRB     r0,[r6,#0]            ;268
000030  b170              CBZ      r0,|L3.80|
000032  7037              STRB     r7,[r6,#0]            ;270
000034  204d              MOVS     r0,#0x4d              ;272
000036  f7fffffe          BL       HAL_NVIC_DisableIRQ
00003a  f5047080          ADD      r0,r4,#0x100          ;273
00003e  b281              UXTH     r1,r0                 ;273
000040  2200              MOVS     r2,#0                 ;273
000042  f8d80000          LDR      r0,[r8,#0]            ;273  ; pFileSystemDataRam
000046  f7fffffe          BL       EEPROM_DRIVER_writeByte
00004a  204d              MOVS     r0,#0x4d              ;274
00004c  f7fffffe          BL       HAL_NVIC_EnableIRQ
                  |L3.80|
000050  1c64              ADDS     r4,r4,#1              ;274
000052  b2a4              UXTH     r4,r4                 ;278
000054  1c76              ADDS     r6,r6,#1              ;278
000056  e7e8              B        |L3.42|
                  |L3.88|
000058  4648              MOV      r0,r9                 ;281
00005a  e7da              B        |L3.18|
;;;283    
                          ENDP

                  |L3.92|
                          DCD      ||.bss||
                  |L3.96|
                          DCD      ||.data||

                          AREA ||i.FILE_SYSTEM_clearFatTable||, CODE, READONLY, ALIGN=1

                  FILE_SYSTEM_clearFatTable PROC
;;;560    
;;;561    tdStatus FILE_SYSTEM_clearFatTable(tdFat *_pFat)
000000  b510              PUSH     {r4,lr}
;;;562    	{
000002  0004              MOVS     r4,r0
000004  d002              BEQ      |L4.12|
;;;563    	tdFileNode *pFile;
;;;564    
;;;565    	if( _pFat == NULL )
;;;566    		return Fail;
;;;567    
;;;568    	if( _pFat->pFirstFile == NULL )
000006  6860              LDR      r0,[r4,#4]
000008  b110              CBZ      r0,|L4.16|
00000a  e006              B        |L4.26|
                  |L4.12|
00000c  2002              MOVS     r0,#2                 ;566
;;;569    		return Ok;
;;;570    
;;;571    	while( _pFat->pFirstFile->pNextFile != NULL )
;;;572    		{
;;;573    		pFile = _pFat->pFirstFile;
;;;574    		_pFat->pFirstFile = _pFat->pFirstFile->pNextFile;
;;;575    		free( pFile );
;;;576    		}
;;;577    
;;;578    	free( _pFat->pFirstFile );
;;;579    
;;;580    	return Ok;
;;;581    	}
00000e  bd10              POP      {r4,pc}
                  |L4.16|
000010  2001              MOVS     r0,#1                 ;569
000012  bd10              POP      {r4,pc}
                  |L4.20|
000014  6061              STR      r1,[r4,#4]            ;575
000016  f7fffffe          BL       free
                  |L4.26|
00001a  6860              LDR      r0,[r4,#4]            ;571
00001c  6901              LDR      r1,[r0,#0x10]         ;571
00001e  2900              CMP      r1,#0                 ;571
000020  d1f8              BNE      |L4.20|
000022  f7fffffe          BL       free
000026  e7f3              B        |L4.16|
;;;582    
                          ENDP


                          AREA ||i.FILE_SYSTEM_createFatTable||, CODE, READONLY, ALIGN=1

                  FILE_SYSTEM_createFatTable PROC
;;;395    //				So _pFat->pFirstFile is the newest file and _pFat->pLastFile is the oldest.
;;;396    tdStatus FILE_SYSTEM_createFatTable(tdFat *_pFat)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;397    	{
000004  b09b              SUB      sp,sp,#0x6c
000006  0004              MOVS     r4,r0
000008  d026              BEQ      |L5.88|
;;;398    	tdFileNode *pFile;
;;;399    	uint8_t *pSparePage;
;;;400    	tdFileMinMax fileMin;
;;;401    	tdFileMinMax fileMax;
;;;402    	nand_addr_t natCheckAddress;
;;;403    	nand_addr_t natTmpAddress;
;;;404    	tdSparePageData spareData;
;;;405    	uint8_t startsFound;
;;;406    	tdFileAddressAndTime timeStart;
;;;407    	tdFileAddressAndTime timeEnd;
;;;408    
;;;409    	if( _pFat == NULL )
;;;410    		return Fail;
;;;411    
;;;412    	pSparePage = (uint8_t *)malloc( FILE_SYSTEM_MEMORY_SPARE_DATA_SIZE );
00000a  20e0              MOVS     r0,#0xe0
00000c  f7fffffe          BL       malloc
;;;413    	if( pSparePage == NULL )
000010  9017              STR      r0,[sp,#0x5c]
000012  b308              CBZ      r0,|L5.88|
;;;414    		return Fail;
;;;415    
;;;416    	memset(&natCheckAddress, 0x00, sizeof(natCheckAddress));
000014  2600              MOVS     r6,#0
000016  9602              STR      r6,[sp,#8]
000018  9603              STR      r6,[sp,#0xc]
00001a  9604              STR      r6,[sp,#0x10]
;;;417    	memset(&natTmpAddress, 0x00, sizeof(natTmpAddress));
00001c  9605              STR      r6,[sp,#0x14]
00001e  9607              STR      r6,[sp,#0x1c]
000020  9608              STR      r6,[sp,#0x20]
000022  9609              STR      r6,[sp,#0x24]
;;;418    
;;;419    	_pFat->filesAmount = 0;
000024  960a              STR      r6,[sp,#0x28]
;;;420    	_pFat->pFirstFile = (tdFileNode *)malloc( sizeof(tdFileNode) );
000026  2018              MOVS     r0,#0x18
000028  6026              STR      r6,[r4,#0]
00002a  f7fffffe          BL       malloc
;;;421    	_pFat->pFirstFile->pPreviousFile = NULL;
00002e  6060              STR      r0,[r4,#4]
;;;422    	_pFat->pFirstFile->pNextFile = NULL;
000030  6146              STR      r6,[r0,#0x14]
000032  6860              LDR      r0,[r4,#4]
;;;423    
;;;424    	pFile = _pFat->pFirstFile;
;;;425    
;;;426    	fileMin.value = 0xFFFFFFFF;
000034  f04f3bff          MOV      r11,#0xffffffff
;;;427    	fileMin.pFile = NULL;
000038  46b2              MOV      r10,r6
00003a  6106              STR      r6,[r0,#0x10]         ;424
;;;428    
;;;429    	fileMax.value = 0x00000000;
;;;430    	fileMax.pFile = NULL;
;;;431    
;;;432    	startsFound = 0;
00003c  6865              LDR      r5,[r4,#4]
00003e  e9cd6b13          STRD     r6,r11,[sp,#0x4c]
000042  46d0              MOV      r8,r10                ;429
000044  46c1              MOV      r9,r8                 ;430
000046  2700              MOVS     r7,#0
;;;433    	timeStart.time = 0xFFFFFFFF;
;;;434    	timeEnd.time = 0x00000000;
;;;435    
;;;436    	do
;;;437    		{
;;;438    		FILE_SYSTEM_getSparePageData(&natCheckAddress, &spareData, pSparePage);
000048  a90b              ADD      r1,sp,#0x2c
00004a  a802              ADD      r0,sp,#8
00004c  9a17              LDR      r2,[sp,#0x5c]
00004e  f7fffffe          BL       FILE_SYSTEM_getSparePageData
;;;439    
;;;440    		if( startsFound == 1 && (spareData.fileNum != pFile->fileNum || natCheckAddress.block == FILE_SYSTEM_MEMORY_BLOCKS_AMOUNT - 1 || spareData.dataType == 0xFF ) )
;;;441    			{
;;;442    			memset(&natTmpAddress, 0x00, sizeof(natTmpAddress));
;;;443    			natTmpAddress.block = natCheckAddress.block - 1;
;;;444    			if( (natTmpAddress.block < FILE_SYSTEM_MEMORY_BLOCKS_AMOUNT) == 0 )
000052  f44f5680          MOV      r6,#0x1000
000056  e03e              B        |L5.214|
                  |L5.88|
000058  2002              MOVS     r0,#2                 ;414
                  |L5.90|
;;;445    				natTmpAddress.block = 0;
;;;446    
;;;447    			FILE_SYSTEM_getLastPageAddressInBlock(&natTmpAddress, pSparePage);
;;;448    
;;;449    			pFile->addressEnd = natTmpAddress.block * FILE_SYSTEM_MEMORY_PAGES_AMOUNT + natTmpAddress.page;
;;;450    
;;;451    			// Searching up for minimum and maximum file numbers for knowing where is first and last(oldest) file;
;;;452    			if( fileMin.value > pFile->fileNum )
;;;453    				{
;;;454    				fileMin.value = pFile->fileNum;
;;;455    				fileMin.pFile = pFile; // fileNum of pFile is less then current. So pFile is a new min.
;;;456    				}
;;;457    			if( fileMax.value < pFile->fileNum )
;;;458    				{
;;;459    				fileMax.value = pFile->fileNum;
;;;460    				fileMax.pFile = pFile; // fileNum of pFile is greater then current. So pFile is a new max.
;;;461    				}
;;;462    
;;;463    			pFile->pNextFile = (tdFileNode *)malloc( sizeof(tdFileNode) ); // creating next file
;;;464    			pFile->pNextFile->pPreviousFile = pFile; //next file has a previous file. and.... it's current file;)
;;;465    
;;;466    			pFile = pFile->pNextFile; // working with next file
;;;467    			pFile->pNextFile = NULL;
;;;468    
;;;469    			_pFat->filesAmount++;
;;;470    
;;;471    			startsFound = 0;
;;;472    			}
;;;473    
;;;474    		if( FILE_SYSTEM_isBadBlock( natCheckAddress.block ) == 1 )
;;;475    			continue;
;;;476    
;;;477    		if( spareData.dataType != 0xFF && spareData.crc8 != 0 )
;;;478    			{
;;;479    			if( startsFound == 0 )
;;;480    				{
;;;481    				pFile->fileNum = spareData.fileNum;
;;;482    				pFile->addressStart = natCheckAddress.block * FILE_SYSTEM_MEMORY_PAGES_AMOUNT;
;;;483    
;;;484    				startsFound = 1;
;;;485    				}
;;;486    
;;;487    			if( spareData.timeStart < timeStart.time )
;;;488    				{
;;;489    				timeStart.time = spareData.timeStart;
;;;490    				timeStart.address = natCheckAddress.block * FILE_SYSTEM_MEMORY_PAGES_AMOUNT;
;;;491    				}
;;;492    
;;;493    			if( spareData.timeEnd > timeEnd.time )
;;;494    				{
;;;495    				timeEnd.time = spareData.timeEnd;
;;;496    				timeEnd.address = natCheckAddress.block * FILE_SYSTEM_MEMORY_PAGES_AMOUNT;
;;;497    				}
;;;498    			}
;;;499    
;;;500    		} while( ++natCheckAddress.block < FILE_SYSTEM_MEMORY_BLOCKS_AMOUNT );
;;;501    
;;;502    	if( _pFat->filesAmount == 0 )
;;;503    		{
;;;504    		free(_pFat->pFirstFile);
;;;505    		_pFat->pFirstFile = NULL;
;;;506    		}
;;;507    	else
;;;508    		{
;;;509    		pFile = pFile->pPreviousFile;
;;;510    		free( pFile->pNextFile );
;;;511    
;;;512    		_pFat->pLastFile = pFile;
;;;513    		_pFat->pLastFile->pNextFile = _pFat->pFirstFile;
;;;514    		_pFat->pFirstFile->pPreviousFile = _pFat->pLastFile;
;;;515    		}
;;;516    
;;;517    	if( _pFat->filesAmount == 1 )
;;;518    		{
;;;519    		if( timeStart.address > timeEnd.address )
;;;520    			{
;;;521    			/*
;;;522    				   timeEnd --+
;;;523    			+--------------|-------------------+
;;;524    			|              | |                 |  <--- One file on memory
;;;525    			+----------------|-----------------+
;;;526    			                 +-- timeStart
;;;527    			*/
;;;528    			_pFat->pFirstFile->addressStart = timeStart.address;
;;;529    
;;;530    			FILE_SYSTEM_generateNandAddress(&natTmpAddress, timeEnd.address);
;;;531    			FILE_SYSTEM_getLastPageAddressInBlock(&natTmpAddress, pSparePage);
;;;532    
;;;533    			pFile->addressEnd = natTmpAddress.block * FILE_SYSTEM_MEMORY_PAGES_AMOUNT + natTmpAddress.page;
;;;534    			}
;;;535    		}
;;;536    	else if( _pFat->filesAmount > 1 )
;;;537    		{
;;;538    		if( _pFat->pFirstFile != NULL && _pFat->pLastFile != NULL )
;;;539    			{
;;;540    			if( _pFat->pFirstFile != _pFat->pLastFile && _pFat->pFirstFile->fileNum == _pFat->pLastFile->fileNum )
;;;541    				{
;;;542    				_pFat->pFirstFile->addressStart = _pFat->pLastFile->addressStart;
;;;543    
;;;544    				_pFat->pLastFile = _pFat->pLastFile->pPreviousFile;
;;;545    				free( _pFat->pLastFile->pNextFile );
;;;546    
;;;547    				_pFat->pLastFile->pNextFile = _pFat->pFirstFile;
;;;548    				_pFat->pFirstFile->pPreviousFile = _pFat->pLastFile;
;;;549    				}
;;;550    			}
;;;551    
;;;552    		_pFat->pFirstFile = fileMax.pFile;
;;;553    		_pFat->pLastFile = fileMin.pFile;
;;;554    		}
;;;555    
;;;556    	free( pSparePage );
;;;557    
;;;558    	return Ok;
;;;559    	}
00005a  b01b              ADD      sp,sp,#0x6c
00005c  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.96|
000060  a90b              ADD      r1,sp,#0x2c           ;438
000062  a802              ADD      r0,sp,#8              ;438
000064  9a17              LDR      r2,[sp,#0x5c]         ;438
000066  f7fffffe          BL       FILE_SYSTEM_getSparePageData
00006a  2f01              CMP      r7,#1                 ;440
00006c  d133              BNE      |L5.214|
00006e  980c              LDR      r0,[sp,#0x30]         ;440
000070  6829              LDR      r1,[r5,#0]            ;440
000072  4288              CMP      r0,r1                 ;440
000074  d108              BNE      |L5.136|
000076  9803              LDR      r0,[sp,#0xc]          ;440
000078  f5a06170          SUB      r1,r0,#0xf00          ;440
00007c  39ff              SUBS     r1,r1,#0xff           ;440
00007e  d003              BEQ      |L5.136|
000080  f89d002c          LDRB     r0,[sp,#0x2c]         ;440
000084  28ff              CMP      r0,#0xff              ;440
000086  d126              BNE      |L5.214|
                  |L5.136|
000088  2700              MOVS     r7,#0                 ;442
00008a  9803              LDR      r0,[sp,#0xc]          ;443
00008c  9707              STR      r7,[sp,#0x1c]         ;442
00008e  1e40              SUBS     r0,r0,#1              ;443
000090  9709              STR      r7,[sp,#0x24]         ;442
000092  970a              STR      r7,[sp,#0x28]         ;443
000094  9008              STR      r0,[sp,#0x20]         ;444
000096  42b0              CMP      r0,r6                 ;444
000098  d300              BCC      |L5.156|
00009a  9708              STR      r7,[sp,#0x20]         ;445
                  |L5.156|
00009c  a807              ADD      r0,sp,#0x1c           ;447
00009e  9917              LDR      r1,[sp,#0x5c]         ;447
0000a0  f7fffffe          BL       FILE_SYSTEM_getLastPageAddressInBlock
0000a4  e9dd1008          LDRD     r1,r0,[sp,#0x20]      ;447
0000a8  eb0010c1          ADD      r0,r0,r1,LSL #7       ;449
0000ac  60a8              STR      r0,[r5,#8]            ;452
0000ae  6828              LDR      r0,[r5,#0]            ;452
0000b0  4583              CMP      r11,r0                ;452
0000b2  d901              BLS      |L5.184|
0000b4  4683              MOV      r11,r0                ;454
0000b6  46aa              MOV      r10,r5                ;455
                  |L5.184|
0000b8  4580              CMP      r8,r0                 ;457
0000ba  d201              BCS      |L5.192|
0000bc  4680              MOV      r8,r0                 ;459
0000be  46a9              MOV      r9,r5                 ;460
                  |L5.192|
0000c0  2018              MOVS     r0,#0x18              ;463
0000c2  f7fffffe          BL       malloc
0000c6  6128              STR      r0,[r5,#0x10]         ;464
0000c8  6145              STR      r5,[r0,#0x14]         ;466
0000ca  692d              LDR      r5,[r5,#0x10]         ;466
0000cc  612f              STR      r7,[r5,#0x10]         ;469
0000ce  6820              LDR      r0,[r4,#0]            ;469
0000d0  1c40              ADDS     r0,r0,#1              ;469
0000d2  2700              MOVS     r7,#0                 ;471
0000d4  6020              STR      r0,[r4,#0]            ;471
                  |L5.214|
0000d6  9803              LDR      r0,[sp,#0xc]          ;474
0000d8  f7fffffe          BL       FILE_SYSTEM_isBadBlock
0000dc  2801              CMP      r0,#1                 ;474
0000de  d01d              BEQ      |L5.284|
0000e0  f89d002c          LDRB     r0,[sp,#0x2c]         ;477
0000e4  28ff              CMP      r0,#0xff              ;477
0000e6  d019              BEQ      |L5.284|
0000e8  f89d003c          LDRB     r0,[sp,#0x3c]         ;477
0000ec  b1b0              CBZ      r0,|L5.284|
0000ee  b92f              CBNZ     r7,|L5.252|
0000f0  980c              LDR      r0,[sp,#0x30]         ;481
0000f2  6028              STR      r0,[r5,#0]            ;482
0000f4  9803              LDR      r0,[sp,#0xc]          ;482
0000f6  01c0              LSLS     r0,r0,#7              ;482
0000f8  2701              MOVS     r7,#1                 ;484
0000fa  6068              STR      r0,[r5,#4]            ;484
                  |L5.252|
0000fc  9910              LDR      r1,[sp,#0x40]         ;487
0000fe  9814              LDR      r0,[sp,#0x50]         ;487
000100  4281              CMP      r1,r0                 ;487
000102  d203              BCS      |L5.268|
000104  9803              LDR      r0,[sp,#0xc]          ;490
000106  9114              STR      r1,[sp,#0x50]         ;490
000108  01c0              LSLS     r0,r0,#7              ;490
00010a  9012              STR      r0,[sp,#0x48]         ;490
                  |L5.268|
00010c  9911              LDR      r1,[sp,#0x44]         ;493
00010e  9813              LDR      r0,[sp,#0x4c]         ;493
000110  4281              CMP      r1,r0                 ;493
000112  d903              BLS      |L5.284|
000114  9803              LDR      r0,[sp,#0xc]          ;496
000116  9113              STR      r1,[sp,#0x4c]         ;496
000118  01c0              LSLS     r0,r0,#7              ;496
00011a  9001              STR      r0,[sp,#4]            ;496
                  |L5.284|
00011c  9803              LDR      r0,[sp,#0xc]          ;500
00011e  1c40              ADDS     r0,r0,#1              ;500
000120  9003              STR      r0,[sp,#0xc]          ;500
000122  42b0              CMP      r0,r6                 ;500
000124  d39c              BCC      |L5.96|
000126  6820              LDR      r0,[r4,#0]            ;502
000128  b360              CBZ      r0,|L5.388|
00012a  696d              LDR      r5,[r5,#0x14]         ;509
00012c  6928              LDR      r0,[r5,#0x10]         ;510
00012e  f7fffffe          BL       free
000132  60a5              STR      r5,[r4,#8]            ;513
000134  6860              LDR      r0,[r4,#4]            ;513
000136  6128              STR      r0,[r5,#0x10]         ;513
000138  e9d40101          LDRD     r0,r1,[r4,#4]         ;513
00013c  6141              STR      r1,[r0,#0x14]         ;514
                  |L5.318|
00013e  6820              LDR      r0,[r4,#0]            ;517
000140  2801              CMP      r0,#1                 ;517
000142  d025              BEQ      |L5.400|
000144  d919              BLS      |L5.378|
000146  6861              LDR      r1,[r4,#4]            ;538
000148  b1a9              CBZ      r1,|L5.374|
00014a  68a0              LDR      r0,[r4,#8]            ;538
00014c  b198              CBZ      r0,|L5.374|
00014e  4281              CMP      r1,r0                 ;540
000150  d011              BEQ      |L5.374|
000152  680a              LDR      r2,[r1,#0]            ;540
000154  6803              LDR      r3,[r0,#0]            ;540
000156  429a              CMP      r2,r3                 ;540
000158  d10d              BNE      |L5.374|
00015a  6840              LDR      r0,[r0,#4]            ;542
00015c  6048              STR      r0,[r1,#4]            ;544
00015e  68a0              LDR      r0,[r4,#8]            ;544
000160  6940              LDR      r0,[r0,#0x14]         ;544
000162  60a0              STR      r0,[r4,#8]            ;545
000164  6900              LDR      r0,[r0,#0x10]         ;545
000166  f7fffffe          BL       free
00016a  e9d40101          LDRD     r0,r1,[r4,#4]         ;545
00016e  6108              STR      r0,[r1,#0x10]         ;547
000170  e9d40101          LDRD     r0,r1,[r4,#4]         ;547
000174  6141              STR      r1,[r0,#0x14]         ;548
                  |L5.374|
000176  e9c49a01          STRD     r9,r10,[r4,#4]        ;548
                  |L5.378|
00017a  9817              LDR      r0,[sp,#0x5c]         ;556
00017c  f7fffffe          BL       free
000180  2001              MOVS     r0,#1                 ;558
000182  e76a              B        |L5.90|
                  |L5.388|
000184  6860              LDR      r0,[r4,#4]            ;504
000186  f7fffffe          BL       free
00018a  2000              MOVS     r0,#0                 ;505
00018c  6060              STR      r0,[r4,#4]            ;505
00018e  e7d6              B        |L5.318|
                  |L5.400|
000190  9901              LDR      r1,[sp,#4]            ;519
000192  9812              LDR      r0,[sp,#0x48]         ;519
000194  4288              CMP      r0,r1                 ;519
000196  d9f0              BLS      |L5.378|
000198  6861              LDR      r1,[r4,#4]            ;528
00019a  6048              STR      r0,[r1,#4]            ;530
00019c  a807              ADD      r0,sp,#0x1c           ;530
00019e  9901              LDR      r1,[sp,#4]            ;530
0001a0  f7fffffe          BL       FILE_SYSTEM_generateNandAddress
0001a4  a807              ADD      r0,sp,#0x1c           ;531
0001a6  9917              LDR      r1,[sp,#0x5c]         ;531
0001a8  f7fffffe          BL       FILE_SYSTEM_getLastPageAddressInBlock
0001ac  e9dd1008          LDRD     r1,r0,[sp,#0x20]      ;531
0001b0  eb0010c1          ADD      r0,r0,r1,LSL #7       ;533
0001b4  60a8              STR      r0,[r5,#8]            ;533
0001b6  e7e0              B        |L5.378|
;;;560    
                          ENDP


                          AREA ||i.FILE_SYSTEM_eraseBlock||, CODE, READONLY, ALIGN=1

                  FILE_SYSTEM_eraseBlock PROC
;;;657    
;;;658    tdStatus FILE_SYSTEM_eraseBlock(tdFileSystemPageAddress _block)
000000  b510              PUSH     {r4,lr}
;;;659    	{
;;;660    	MT_uint8 nandStatus;
;;;661    	nand_addr_t address;
;;;662    
;;;663    	if( (_block < FILE_SYSTEM_MEMORY_BLOCKS_AMOUNT) == 0 )
000002  f5b05f80          CMP      r0,#0x1000
000006  d301              BCC      |L6.12|
                  |L6.8|
;;;664    		return Fail;
000008  2002              MOVS     r0,#2
;;;665    
;;;666    	address.block = _block;
;;;667    	address.column = 0;
;;;668    	address.lun = 0;
;;;669    	address.page = 0;
;;;670    
;;;671    	nandStatus = NAND_Block_Erase( address );
;;;672    
;;;673    	if( nandStatus == NAND_BAD_BLOCK )
;;;674    		{
;;;675    		FILE_SYSTEM_setBadBlock( address.block );
;;;676    		return Fail;
;;;677    		}
;;;678    
;;;679    	return Ok;
;;;680    	}
00000a  bd10              POP      {r4,pc}
                  |L6.12|
00000c  4604              MOV      r4,r0                 ;666
00000e  2000              MOVS     r0,#0                 ;667
000010  4603              MOV      r3,r0                 ;671
000012  461a              MOV      r2,r3                 ;671
000014  4621              MOV      r1,r4                 ;671
000016  f7fffffe          BL       NAND_Block_Erase
00001a  2801              CMP      r0,#1                 ;673
00001c  d001              BEQ      |L6.34|
00001e  2001              MOVS     r0,#1                 ;679
000020  bd10              POP      {r4,pc}
                  |L6.34|
000022  4620              MOV      r0,r4                 ;675
000024  f7fffffe          BL       FILE_SYSTEM_setBadBlock
000028  e7ee              B        |L6.8|
;;;681    
                          ENDP


                          AREA ||i.FILE_SYSTEM_generateNandAddress||, CODE, READONLY, ALIGN=1

                  FILE_SYSTEM_generateNandAddress PROC
;;;644    
;;;645    tdStatus FILE_SYSTEM_generateNandAddress(nand_addr_t *_pAddress, tdFileSystemPageAddress _pageAddress)
000000  f5b12f00          CMP      r1,#0x80000
;;;646    	{
000004  d301              BCC      |L7.10|
;;;647    	if( ( _pageAddress < FILE_SYSTEM_MEMORY_MAX_ADDRESS ) == 0 )
;;;648    		return Fail;
000006  2002              MOVS     r0,#2
;;;649    
;;;650    	_pAddress->lun = 0; // const
;;;651    	_pAddress->block = _pageAddress / FILE_SYSTEM_MEMORY_PAGES_AMOUNT;
;;;652    	_pAddress->page = _pageAddress % FILE_SYSTEM_MEMORY_PAGES_AMOUNT;
;;;653    	_pAddress->column = 0; // data bytes per page
;;;654    
;;;655    	return Ok;
;;;656    	}
000008  4770              BX       lr
                  |L7.10|
00000a  09cb              LSRS     r3,r1,#7              ;651
00000c  2200              MOVS     r2,#0                 ;650
00000e  f001017f          AND      r1,r1,#0x7f           ;652
000012  e9c02300          STRD     r2,r3,[r0,#0]         ;652
000016  e9c01202          STRD     r1,r2,[r0,#8]         ;652
00001a  2001              MOVS     r0,#1                 ;655
00001c  4770              BX       lr
;;;657    
                          ENDP


                          AREA ||i.FILE_SYSTEM_getLastPageAddressInBlock||, CODE, READONLY, ALIGN=1

                  FILE_SYSTEM_getLastPageAddressInBlock PROC
;;;364    
;;;365    tdStatus FILE_SYSTEM_getLastPageAddressInBlock(nand_addr_t *_pAddress, uint8_t *_pSparePage)
000000  b530              PUSH     {r4,r5,lr}
;;;366    	{
000002  4604              MOV      r4,r0
000004  b087              SUB      sp,sp,#0x1c
;;;367    	tdSparePageData spareData;
;;;368    	_pAddress->page = 0;
000006  2000              MOVS     r0,#0
000008  460d              MOV      r5,r1                 ;366
00000a  60a0              STR      r0,[r4,#8]
                  |L8.12|
;;;369    
;;;370    	while( _pAddress->page < FILE_SYSTEM_MEMORY_PAGES_AMOUNT )
;;;371    		{
;;;372    		FILE_SYSTEM_getSparePageData(_pAddress, &spareData, _pSparePage);
00000c  462a              MOV      r2,r5
00000e  4669              MOV      r1,sp
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       FILE_SYSTEM_getSparePageData
;;;373    
;;;374    		if( spareData.dataType == 0xFF )
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  28ff              CMP      r0,#0xff
00001c  68a0              LDR      r0,[r4,#8]
00001e  d006              BEQ      |L8.46|
000020  1c40              ADDS     r0,r0,#1
000022  60a0              STR      r0,[r4,#8]            ;370
000024  2880              CMP      r0,#0x80              ;370
;;;375    			{
;;;376    			if( _pAddress->page > 1 )
;;;377    				_pAddress->page -= 1; // take a prev page num;
;;;378    
;;;379    			return Ok;
;;;380    			}
;;;381    
;;;382    		_pAddress->page++;
000026  d3f1              BCC      |L8.12|
                  |L8.40|
000028  1e40              SUBS     r0,r0,#1
;;;383    		}
;;;384    
;;;385    	if( _pAddress->page > 1 )
;;;386    		_pAddress->page -= 1; // take a prev page num;
00002a  60a0              STR      r0,[r4,#8]
00002c  e001              B        |L8.50|
                  |L8.46|
00002e  2801              CMP      r0,#1                 ;376
000030  d8fa              BHI      |L8.40|
                  |L8.50|
;;;387    
;;;388    	return Ok;
;;;389    	}
000032  b007              ADD      sp,sp,#0x1c
000034  2001              MOVS     r0,#1                 ;379
000036  bd30              POP      {r4,r5,pc}
;;;390    
                          ENDP


                          AREA ||i.FILE_SYSTEM_getNextBlockAddress||, CODE, READONLY, ALIGN=1

                  FILE_SYSTEM_getNextBlockAddress PROC
;;;624    
;;;625    tdStatus FILE_SYSTEM_getNextBlockAddress(tdFileSystemPageAddress *_pPageAddress)
000000  6801              LDR      r1,[r0,#0]
;;;626    	{
;;;627    	*_pPageAddress = ((*_pPageAddress / FILE_SYSTEM_MEMORY_PAGES_AMOUNT) + 1) * FILE_SYSTEM_MEMORY_PAGES_AMOUNT;
000002  09c9              LSRS     r1,r1,#7
000004  01c9              LSLS     r1,r1,#7
000006  3180              ADDS     r1,r1,#0x80
;;;628    
;;;629    	if( ( *_pPageAddress < FILE_SYSTEM_MEMORY_MAX_ADDRESS ) == 0 )
000008  6001              STR      r1,[r0,#0]
00000a  f5b12f00          CMP      r1,#0x80000
00000e  d301              BCC      |L9.20|
;;;630    		*_pPageAddress = 0; // make a ring
000010  2100              MOVS     r1,#0
000012  6001              STR      r1,[r0,#0]
                  |L9.20|
;;;631    
;;;632    	return Ok;
000014  2001              MOVS     r0,#1
;;;633    	}
000016  4770              BX       lr
;;;634    
                          ENDP


                          AREA ||i.FILE_SYSTEM_getPreviousBlockAddress||, CODE, READONLY, ALIGN=2

                  FILE_SYSTEM_getPreviousBlockAddress PROC
;;;634    
;;;635    tdStatus FILE_SYSTEM_getPreviousBlockAddress(tdFileSystemPageAddress *_pPageAddress)
000000  6801              LDR      r1,[r0,#0]
;;;636    	{
;;;637    	*_pPageAddress = ((*_pPageAddress / FILE_SYSTEM_MEMORY_PAGES_AMOUNT) - 1) * FILE_SYSTEM_MEMORY_PAGES_AMOUNT;
000002  09c9              LSRS     r1,r1,#7
000004  01c9              LSLS     r1,r1,#7
000006  3980              SUBS     r1,r1,#0x80
;;;638    
;;;639    	if( ( *_pPageAddress < FILE_SYSTEM_MEMORY_MAX_ADDRESS ) == 0 )
000008  6001              STR      r1,[r0,#0]
00000a  f5b12f00          CMP      r1,#0x80000
00000e  d301              BCC      |L10.20|
;;;640    		*_pPageAddress = ((FILE_SYSTEM_MEMORY_MAX_ADDRESS / FILE_SYSTEM_MEMORY_PAGES_AMOUNT) - 1) * FILE_SYSTEM_MEMORY_PAGES_AMOUNT;  // make a ring
000010  4901              LDR      r1,|L10.24|
000012  6001              STR      r1,[r0,#0]
                  |L10.20|
;;;641    
;;;642    	return Ok;
000014  2001              MOVS     r0,#1
;;;643    	}
000016  4770              BX       lr
;;;644    
                          ENDP

                  |L10.24|
                          DCD      0x0007ff80

                          AREA ||i.FILE_SYSTEM_getPtrToBadBlocksList||, CODE, READONLY, ALIGN=2

                  FILE_SYSTEM_getPtrToBadBlocksList PROC
;;;230    
;;;231    tdStatus FILE_SYSTEM_getPtrToBadBlocksList(uint8_t **_pBadBlockListPtr)
000000  4901              LDR      r1,|L11.8|
;;;232    	{
;;;233    	*_pBadBlockListPtr = badBlocksList;
;;;234    	return Ok;
000002  6001              STR      r1,[r0,#0]
000004  2001              MOVS     r0,#1
;;;235    	}
000006  4770              BX       lr
;;;236    
                          ENDP

                  |L11.8|
                          DCD      ||.bss||

                          AREA ||i.FILE_SYSTEM_getSparePageData||, CODE, READONLY, ALIGN=1

                  FILE_SYSTEM_getSparePageData PROC
;;;350    
;;;351    tdStatus FILE_SYSTEM_getSparePageData(const nand_addr_t *_pAddress, tdSparePageData *_pSpareData, uint8_t *_pSparePage)
000000  b57c              PUSH     {r2-r6,lr}
;;;352    	{
000002  460d              MOV      r5,r1
;;;353    	if( FILE_SYSTEM_readSparePage(*_pAddress, _pSparePage, FILE_SYSTEM_MEMORY_SPARE_DATA_SIZE) == TimeOut )
000004  21e0              MOVS     r1,#0xe0
000006  e9cd2100          STRD     r2,r1,[sp,#0]
00000a  4614              MOV      r4,r2                 ;352
00000c  c80f              LDM      r0,{r0-r3}
00000e  f7fffffe          BL       FILE_SYSTEM_readSparePage
000012  2803              CMP      r0,#3
000014  d017              BEQ      |L12.70|
;;;354    		return Fail;
;;;355    
;;;356    	_pSpareData->dataType = FS_M_getDataType( _pSparePage );
000016  7820              LDRB     r0,[r4,#0]
000018  7028              STRB     r0,[r5,#0]
;;;357    	_pSpareData->fileNum = FS_M_getFileNumber( _pSparePage );
00001a  7860              LDRB     r0,[r4,#1]
00001c  f8d41002          LDR      r1,[r4,#2]
000020  ea402001          ORR      r0,r0,r1,LSL #8
;;;358    	_pSpareData->crc8 = FS_M_getCRC8( _pSparePage );
000024  6068              STR      r0,[r5,#4]
000026  7e60              LDRB     r0,[r4,#0x19]
000028  7428              STRB     r0,[r5,#0x10]
;;;359    	_pSpareData->timeStart = FS_M_getTimeBegin( _pSparePage );
00002a  7b60              LDRB     r0,[r4,#0xd]
00002c  f8d4100e          LDR      r1,[r4,#0xe]
000030  ea402001          ORR      r0,r0,r1,LSL #8
;;;360    	_pSpareData->timeEnd = FS_M_getTimeEnd( _pSparePage );
000034  6168              STR      r0,[r5,#0x14]
000036  7c60              LDRB     r0,[r4,#0x11]
000038  f8d41012          LDR      r1,[r4,#0x12]
00003c  ea402001          ORR      r0,r0,r1,LSL #8
;;;361    
;;;362    	return Ok;
000040  61a8              STR      r0,[r5,#0x18]
000042  2001              MOVS     r0,#1
;;;363    	}
000044  bd7c              POP      {r2-r6,pc}
                  |L12.70|
000046  2002              MOVS     r0,#2                 ;354
000048  bd7c              POP      {r2-r6,pc}
;;;364    
                          ENDP


                          AREA ||i.FILE_SYSTEM_init||, CODE, READONLY, ALIGN=2

                  FILE_SYSTEM_init PROC
;;;176    //#define DEBUG_CLEAR_BLOCKS
;;;177    tdStatus FILE_SYSTEM_init(tdFat *_pFat)
000000  b530              PUSH     {r4,r5,lr}
;;;178    	{
000002  b085              SUB      sp,sp,#0x14
000004  4605              MOV      r5,r0
;;;179    	SPI_HandleTypeDef *pHspiRam1;
;;;180    	SPI_HandleTypeDef *pHspiRam2;
;;;181    	tdSpiCS chipSelectRam1;
;;;182    	tdSpiCS chipSelectRam2;
;;;183    
;;;184    	Init_Driver();
000006  f7fffffe          BL       Init_Driver
;;;185    
;;;186    #ifdef USB_HARDWARE_FS
;;;187    	#ifdef EEPROM_SPI_1
;;;188    		pHspiRam1 = &hspi1;
;;;189    		pHspiRam2 = &hspi1;
;;;190    	#else
;;;191    		pHspiRam1 = &hspi3;
;;;192    		pHspiRam2 = &hspi3;
;;;193    	#endif
;;;194    
;;;195    	chipSelectRam1.pGPIO = GPIOB;
;;;196    	chipSelectRam1.pin = GPIO_PIN_11;
;;;197    	chipSelectRam2.pGPIO = GPIOB;
;;;198    	chipSelectRam2.pin = GPIO_PIN_12;
;;;199    
;;;200    #else
;;;201    	pHspiRam1 = &hspi1;
;;;202    	pHspiRam2 = &hspi1;
;;;203    	chipSelectRam1.pGPIO = GPIOC;
00000a  4a0f              LDR      r2,|L13.72|
;;;204    	chipSelectRam1.pin = GPIO_PIN_4;
00000c  2010              MOVS     r0,#0x10
00000e  e9cd2001          STRD     r2,r0,[sp,#4]
;;;205    	chipSelectRam2.pGPIO = GPIOC;
;;;206    	chipSelectRam2.pin = GPIO_PIN_5;
000012  2020              MOVS     r0,#0x20
000014  e9cd2003          STRD     r2,r0,[sp,#0xc]
000018  490a              LDR      r1,|L13.68|
;;;207    
;;;208    #endif
;;;209    
;;;210    	SPI_DRIVER_initDevice(&RAM_1, pHspiRam1, &chipSelectRam1);
00001a  aa01              ADD      r2,sp,#4
00001c  460c              MOV      r4,r1                 ;202
00001e  480b              LDR      r0,|L13.76|
000020  f7fffffe          BL       SPI_DRIVER_initDevice
;;;211    	SPI_DRIVER_initDevice(&RAM_2, pHspiRam2, &chipSelectRam2);
000024  4809              LDR      r0,|L13.76|
000026  aa03              ADD      r2,sp,#0xc
000028  4621              MOV      r1,r4
00002a  3010              ADDS     r0,r0,#0x10
00002c  f7fffffe          BL       SPI_DRIVER_initDevice
;;;212    
;;;213    	FILE_SYSTEM_setDataRam();
000030  f7fffffe          BL       FILE_SYSTEM_setDataRam
;;;214    
;;;215    	FILE_SYSTEM_readBadBlocksList();
000034  f7fffffe          BL       FILE_SYSTEM_readBadBlocksList
;;;216    
;;;217    #ifdef DEBUG_CLEAR_BLOCKS
;;;218    		for(int block = 0; block < 163; block++)
;;;219    			FILE_SYSTEM_eraseBlock( block );
;;;220    
;;;221    		#define BLOCKS_TO_CLEAR 5
;;;222    		for(int block = FILE_SYSTEM_MEMORY_BLOCKS_AMOUNT - BLOCKS_TO_CLEAR; block < FILE_SYSTEM_MEMORY_BLOCKS_AMOUNT; block++)
;;;223    			FILE_SYSTEM_eraseBlock( block );
;;;224    #endif
;;;225    
;;;226    	FILE_SYSTEM_createFatTable( _pFat );
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       FILE_SYSTEM_createFatTable
;;;227    
;;;228    	return Ok;
;;;229    	}
00003e  b005              ADD      sp,sp,#0x14
000040  2001              MOVS     r0,#1                 ;228
000042  bd30              POP      {r4,r5,pc}
;;;230    
                          ENDP

                  |L13.68|
                          DCD      hspi1
                  |L13.72|
                          DCD      0x40020800
                  |L13.76|
                          DCD      ||.bss||+0x200

                          AREA ||i.FILE_SYSTEM_isBadBlock||, CODE, READONLY, ALIGN=2

                  FILE_SYSTEM_isBadBlock PROC
;;;330    
;;;331    uint8_t FILE_SYSTEM_isBadBlock(tdFileSystemBlock _block)
000000  f5b05f80          CMP      r0,#0x1000
;;;332    	{
000004  d208              BCS      |L14.24|
;;;333    	int byte, bit;
;;;334    	uint8_t *pByte;
;;;335    	if( (_block < FILE_SYSTEM_MEMORY_BLOCKS_AMOUNT) == 0 )
;;;336    		return 1;
;;;337    
;;;338    	byte = _block / MWN_M_BITS_IN_BYTE;
;;;339    	bit = _block % MWN_M_BITS_IN_BYTE;
;;;340    
;;;341    	pByte = &badBlocksList[ byte ];
000006  4a06              LDR      r2,|L14.32|
000008  08c1              LSRS     r1,r0,#3              ;338
00000a  f0000007          AND      r0,r0,#7              ;339
;;;342    
;;;343    	return (*pByte & (1 << bit)) ? 1 : 0;
00000e  5c51              LDRB     r1,[r2,r1]
000010  2201              MOVS     r2,#1
000012  4082              LSLS     r2,r2,r0
000014  4211              TST      r1,r2
000016  d001              BEQ      |L14.28|
                  |L14.24|
000018  2001              MOVS     r0,#1
;;;344    	}
00001a  4770              BX       lr
                  |L14.28|
00001c  2000              MOVS     r0,#0                 ;343
00001e  4770              BX       lr
;;;345    
                          ENDP

                  |L14.32|
                          DCD      ||.bss||

                          AREA ||i.FILE_SYSTEM_isBadBlockAtAddress||, CODE, READONLY, ALIGN=1

                  FILE_SYSTEM_isBadBlockAtAddress PROC
;;;345    
;;;346    uint8_t FILE_SYSTEM_isBadBlockAtAddress(tdFileSystemPageAddress _pageAddress)
000000  09c0              LSRS     r0,r0,#7
;;;347    	{
;;;348    	return FILE_SYSTEM_isBadBlock( _pageAddress / FILE_SYSTEM_MEMORY_PAGES_AMOUNT );
000002  f7ffbffe          B.W      FILE_SYSTEM_isBadBlock
;;;349    	}
;;;350    
                          ENDP


                          AREA ||i.FILE_SYSTEM_isRamPresent||, CODE, READONLY, ALIGN=1

                  FILE_SYSTEM_isRamPresent PROC
;;;13     
;;;14     uint8_t FILE_SYSTEM_isRamPresent(tdSpiDevice *_pRam)
000000  b57c              PUSH     {r2-r6,lr}
;;;15     	{
;;;16     	uint8_t twentyThreeWrite = 23;
;;;17     	uint8_t twentyThreeRead = 0;
000002  2100              MOVS     r1,#0
000004  4605              MOV      r5,r0                 ;15
000006  2217              MOVS     r2,#0x17              ;16
000008  f88d1000          STRB     r1,[sp,#0]
;;;18     	uint8_t fortyTwoWrite = 42;
00000c  242a              MOVS     r4,#0x2a
;;;19     	uint8_t fortyTwoRead = 0;
00000e  f88d1004          STRB     r1,[sp,#4]
;;;20     
;;;21     	EEPROM_DRIVER_writeByte(_pRam, 0x0000, twentyThreeWrite);
000012  f7fffffe          BL       EEPROM_DRIVER_writeByte
;;;22     	EEPROM_DRIVER_writeByte(_pRam, 0xFFFF, fortyTwoWrite);
000016  4622              MOV      r2,r4
000018  f64f74ff          MOV      r4,#0xffff
00001c  4621              MOV      r1,r4
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       EEPROM_DRIVER_writeByte
;;;23     
;;;24     	EEPROM_DRIVER_readByte(_pRam, 0x0000, &twentyThreeRead);
000024  466a              MOV      r2,sp
000026  2100              MOVS     r1,#0
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       EEPROM_DRIVER_readByte
;;;25     	EEPROM_DRIVER_readByte(_pRam, 0xFFFF, &fortyTwoRead);
00002e  aa01              ADD      r2,sp,#4
000030  4621              MOV      r1,r4
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       EEPROM_DRIVER_readByte
;;;26     
;;;27     	if( twentyThreeWrite == twentyThreeRead || fortyTwoWrite == fortyTwoRead )
000038  f89d0000          LDRB     r0,[sp,#0]
00003c  2817              CMP      r0,#0x17
00003e  d005              BEQ      |L16.76|
000040  f89d0004          LDRB     r0,[sp,#4]
000044  282a              CMP      r0,#0x2a
000046  d001              BEQ      |L16.76|
;;;28     		return 1;
;;;29     
;;;30     	return 0;
000048  2000              MOVS     r0,#0
;;;31     	}
00004a  bd7c              POP      {r2-r6,pc}
                  |L16.76|
00004c  2001              MOVS     r0,#1                 ;28
00004e  bd7c              POP      {r2-r6,pc}
;;;32     
                          ENDP


                          AREA ||i.FILE_SYSTEM_newFile||, CODE, READONLY, ALIGN=1

                  FILE_SYSTEM_newFile PROC
;;;582    
;;;583    tdStatus FILE_SYSTEM_newFile(tdFat *_pFat)
000000  b570              PUSH     {r4-r6,lr}
;;;584    	{
000002  0004              MOVS     r4,r0
000004  d020              BEQ      |L17.72|
;;;585    	uint16_t attempt;
;;;586    
;;;587    	if( _pFat == NULL )
;;;588    		return Fail;
;;;589    
;;;590    	if( _pFat->filesAmount == 0 )
000006  6820              LDR      r0,[r4,#0]
000008  2500              MOVS     r5,#0
00000a  2800              CMP      r0,#0
;;;591    		{
;;;592    		_pFat->pFirstFile = malloc(sizeof(tdFileNode));
;;;593    		_pFat->pFirstFile->pNextFile = NULL;
;;;594    		_pFat->pFirstFile->pPreviousFile = NULL;
;;;595    		_pFat->pFirstFile->fileNum = 1;
;;;596    		_pFat->pFirstFile->addressStart = 0; // Life Hack;) In a few instructions, we call FILE_SYSTEM_getAddressForNewFile	and it generate new address - // 0 if 0 block not bad
;;;597    		}
;;;598    	else
;;;599    		{
;;;600    		_pFat->pFirstFile->pNextFile = malloc(sizeof(tdFileNode));
00000c  f04f0018          MOV      r0,#0x18
000010  d01c              BEQ      |L17.76|
000012  f7fffffe          BL       malloc
000016  6861              LDR      r1,[r4,#4]
;;;601    		_pFat->pFirstFile->pNextFile->pPreviousFile = _pFat->pFirstFile;
000018  6108              STR      r0,[r1,#0x10]
00001a  6861              LDR      r1,[r4,#4]
;;;602    		_pFat->pFirstFile = _pFat->pFirstFile->pNextFile;
00001c  6141              STR      r1,[r0,#0x14]
00001e  6860              LDR      r0,[r4,#4]
000020  6900              LDR      r0,[r0,#0x10]
;;;603    
;;;604    		_pFat->pFirstFile->pNextFile = NULL;
000022  6060              STR      r0,[r4,#4]
;;;605    		_pFat->pFirstFile->fileNum = _pFat->pFirstFile->pPreviousFile->fileNum + 1;
000024  6105              STR      r5,[r0,#0x10]
000026  6860              LDR      r0,[r4,#4]
000028  6941              LDR      r1,[r0,#0x14]
00002a  6809              LDR      r1,[r1,#0]
00002c  1c49              ADDS     r1,r1,#1
;;;606    		_pFat->pFirstFile->addressStart = _pFat->pFirstFile->pPreviousFile->addressEnd;
00002e  6001              STR      r1,[r0,#0]
000030  6860              LDR      r0,[r4,#4]
000032  6941              LDR      r1,[r0,#0x14]
000034  6889              LDR      r1,[r1,#8]
;;;607    
;;;608    		FILE_SYSTEM_getNextBlockAddress(&_pFat->pFirstFile->addressStart);
000036  6041              STR      r1,[r0,#4]
000038  6860              LDR      r0,[r4,#4]
00003a  1d00              ADDS     r0,r0,#4
00003c  f7fffffe          BL       FILE_SYSTEM_getNextBlockAddress
                  |L17.64|
;;;609    		}
;;;610    
;;;611    	attempt = 0;
000040  2300              MOVS     r3,#0
;;;612    	while( FILE_SYSTEM_isBadBlockAtAddress(_pFat->pFirstFile->addressStart) == 1 && attempt++ < FILE_SYSTEM_MEMORY_BLOCKS_AMOUNT )
000042  f44f5680          MOV      r6,#0x1000
000046  e011              B        |L17.108|
                  |L17.72|
000048  2002              MOVS     r0,#2                 ;588
;;;613    		{
;;;614    		FILE_SYSTEM_getNextBlockAddress(&_pFat->pFirstFile->addressStart);
;;;615    		}
;;;616    
;;;617    	_pFat->pFirstFile->addressEnd = _pFat->pFirstFile->addressStart;
;;;618    	_pFat->pFirstFile->filePageAddress = 0;
;;;619    
;;;620    	_pFat->filesAmount++;
;;;621    
;;;622    	return Ok;
;;;623    	}
00004a  bd70              POP      {r4-r6,pc}
                  |L17.76|
00004c  f7fffffe          BL       malloc
000050  6060              STR      r0,[r4,#4]            ;593
000052  6105              STR      r5,[r0,#0x10]         ;594
000054  6860              LDR      r0,[r4,#4]            ;594
000056  6145              STR      r5,[r0,#0x14]         ;595
000058  6861              LDR      r1,[r4,#4]            ;595
00005a  2001              MOVS     r0,#1                 ;595
00005c  6008              STR      r0,[r1,#0]            ;596
00005e  6860              LDR      r0,[r4,#4]            ;596
000060  6045              STR      r5,[r0,#4]            ;596
000062  e7ed              B        |L17.64|
                  |L17.100|
000064  6860              LDR      r0,[r4,#4]            ;614
000066  1d00              ADDS     r0,r0,#4              ;614
000068  f7fffffe          BL       FILE_SYSTEM_getNextBlockAddress
                  |L17.108|
00006c  6860              LDR      r0,[r4,#4]            ;612
00006e  6840              LDR      r0,[r0,#4]            ;612
000070  f7fffffe          BL       FILE_SYSTEM_isBadBlockAtAddress
000074  2801              CMP      r0,#1                 ;612
000076  d104              BNE      |L17.130|
000078  4618              MOV      r0,r3                 ;612
00007a  1c5b              ADDS     r3,r3,#1              ;612
00007c  b29b              UXTH     r3,r3                 ;612
00007e  42b0              CMP      r0,r6                 ;612
000080  d3f0              BCC      |L17.100|
                  |L17.130|
000082  6860              LDR      r0,[r4,#4]            ;617
000084  6841              LDR      r1,[r0,#4]            ;617
000086  6081              STR      r1,[r0,#8]            ;618
000088  6860              LDR      r0,[r4,#4]            ;618
00008a  60c5              STR      r5,[r0,#0xc]          ;620
00008c  6820              LDR      r0,[r4,#0]            ;620
00008e  1c40              ADDS     r0,r0,#1              ;620
000090  6020              STR      r0,[r4,#0]            ;622
000092  2001              MOVS     r0,#1                 ;622
000094  bd70              POP      {r4-r6,pc}
;;;624    
                          ENDP


                          AREA ||i.FILE_SYSTEM_readBadBlocksList||, CODE, READONLY, ALIGN=2

                  FILE_SYSTEM_readBadBlocksList PROC
;;;283    
;;;284    tdStatus FILE_SYSTEM_readBadBlocksList(void)
000000  4807              LDR      r0,|L18.32|
;;;285    	{
000002  b510              PUSH     {r4,lr}
;;;286    	if( EEPROM_DRIVER_readBuffer(pFileSystemDataRam, FILE_SYSTEM_ADDRESS_OF_BAD_BLOCKS_LIST, badBlocksList, FILE_SYSTEM_MEMORY_BAD_BLOCK_LIST_SIZE ) != Ok )
000004  f44f7300          MOV      r3,#0x200
000008  4a04              LDR      r2,|L18.28|
00000a  1059              ASRS     r1,r3,#1
00000c  6800              LDR      r0,[r0,#0]  ; pFileSystemDataRam
00000e  f7fffffe          BL       EEPROM_DRIVER_readBuffer
000012  2801              CMP      r0,#1
000014  d000              BEQ      |L18.24|
;;;287    		return Fail;
000016  2002              MOVS     r0,#2
                  |L18.24|
;;;288    
;;;289    	return Ok;
;;;290    	}
000018  bd10              POP      {r4,pc}
;;;291    
                          ENDP

00001a  0000              DCW      0x0000
                  |L18.28|
                          DCD      ||.bss||
                  |L18.32|
                          DCD      ||.data||

                          AREA ||i.FILE_SYSTEM_readConfigurationTable||, CODE, READONLY, ALIGN=2

                  FILE_SYSTEM_readConfigurationTable PROC
;;;89     
;;;90     tdStatus FILE_SYSTEM_readConfigurationTable(tdConfigurationTable *_pConfigTable)
000000  b53e              PUSH     {r1-r5,lr}
;;;91     	{
;;;92     	uint8_t exist;
;;;93     	uint8_t sbdBuff[ 4 ];
;;;94     	uint8_t NTD;
;;;95     
;;;96     	EEPROM_DRIVER_readByte(pFileSystemDataRam, FILE_SYSTEM_ADDRESS_OF_CONFIGURATION_TABLE_EXIST, &exist);
000002  4d1e              LDR      r5,|L19.124|
000004  4604              MOV      r4,r0                 ;91
000006  aa01              ADD      r2,sp,#4
000008  f44f617f          MOV      r1,#0xff0
00000c  6828              LDR      r0,[r5,#0]  ; pFileSystemDataRam
00000e  f7fffffe          BL       EEPROM_DRIVER_readByte
;;;97     
;;;98     	_pConfigTable->exist = exist;
000012  f89d0004          LDRB     r0,[sp,#4]
000016  7220              STRB     r0,[r4,#8]
;;;99     
;;;100    	if( _pConfigTable->exist == 1 )
000018  2801              CMP      r0,#1
00001a  d004              BEQ      |L19.38|
;;;101    		{
;;;102    		if( EEPROM_DRIVER_readBuffer(pFileSystemDataRam, FILE_SYSTEM_ADDRESS_OF_CONFIGURATION_TABLE_SBD, sbdBuff, 4 ) != Ok )
;;;103    			return Fail;
;;;104    
;;;105    		if( EEPROM_DRIVER_readByte(pFileSystemDataRam, FILE_SYSTEM_ADDRESS_OF_CONFIGURATION_TABLE_NTD, &NTD ) != Ok )
;;;106    			return Fail;
;;;107    
;;;108    		_pConfigTable->SBD = MWN_M_getValue32FromBuffer(sbdBuff, 0);
;;;109    		_pConfigTable->NTD = NTD;
;;;110    		_pConfigTable->size = 29 + _pConfigTable->SBD + _pConfigTable->NTD;
;;;111    
;;;112    		if( EEPROM_DRIVER_readBuffer(pFileSystemDataRam, FILE_SYSTEM_ADDRESS_OF_CONFIGURATION_TABLE, _pConfigTable->data, _pConfigTable->size ) != Ok )
;;;113    			return Fail;
;;;114    		}
;;;115    	else
;;;116    		{
;;;117    		FILE_SYSTEM_satDefaultConfigurationTable(_pConfigTable);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       FILE_SYSTEM_satDefaultConfigurationTable
                  |L19.34|
;;;118    		}
;;;119    
;;;120    	return Ok;
000022  2001              MOVS     r0,#1
;;;121    	}
000024  bd3e              POP      {r1-r5,pc}
                  |L19.38|
000026  2304              MOVS     r3,#4                 ;102
000028  466a              MOV      r2,sp                 ;102
00002a  f64071f5          MOV      r1,#0xff5             ;102
00002e  6828              LDR      r0,[r5,#0]            ;102  ; pFileSystemDataRam
000030  f7fffffe          BL       EEPROM_DRIVER_readBuffer
000034  2801              CMP      r0,#1                 ;102
000036  d11e              BNE      |L19.118|
000038  aa02              ADD      r2,sp,#8              ;105
00003a  f64071f9          MOV      r1,#0xff9             ;105
00003e  6828              LDR      r0,[r5,#0]            ;105  ; pFileSystemDataRam
000040  f7fffffe          BL       EEPROM_DRIVER_readByte
000044  2801              CMP      r0,#1                 ;105
000046  d116              BNE      |L19.118|
000048  f89d0000          LDRB     r0,[sp,#0]            ;108
00004c  f8dd1001          LDR      r1,[sp,#1]            ;108
000050  f104020a          ADD      r2,r4,#0xa            ;112
000054  ea402101          ORR      r1,r0,r1,LSL #8       ;108
000058  6061              STR      r1,[r4,#4]            ;109
00005a  f89d0008          LDRB     r0,[sp,#8]            ;109
00005e  7260              STRB     r0,[r4,#9]            ;109
000060  4408              ADD      r0,r0,r1              ;110
000062  301d              ADDS     r0,r0,#0x1d           ;110
000064  b283              UXTH     r3,r0                 ;112
000066  6020              STR      r0,[r4,#0]            ;112
000068  f44f5180          MOV      r1,#0x1000            ;112
00006c  6828              LDR      r0,[r5,#0]            ;112  ; pFileSystemDataRam
00006e  f7fffffe          BL       EEPROM_DRIVER_readBuffer
000072  2801              CMP      r0,#1                 ;112
000074  d0d5              BEQ      |L19.34|
                  |L19.118|
000076  2002              MOVS     r0,#2                 ;113
000078  bd3e              POP      {r1-r5,pc}
;;;122    
                          ENDP

00007a  0000              DCW      0x0000
                  |L19.124|
                          DCD      ||.data||

                          AREA ||i.FILE_SYSTEM_readHoltConfiguration||, CODE, READONLY, ALIGN=2

                  FILE_SYSTEM_readHoltConfiguration PROC
;;;144    
;;;145    tdStatus FILE_SYSTEM_readHoltConfiguration(tdArinc *_pArinc)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;146    	{
;;;147    	tdArincChannel *pChannel;
;;;148    	uint16_t address;
;;;149    	uint8_t channel;
;;;150    	uint8_t enable;
;;;151    	uint8_t freq;
;;;152    
;;;153    	_pArinc->enabledChannels = 0;
000004  2200              MOVS     r2,#0
000006  f5005100          ADD      r1,r0,#0x2000
;;;154    
;;;155    	channel = 0;
;;;156    	pChannel = &_pArinc->channel[ 0 ];
;;;157    	address = FILE_SYSTEM_ADDRESS_OF_DATA_TYPE_TABLE;
;;;158    	while( channel < HOLT_CORE_CHANNELS_AMOUNT )
;;;159    		{
;;;160    		EEPROM_DRIVER_readByte(pFileSystemDataRam, address + 0, &enable);
00000a  4f16              LDR      r7,|L20.100|
00000c  4688              MOV      r8,r1                 ;153
00000e  f8812184          STRB     r2,[r1,#0x184]        ;153
000012  4616              MOV      r6,r2                 ;155
000014  1d04              ADDS     r4,r0,#4              ;155
000016  f44f6500          MOV      r5,#0x800             ;157
                  |L20.26|
00001a  466a              MOV      r2,sp
00001c  4629              MOV      r1,r5
00001e  6838              LDR      r0,[r7,#0]  ; pFileSystemDataRam
000020  f7fffffe          BL       EEPROM_DRIVER_readByte
;;;161    		EEPROM_DRIVER_readByte(pFileSystemDataRam, address + 1, &freq);
000024  1c68              ADDS     r0,r5,#1
000026  b281              UXTH     r1,r0
000028  aa01              ADD      r2,sp,#4
00002a  6838              LDR      r0,[r7,#0]  ; pFileSystemDataRam
00002c  f7fffffe          BL       EEPROM_DRIVER_readByte
;;;162    
;;;163    		pChannel->status.enable = enable;
000030  f89d0000          LDRB     r0,[sp,#0]
000034  f8840408          STRB     r0,[r4,#0x408]
;;;164    		pChannel->freq = (tdArincFreq)freq;
000038  f89d1004          LDRB     r1,[sp,#4]
00003c  f884140c          STRB     r1,[r4,#0x40c]
;;;165    
;;;166    		if( pChannel->status.enable == 1 )
000040  2801              CMP      r0,#1
000042  d104              BNE      |L20.78|
;;;167    			_pArinc->enabledChannels++;
000044  f8980184          LDRB     r0,[r8,#0x184]
000048  1c40              ADDS     r0,r0,#1
00004a  f8880184          STRB     r0,[r8,#0x184]
                  |L20.78|
00004e  1cad              ADDS     r5,r5,#2
;;;168    
;;;169    		address += FILE_SYSTEM_DATA_TYPE_SIZE;
000050  1c76              ADDS     r6,r6,#1
;;;170    		pChannel++;
;;;171    		channel++;
000052  b2f6              UXTB     r6,r6
000054  b2ad              UXTH     r5,r5                 ;169
000056  f5046482          ADD      r4,r4,#0x410
00005a  2e08              CMP      r6,#8                 ;158
00005c  d3dd              BCC      |L20.26|
;;;172    		}
;;;173    	return Ok;
00005e  2001              MOVS     r0,#1
;;;174    	}
000060  e8bd81fc          POP      {r2-r8,pc}
;;;175    
                          ENDP

                  |L20.100|
                          DCD      ||.data||

                          AREA ||i.FILE_SYSTEM_readPage||, CODE, READONLY, ALIGN=1

                  FILE_SYSTEM_readPage PROC
;;;700    
;;;701    tdStatus FILE_SYSTEM_readPage(nand_addr_t _address, tdFileSystemData *_pData, int _size)
000000  b57c              PUSH     {r2-r6,lr}
;;;702    	{
000002  e9dd4506          LDRD     r4,r5,[sp,#0x18]
000006  e9cd4500          STRD     r4,r5,[sp,#0]
;;;703    	if( NAND_Page_Read(_address, _pData, _size) != NAND_SUCCESS )
00000a  f7fffffe          BL       NAND_Page_Read
00000e  b108              CBZ      r0,|L21.20|
;;;704    		return Fail;
000010  2002              MOVS     r0,#2
;;;705    
;;;706    	return Ok;
;;;707    	}
000012  bd7c              POP      {r2-r6,pc}
                  |L21.20|
000014  2001              MOVS     r0,#1                 ;706
000016  bd7c              POP      {r2-r6,pc}
;;;708    
                          ENDP


                          AREA ||i.FILE_SYSTEM_readPage_||, CODE, READONLY, ALIGN=1

                  FILE_SYSTEM_readPage_ PROC
;;;708    
;;;709    tdStatus FILE_SYSTEM_readPage_(tdFileSystemPageAddress _pageAddress, tdFileSystemData *_pData, int _size)
000000  b530              PUSH     {r4,r5,lr}
;;;710    	{
000002  460c              MOV      r4,r1
000004  b087              SUB      sp,sp,#0x1c
;;;711    	nand_addr_t address;
;;;712    	FILE_SYSTEM_generateNandAddress(&address, _pageAddress);
000006  4601              MOV      r1,r0
000008  4615              MOV      r5,r2                 ;710
00000a  a802              ADD      r0,sp,#8
00000c  f7fffffe          BL       FILE_SYSTEM_generateNandAddress
000010  f10d0c08          ADD      r12,sp,#8
000014  e9cd4500          STRD     r4,r5,[sp,#0]
000018  e89c000f          LDM      r12,{r0-r3}
;;;713    
;;;714    	if( FILE_SYSTEM_readPage(address, _pData, _size) != Ok )
00001c  f7fffffe          BL       FILE_SYSTEM_readPage
000020  2801              CMP      r0,#1
000022  d000              BEQ      |L22.38|
;;;715    		return Fail;
000024  2002              MOVS     r0,#2
                  |L22.38|
;;;716    
;;;717    	return Ok;
;;;718    	}
000026  b007              ADD      sp,sp,#0x1c
000028  bd30              POP      {r4,r5,pc}
;;;719    
                          ENDP


                          AREA ||i.FILE_SYSTEM_readSparePage||, CODE, READONLY, ALIGN=1

                  FILE_SYSTEM_readSparePage PROC
;;;738    
;;;739    tdStatus FILE_SYSTEM_readSparePage(nand_addr_t _address, tdFileSystemData *_pData, int _size)
000000  b57c              PUSH     {r2-r6,lr}
;;;740    	{
000002  e9dd4506          LDRD     r4,r5,[sp,#0x18]
000006  e9cd4500          STRD     r4,r5,[sp,#0]
;;;741    	if( NAND_Spare_Read(_address, _pData, _size) != NAND_SUCCESS )
00000a  f7fffffe          BL       NAND_Spare_Read
00000e  b108              CBZ      r0,|L23.20|
;;;742    		return Fail;
000010  2002              MOVS     r0,#2
;;;743    
;;;744    	return Ok;
;;;745    	}
000012  bd7c              POP      {r2-r6,pc}
                  |L23.20|
000014  2001              MOVS     r0,#1                 ;744
000016  bd7c              POP      {r2-r6,pc}
;;;746    
                          ENDP


                          AREA ||i.FILE_SYSTEM_readSparePage_||, CODE, READONLY, ALIGN=1

                  FILE_SYSTEM_readSparePage_ PROC
;;;746    
;;;747    tdStatus FILE_SYSTEM_readSparePage_(tdFileSystemPageAddress _pageAddress, tdFileSystemData *_pData, int _size)
000000  b530              PUSH     {r4,r5,lr}
;;;748    	{
000002  460c              MOV      r4,r1
000004  b087              SUB      sp,sp,#0x1c
;;;749    	nand_addr_t address;
;;;750    	FILE_SYSTEM_generateNandAddress(&address, _pageAddress);
000006  4601              MOV      r1,r0
000008  4615              MOV      r5,r2                 ;748
00000a  a802              ADD      r0,sp,#8
00000c  f7fffffe          BL       FILE_SYSTEM_generateNandAddress
000010  f10d0c08          ADD      r12,sp,#8
000014  e9cd4500          STRD     r4,r5,[sp,#0]
000018  e89c000f          LDM      r12,{r0-r3}
;;;751    
;;;752    	if( FILE_SYSTEM_readSparePage(address, _pData, _size) != Ok )
00001c  f7fffffe          BL       FILE_SYSTEM_readSparePage
000020  2801              CMP      r0,#1
000022  d000              BEQ      |L24.38|
;;;753    		return Fail;
000024  2002              MOVS     r0,#2
                  |L24.38|
;;;754    
;;;755    	return Ok;
;;;756    	}
000026  b007              ADD      sp,sp,#0x1c
000028  bd30              POP      {r4,r5,pc}
;;;757    
                          ENDP


                          AREA ||i.FILE_SYSTEM_satDefaultConfigurationTable||, CODE, READONLY, ALIGN=1

                  FILE_SYSTEM_satDefaultConfigurationTable PROC
;;;56     
;;;57     tdStatus FILE_SYSTEM_satDefaultConfigurationTable(tdConfigurationTable *_pConfigTable)
000000  b510              PUSH     {r4,lr}
;;;58     	{
;;;59     	_pConfigTable->SBD = 0;
000002  2100              MOVS     r1,#0
;;;60     	_pConfigTable->NTD = 1;
000004  2301              MOVS     r3,#1
000006  6041              STR      r1,[r0,#4]
000008  7243              STRB     r3,[r0,#9]
;;;61     	_pConfigTable->size = 29 + _pConfigTable->SBD + _pConfigTable->NTD;
00000a  221e              MOVS     r2,#0x1e
00000c  f8402b07          STR      r2,[r0],#7
;;;62     
;;;63     	MWN_M_setValue32ToBuffer((unsigned int)FILE_SYSTEM_MEMORY_SPARE_DATA_SIZE, _pConfigTable->data, FILE_SYSTEM_CONFIGURATION_TABLE_POSITION_SSD );
000010  22e0              MOVS     r2,#0xe0
000012  7181              STRB     r1,[r0,#6]
000014  7141              STRB     r1,[r0,#5]
000016  7101              STRB     r1,[r0,#4]
000018  70c2              STRB     r2,[r0,#3]
;;;64     	MWN_M_setValue32ToBuffer((unsigned int)FILE_SYSTEM_MEMORY_PAGE_DATA_SIZE,  _pConfigTable->data, FILE_SYSTEM_CONFIGURATION_TABLE_POSITION_SMD );
00001a  7281              STRB     r1,[r0,#0xa]
00001c  7241              STRB     r1,[r0,#9]
00001e  2210              MOVS     r2,#0x10
000020  7202              STRB     r2,[r0,#8]
000022  71c1              STRB     r1,[r0,#7]
;;;65     	MWN_M_setValue32ToBuffer((unsigned int)FILE_SYSTEM_MEMORY_PAGES_AMOUNT,    _pConfigTable->data, FILE_SYSTEM_CONFIGURATION_TABLE_POSITION_SB );
000024  7381              STRB     r1,[r0,#0xe]
000026  7341              STRB     r1,[r0,#0xd]
000028  7301              STRB     r1,[r0,#0xc]
00002a  2480              MOVS     r4,#0x80
00002c  72c4              STRB     r4,[r0,#0xb]
;;;66     	MWN_M_setValue32ToBuffer((unsigned int)FILE_SYSTEM_MEMORY_BLOCKS_AMOUNT,   _pConfigTable->data, FILE_SYSTEM_CONFIGURATION_TABLE_POSITION_SM );
00002e  7481              STRB     r1,[r0,#0x12]
000030  7441              STRB     r1,[r0,#0x11]
000032  7402              STRB     r2,[r0,#0x10]
000034  73c1              STRB     r1,[r0,#0xf]
;;;67     	MWN_M_setValue32ToBuffer((unsigned int)1,                                  _pConfigTable->data, FILE_SYSTEM_CONFIGURATION_TABLE_POSITION_SD );
000036  7581              STRB     r1,[r0,#0x16]
000038  7541              STRB     r1,[r0,#0x15]
00003a  7501              STRB     r1,[r0,#0x14]
00003c  74c3              STRB     r3,[r0,#0x13]
;;;68     	MWN_M_setValue32ToBuffer((unsigned int)0,                                  _pConfigTable->data, FILE_SYSTEM_CONFIGURATION_TABLE_POSITION_SERIAL_N );
00003e  7681              STRB     r1,[r0,#0x1a]
000040  7641              STRB     r1,[r0,#0x19]
000042  7601              STRB     r1,[r0,#0x18]
000044  75c1              STRB     r1,[r0,#0x17]
;;;69     	MWN_M_setValue32ToBuffer((unsigned int)_pConfigTable->SBD,                 _pConfigTable->data, FILE_SYSTEM_CONFIGURATION_TABLE_POSITION_SBD );
000046  7781              STRB     r1,[r0,#0x1e]
000048  7741              STRB     r1,[r0,#0x1d]
00004a  7701              STRB     r1,[r0,#0x1c]
00004c  76c1              STRB     r1,[r0,#0x1b]
;;;70     	MWN_M_setValue8ToBuffer(_pConfigTable->NTD,                                _pConfigTable->data, FILE_SYSTEM_CONFIGURATION_TABLE_POSITION_NTD );
00004e  77c3              STRB     r3,[r0,#0x1f]
000050  3020              ADDS     r0,r0,#0x20
;;;71     	MWN_M_setValue8ToBuffer(0x10/*ARINC_DATA*/,                         			 _pConfigTable->data, 29 + _pConfigTable->SBD );
000052  540a              STRB     r2,[r1,r0]
;;;72     
;;;73     	return Ok;
000054  2001              MOVS     r0,#1
;;;74     	}
000056  bd10              POP      {r4,pc}
;;;75     
                          ENDP


                          AREA ||i.FILE_SYSTEM_saveBadBlockStatusToMemmory||, CODE, READONLY, ALIGN=2

                  FILE_SYSTEM_saveBadBlockStatusToMemmory PROC
;;;291    
;;;292    tdStatus FILE_SYSTEM_saveBadBlockStatusToMemmory(tdFileSystemBlock _block, uint8_t _status)
000000  b510              PUSH     {r4,lr}
;;;293    	{
;;;294    	int byte, bit;
;;;295    	uint8_t *pByte;
;;;296    	if( (_block < FILE_SYSTEM_MEMORY_BLOCKS_AMOUNT) == 0 )
000002  f5b05f80          CMP      r0,#0x1000
000006  d215              BCS      |L26.52|
;;;297    		return Fail;
;;;298    
;;;299    	byte = _block / MWN_M_BITS_IN_BYTE;
000008  08c3              LSRS     r3,r0,#3
;;;300    	bit = _block % MWN_M_BITS_IN_BYTE;
;;;301    
;;;302    	pByte = &badBlocksList[ byte ];
00000a  4a0c              LDR      r2,|L26.60|
00000c  2401              MOVS     r4,#1                 ;293
00000e  441a              ADD      r2,r2,r3
000010  f0000007          AND      r0,r0,#7              ;300
;;;303    
;;;304    	if( _status == 1 )
;;;305    		*pByte |= (1 << bit);
000014  4084              LSLS     r4,r4,r0
;;;306    	else
;;;307    		*pByte &= ~(1 << bit);
000016  7810              LDRB     r0,[r2,#0]
000018  2901              CMP      r1,#1                 ;304
00001a  d00d              BEQ      |L26.56|
00001c  43a0              BICS     r0,r0,r4
                  |L26.30|
00001e  7010              STRB     r0,[r2,#0]
;;;308    
;;;309    	if( EEPROM_DRIVER_writeByte(pFileSystemDataRam, FILE_SYSTEM_ADDRESS_OF_BAD_BLOCKS_LIST + byte, *pByte) != Ok )
000020  b2c2              UXTB     r2,r0
000022  4807              LDR      r0,|L26.64|
000024  f5037380          ADD      r3,r3,#0x100
000028  b299              UXTH     r1,r3
00002a  6800              LDR      r0,[r0,#0]  ; pFileSystemDataRam
00002c  f7fffffe          BL       EEPROM_DRIVER_writeByte
000030  2801              CMP      r0,#1
000032  d000              BEQ      |L26.54|
                  |L26.52|
;;;310    		return Fail;
000034  2002              MOVS     r0,#2
                  |L26.54|
;;;311    
;;;312    	return Ok;
;;;313    	}
000036  bd10              POP      {r4,pc}
                  |L26.56|
000038  4320              ORRS     r0,r0,r4              ;305
00003a  e7f0              B        |L26.30|
;;;314    
                          ENDP

                  |L26.60|
                          DCD      ||.bss||
                  |L26.64|
                          DCD      ||.data||

                          AREA ||i.FILE_SYSTEM_saveConfigurationTable||, CODE, READONLY, ALIGN=2

                  FILE_SYSTEM_saveConfigurationTable PROC
;;;75     
;;;76     tdStatus FILE_SYSTEM_saveConfigurationTable(tdConfigurationTable *_pConfigTable)
000000  b538              PUSH     {r3-r5,lr}
;;;77     	{
000002  4604              MOV      r4,r0
;;;78     	uint8_t sbdBuff[ 4 ];
;;;79     
;;;80     	MWN_M_setValue32ToBuffer((unsigned int)_pConfigTable->SBD, sbdBuff, 0 );
000004  6840              LDR      r0,[r0,#4]
;;;81     
;;;82     	EEPROM_DRIVER_writeByte(pFileSystemDataRam, FILE_SYSTEM_ADDRESS_OF_CONFIGURATION_TABLE_EXIST, _pConfigTable->exist);
000006  4d16              LDR      r5,|L27.96|
000008  0e00              LSRS     r0,r0,#24             ;80
00000a  f88d0003          STRB     r0,[sp,#3]            ;80
00000e  6860              LDR      r0,[r4,#4]            ;80
000010  f44f617f          MOV      r1,#0xff0
000014  0c00              LSRS     r0,r0,#16             ;80
000016  f88d0002          STRB     r0,[sp,#2]            ;80
00001a  88a0              LDRH     r0,[r4,#4]            ;80
00001c  0a00              LSRS     r0,r0,#8              ;80
00001e  f88d0001          STRB     r0,[sp,#1]            ;80
000022  7920              LDRB     r0,[r4,#4]            ;80
000024  f88d0000          STRB     r0,[sp,#0]            ;80
000028  7a22              LDRB     r2,[r4,#8]
00002a  6828              LDR      r0,[r5,#0]  ; pFileSystemDataRam
00002c  f7fffffe          BL       EEPROM_DRIVER_writeByte
;;;83     	EEPROM_DRIVER_writeByte(pFileSystemDataRam, FILE_SYSTEM_ADDRESS_OF_CONFIGURATION_TABLE_NTD, _pConfigTable->NTD );
000030  7a62              LDRB     r2,[r4,#9]
000032  f64071f9          MOV      r1,#0xff9
000036  6828              LDR      r0,[r5,#0]  ; pFileSystemDataRam
000038  f7fffffe          BL       EEPROM_DRIVER_writeByte
;;;84     	EEPROM_DRIVER_writeBuffer(pFileSystemDataRam, FILE_SYSTEM_ADDRESS_OF_CONFIGURATION_TABLE_SBD, sbdBuff, 4 );
00003c  2304              MOVS     r3,#4
00003e  466a              MOV      r2,sp
000040  f64071f5          MOV      r1,#0xff5
000044  6828              LDR      r0,[r5,#0]  ; pFileSystemDataRam
000046  f7fffffe          BL       EEPROM_DRIVER_writeBuffer
;;;85     	EEPROM_DRIVER_writeBuffer(pFileSystemDataRam, FILE_SYSTEM_ADDRESS_OF_CONFIGURATION_TABLE, _pConfigTable->data, _pConfigTable->size );
00004a  8820              LDRH     r0,[r4,#0]
00004c  f104020a          ADD      r2,r4,#0xa
000050  b283              UXTH     r3,r0
000052  f44f5180          MOV      r1,#0x1000
000056  6828              LDR      r0,[r5,#0]  ; pFileSystemDataRam
000058  f7fffffe          BL       EEPROM_DRIVER_writeBuffer
;;;86     
;;;87     	return Ok;
00005c  2001              MOVS     r0,#1
;;;88     	}
00005e  bd38              POP      {r3-r5,pc}
;;;89     
                          ENDP

                  |L27.96|
                          DCD      ||.data||

                          AREA ||i.FILE_SYSTEM_saveHoltConfiguration||, CODE, READONLY, ALIGN=2

                  FILE_SYSTEM_saveHoltConfiguration PROC
;;;122    
;;;123    tdStatus FILE_SYSTEM_saveHoltConfiguration(tdArinc *_pArinc)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;124    	{
;;;125    	tdArincChannel *pChannel;
;;;126    	uint8_t channel;
;;;127    	uint16_t address;
;;;128    
;;;129    	channel = 0;
000004  2600              MOVS     r6,#0
;;;130    	pChannel = &_pArinc->channel[ 0 ];
;;;131    	address = FILE_SYSTEM_ADDRESS_OF_DATA_TYPE_TABLE;
;;;132    	while( channel < HOLT_CORE_CHANNELS_AMOUNT )
;;;133    		{
;;;134    		EEPROM_DRIVER_writeByte(pFileSystemDataRam, address + 0, pChannel->status.enable);
000006  4f0e              LDR      r7,|L28.64|
000008  1d04              ADDS     r4,r0,#4              ;129
00000a  f44f6500          MOV      r5,#0x800             ;131
00000e  bf00              NOP      
                  |L28.16|
000010  f8942408          LDRB     r2,[r4,#0x408]
000014  4629              MOV      r1,r5
000016  6838              LDR      r0,[r7,#0]  ; pFileSystemDataRam
000018  f7fffffe          BL       EEPROM_DRIVER_writeByte
;;;135    		EEPROM_DRIVER_writeByte(pFileSystemDataRam, address + 1, pChannel->freq);
00001c  1c68              ADDS     r0,r5,#1
00001e  b281              UXTH     r1,r0
000020  f894240c          LDRB     r2,[r4,#0x40c]
000024  6838              LDR      r0,[r7,#0]  ; pFileSystemDataRam
000026  f7fffffe          BL       EEPROM_DRIVER_writeByte
00002a  1cad              ADDS     r5,r5,#2
;;;136    
;;;137    		address += FILE_SYSTEM_DATA_TYPE_SIZE;
00002c  1c76              ADDS     r6,r6,#1
;;;138    		pChannel++;
;;;139    		channel++;
00002e  b2f6              UXTB     r6,r6
000030  b2ad              UXTH     r5,r5                 ;137
000032  f5046482          ADD      r4,r4,#0x410
000036  2e08              CMP      r6,#8                 ;132
000038  d3ea              BCC      |L28.16|
;;;140    		}
;;;141    
;;;142    	return Ok;
00003a  2001              MOVS     r0,#1
;;;143    	}
00003c  e8bd81f0          POP      {r4-r8,pc}
;;;144    
                          ENDP

                  |L28.64|
                          DCD      ||.data||

                          AREA ||i.FILE_SYSTEM_setBadBlock||, CODE, READONLY, ALIGN=1

                  FILE_SYSTEM_setBadBlock PROC
;;;314    
;;;315    tdStatus FILE_SYSTEM_setBadBlock(tdFileSystemBlock _block)
000000  f5b05f80          CMP      r0,#0x1000
;;;316    	{
000004  d301              BCC      |L29.10|
;;;317    	if( (_block < FILE_SYSTEM_MEMORY_BLOCKS_AMOUNT) == 0 )
;;;318    		return Fail;
000006  2002              MOVS     r0,#2
;;;319    
;;;320    	return FILE_SYSTEM_saveBadBlockStatusToMemmory( _block, 1 );
;;;321    	}
000008  4770              BX       lr
                  |L29.10|
00000a  2101              MOVS     r1,#1                 ;320
00000c  f7ffbffe          B.W      FILE_SYSTEM_saveBadBlockStatusToMemmory
;;;322    
                          ENDP


                          AREA ||i.FILE_SYSTEM_setDataRam||, CODE, READONLY, ALIGN=2

                  FILE_SYSTEM_setDataRam PROC
;;;32     
;;;33     tdStatus FILE_SYSTEM_setDataRam(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;34     	{
;;;35     	tdSpiDevice *ramList[ ] = {&RAM_1, &RAM_2};
000002  490e              LDR      r1,|L30.60|
;;;36     	uint8_t ramPresent = 0;
;;;37     
;;;38     
;;;39     	for( uint8_t ram = 0; ram < sizeof(ramList) / sizeof(ramList[ 0 ]); ram++ )
;;;40     		{
;;;41     		if( FILE_SYSTEM_isRamPresent( ramList[ ram ] ) == 1 )
;;;42     			{
;;;43     			pFileSystemDataRam = ramList[ ram ];
000004  4e0e              LDR      r6,|L30.64|
000006  2400              MOVS     r4,#0                 ;39
000008  e9d10100          LDRD     r0,r1,[r1,#0]         ;35
00000c  466d              MOV      r5,sp                 ;35
00000e  e9cd0100          STRD     r0,r1,[sp,#0]         ;35
000012  bf00              NOP                            ;41
                  |L30.20|
000014  f8550024          LDR      r0,[r5,r4,LSL #2]     ;41
000018  f7fffffe          BL       FILE_SYSTEM_isRamPresent
00001c  2801              CMP      r0,#1                 ;41
00001e  d007              BEQ      |L30.48|
000020  1c64              ADDS     r4,r4,#1              ;41
000022  b2e4              UXTB     r4,r4                 ;39
000024  2c02              CMP      r4,#2                 ;39
000026  d3f5              BCC      |L30.20|
;;;44     			ramPresent = 1;
;;;45     			break;
;;;46     			}
;;;47     		}
;;;48     
;;;49     	if( ramPresent == 1 )
;;;50     		return Ok;
;;;51     	else
;;;52     		pFileSystemDataRam = ramList[ 0 ]; // no RAM's(((
000028  9800              LDR      r0,[sp,#0]
;;;53     
;;;54     	return Fail;
00002a  6030              STR      r0,[r6,#0]  ; pFileSystemDataRam
00002c  2002              MOVS     r0,#2
;;;55     	}
00002e  bd7c              POP      {r2-r6,pc}
                  |L30.48|
000030  f8550024          LDR      r0,[r5,r4,LSL #2]     ;43
000034  6030              STR      r0,[r6,#0]            ;50  ; pFileSystemDataRam
000036  2001              MOVS     r0,#1                 ;50
000038  bd7c              POP      {r2-r6,pc}
;;;56     
                          ENDP

00003a  0000              DCW      0x0000
                  |L30.60|
                          DCD      ||.constdata||
                  |L30.64|
                          DCD      ||.data||

                          AREA ||i.FILE_SYSTEM_writeDataToFile||, CODE, READONLY, ALIGN=1

                  FILE_SYSTEM_writeDataToFile PROC
;;;757    
;;;758    tdStatus FILE_SYSTEM_writeDataToFile(tdFileNode *pFile, tdFileSystemData *_pData, int _dataSize, tdFileSystemData *_pSpare, int _spareSize)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;759    	{
000004  b087              SUB      sp,sp,#0x1c
000006  460f              MOV      r7,r1
000008  4604              MOV      r4,r0
;;;760    	nand_addr_t address;
;;;761    	unsigned char crc8;
;;;762    	tdStatus status = Ok;
;;;763    
;;;764    	// Every time when we call this function we write to next address
;;;765    	// It means that every time we write to the addressEnd.
;;;766    	// When we finished addressEnd will shows us address of the end of file.
;;;767    	FILE_SYSTEM_generateNandAddress(&address, pFile->addressEnd);
00000a  6881              LDR      r1,[r0,#8]
00000c  461d              MOV      r5,r3                 ;759
00000e  4690              MOV      r8,r2                 ;759
000010  2601              MOVS     r6,#1                 ;762
000012  f8dd9038          LDR      r9,[sp,#0x38]
000016  a802              ADD      r0,sp,#8
000018  f7fffffe          BL       FILE_SYSTEM_generateNandAddress
00001c  e9cd7800          STRD     r7,r8,[sp,#0]
000020  f10d0c08          ADD      r12,sp,#8
000024  e89c000f          LDM      r12,{r0-r3}
;;;768    
;;;769    	if( FILE_SYSTEM_writePage(address, _pData, _dataSize) != Ok )
000028  f7fffffe          BL       FILE_SYSTEM_writePage
00002c  2801              CMP      r0,#1
00002e  d003              BEQ      |L31.56|
;;;770    		return Fail;
000030  2002              MOVS     r0,#2
                  |L31.50|
;;;771    
;;;772    	FS_M_setFileNumber(_pSpare, pFile->fileNum);
;;;773    	FS_M_setStartPage(_pSpare, pFile->addressStart);
;;;774    	FS_M_setCurrentPage(_pSpare, pFile->filePageAddress);
;;;775    
;;;776    	crc8 = CRC8_( _pSpare, FILE_SYSTEM_DATA_SPARE_CRC8_POSITION - 1 ); // crc8 of _pSpare. From  _pSpare[ 0 ] to _pSpare[ CRC8_POSITION - 1 ]
;;;777    
;;;778    	FS_M_setCRC8(_pSpare, crc8);
;;;779    
;;;780    	if( FILE_SYSTEM_writeSparePage(address, _pSpare, _spareSize) != Ok )
;;;781    		status = Fail;
;;;782    
;;;783    	#warning: "check data successful write if not write to next address"
;;;784    
;;;785    	pFile->filePageAddress++;
;;;786    
;;;787    	pFile->addressEnd++;
;;;788    	if( (pFile->addressEnd < FILE_SYSTEM_MEMORY_MAX_ADDRESS) == 0 )
;;;789    		pFile->addressEnd = 0; // make a ring
;;;790    
;;;791    	while( FILE_SYSTEM_isBadBlockAtAddress( pFile->addressEnd ) == 1 )
;;;792    		{
;;;793    		FILE_SYSTEM_getNextBlockAddress(&pFile->addressEnd);
;;;794    		}
;;;795    
;;;796    	return status;
;;;797    	}
000032  b007              ADD      sp,sp,#0x1c
000034  e8bd83f0          POP      {r4-r9,pc}
                  |L31.56|
000038  6820              LDR      r0,[r4,#0]            ;772
00003a  2118              MOVS     r1,#0x18              ;776
00003c  0e00              LSRS     r0,r0,#24             ;772
00003e  7128              STRB     r0,[r5,#4]            ;772
000040  6820              LDR      r0,[r4,#0]            ;772
000042  0c00              LSRS     r0,r0,#16             ;772
000044  70e8              STRB     r0,[r5,#3]            ;772
000046  8820              LDRH     r0,[r4,#0]            ;772
000048  0a00              LSRS     r0,r0,#8              ;772
00004a  70a8              STRB     r0,[r5,#2]            ;772
00004c  7820              LDRB     r0,[r4,#0]            ;772
00004e  7068              STRB     r0,[r5,#1]            ;772
000050  6860              LDR      r0,[r4,#4]            ;773
000052  0e00              LSRS     r0,r0,#24             ;773
000054  7228              STRB     r0,[r5,#8]            ;773
000056  6860              LDR      r0,[r4,#4]            ;773
000058  0c00              LSRS     r0,r0,#16             ;773
00005a  71e8              STRB     r0,[r5,#7]            ;773
00005c  88a0              LDRH     r0,[r4,#4]            ;773
00005e  0a00              LSRS     r0,r0,#8              ;773
000060  71a8              STRB     r0,[r5,#6]            ;773
000062  7920              LDRB     r0,[r4,#4]            ;773
000064  7168              STRB     r0,[r5,#5]            ;773
000066  68e0              LDR      r0,[r4,#0xc]          ;774
000068  0e00              LSRS     r0,r0,#24             ;774
00006a  7328              STRB     r0,[r5,#0xc]          ;774
00006c  68e0              LDR      r0,[r4,#0xc]          ;774
00006e  0c00              LSRS     r0,r0,#16             ;774
000070  72e8              STRB     r0,[r5,#0xb]          ;774
000072  89a0              LDRH     r0,[r4,#0xc]          ;774
000074  0a00              LSRS     r0,r0,#8              ;774
000076  72a8              STRB     r0,[r5,#0xa]          ;774
000078  7b20              LDRB     r0,[r4,#0xc]          ;774
00007a  7268              STRB     r0,[r5,#9]            ;774
00007c  4628              MOV      r0,r5                 ;776
00007e  f7fffffe          BL       CRC8_
000082  7668              STRB     r0,[r5,#0x19]         ;778
000084  e9cd5900          STRD     r5,r9,[sp,#0]         ;778
000088  af02              ADD      r7,sp,#8              ;778
00008a  e897000f          LDM      r7,{r0-r3}            ;778
00008e  f7fffffe          BL       FILE_SYSTEM_writeSparePage
000092  2801              CMP      r0,#1                 ;780
000094  d000              BEQ      |L31.152|
000096  2602              MOVS     r6,#2                 ;781
                  |L31.152|
000098  68e0              LDR      r0,[r4,#0xc]          ;785
00009a  1c40              ADDS     r0,r0,#1              ;785
00009c  60e0              STR      r0,[r4,#0xc]          ;787
00009e  68a0              LDR      r0,[r4,#8]            ;787
0000a0  1c40              ADDS     r0,r0,#1              ;787
0000a2  60a0              STR      r0,[r4,#8]            ;788
0000a4  f5b02f00          CMP      r0,#0x80000           ;788
0000a8  d301              BCC      |L31.174|
0000aa  2000              MOVS     r0,#0                 ;789
0000ac  60a0              STR      r0,[r4,#8]            ;789
                  |L31.174|
0000ae  f1040308          ADD      r3,r4,#8              ;793
                  |L31.178|
0000b2  68a0              LDR      r0,[r4,#8]            ;791
0000b4  f7fffffe          BL       FILE_SYSTEM_isBadBlockAtAddress
0000b8  2801              CMP      r0,#1                 ;791
0000ba  d001              BEQ      |L31.192|
0000bc  4630              MOV      r0,r6                 ;796
0000be  e7b8              B        |L31.50|
                  |L31.192|
0000c0  4618              MOV      r0,r3
0000c2  f7fffffe          BL       FILE_SYSTEM_getNextBlockAddress
0000c6  e7f4              B        |L31.178|
                          ENDP


                          AREA ||i.FILE_SYSTEM_writePage||, CODE, READONLY, ALIGN=1

                  FILE_SYSTEM_writePage PROC
;;;681    
;;;682    tdStatus FILE_SYSTEM_writePage(nand_addr_t _address, tdFileSystemData *_pData, int _size)
000000  b57c              PUSH     {r2-r6,lr}
;;;683    	{
000002  e9dd4506          LDRD     r4,r5,[sp,#0x18]
000006  e9cd4500          STRD     r4,r5,[sp,#0]
;;;684    	if( NAND_Page_Program(_address, _pData, _size) != NAND_SUCCESS )
00000a  f7fffffe          BL       NAND_Page_Program
00000e  b108              CBZ      r0,|L32.20|
;;;685    		return Fail;
000010  2002              MOVS     r0,#2
;;;686    
;;;687    	return Ok;
;;;688    	}
000012  bd7c              POP      {r2-r6,pc}
                  |L32.20|
000014  2001              MOVS     r0,#1                 ;687
000016  bd7c              POP      {r2-r6,pc}
;;;689    
                          ENDP


                          AREA ||i.FILE_SYSTEM_writePage_||, CODE, READONLY, ALIGN=1

                  FILE_SYSTEM_writePage_ PROC
;;;689    
;;;690    tdStatus FILE_SYSTEM_writePage_(tdFileSystemPageAddress _pageAddress, tdFileSystemData *_pData, int _size)
000000  b530              PUSH     {r4,r5,lr}
;;;691    	{
000002  460c              MOV      r4,r1
000004  b087              SUB      sp,sp,#0x1c
;;;692    	nand_addr_t address;
;;;693    	FILE_SYSTEM_generateNandAddress(&address, _pageAddress);
000006  4601              MOV      r1,r0
000008  4615              MOV      r5,r2                 ;691
00000a  a802              ADD      r0,sp,#8
00000c  f7fffffe          BL       FILE_SYSTEM_generateNandAddress
000010  f10d0c08          ADD      r12,sp,#8
000014  e9cd4500          STRD     r4,r5,[sp,#0]
000018  e89c000f          LDM      r12,{r0-r3}
;;;694    
;;;695    	if( FILE_SYSTEM_writePage(address, _pData, _size) != Ok )
00001c  f7fffffe          BL       FILE_SYSTEM_writePage
000020  2801              CMP      r0,#1
000022  d000              BEQ      |L33.38|
;;;696    		return Fail;
000024  2002              MOVS     r0,#2
                  |L33.38|
;;;697    
;;;698    	return Ok;
;;;699    	}
000026  b007              ADD      sp,sp,#0x1c
000028  bd30              POP      {r4,r5,pc}
;;;700    
                          ENDP


                          AREA ||i.FILE_SYSTEM_writeSparePage||, CODE, READONLY, ALIGN=1

                  FILE_SYSTEM_writeSparePage PROC
;;;719    
;;;720    tdStatus FILE_SYSTEM_writeSparePage(nand_addr_t _address, tdFileSystemData *_pData, int _size)
000000  b57c              PUSH     {r2-r6,lr}
;;;721    	{
000002  e9dd4506          LDRD     r4,r5,[sp,#0x18]
000006  e9cd4500          STRD     r4,r5,[sp,#0]
;;;722    	if( NAND_Spare_Program(_address, _pData, _size) != NAND_SUCCESS )
00000a  f7fffffe          BL       NAND_Spare_Program
00000e  b108              CBZ      r0,|L34.20|
;;;723    		return Fail;
000010  2002              MOVS     r0,#2
;;;724    
;;;725    	return Ok;
;;;726    	}
000012  bd7c              POP      {r2-r6,pc}
                  |L34.20|
000014  2001              MOVS     r0,#1                 ;725
000016  bd7c              POP      {r2-r6,pc}
;;;727    
                          ENDP


                          AREA ||i.FILE_SYSTEM_writeSparePage_||, CODE, READONLY, ALIGN=1

                  FILE_SYSTEM_writeSparePage_ PROC
;;;727    
;;;728    tdStatus FILE_SYSTEM_writeSparePage_(tdFileSystemPageAddress _pageAddress, tdFileSystemData *_pData, int _size)
000000  b530              PUSH     {r4,r5,lr}
;;;729    	{
000002  460c              MOV      r4,r1
000004  b087              SUB      sp,sp,#0x1c
;;;730    	nand_addr_t address;
;;;731    	FILE_SYSTEM_generateNandAddress(&address, _pageAddress);
000006  4601              MOV      r1,r0
000008  4615              MOV      r5,r2                 ;729
00000a  a802              ADD      r0,sp,#8
00000c  f7fffffe          BL       FILE_SYSTEM_generateNandAddress
000010  f10d0c08          ADD      r12,sp,#8
000014  e9cd4500          STRD     r4,r5,[sp,#0]
000018  e89c000f          LDM      r12,{r0-r3}
;;;732    
;;;733    	if( FILE_SYSTEM_writeSparePage(address, _pData, _size) != Ok )
00001c  f7fffffe          BL       FILE_SYSTEM_writeSparePage
000020  2801              CMP      r0,#1
000022  d000              BEQ      |L35.38|
;;;734    		return Fail;
000024  2002              MOVS     r0,#2
                  |L35.38|
;;;735    
;;;736    	return Ok;
;;;737    	}
000026  b007              ADD      sp,sp,#0x1c
000028  bd30              POP      {r4,r5,pc}
;;;738    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  badBlocksList
                          %        512
                  RAM_1
                          %        16
                  RAM_2
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      RAM_1
                          DCD      RAM_2

                          AREA ||.data||, DATA, ALIGN=2

                  pFileSystemDataRam
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Src\\core\\fileSystem.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_fileSystem_c_21bf4f88____REV16|
#line 129 "..\\..\\Drivers\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_fileSystem_c_21bf4f88____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_fileSystem_c_21bf4f88____REVSH|
#line 144
|__asm___12_fileSystem_c_21bf4f88____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
