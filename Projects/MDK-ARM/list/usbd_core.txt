; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o"bhd2 configuration\usbd_core.o" --asm_dir=.\list\ --list_dir=.\list\ --depend="bhd2 configuration\usbd_core.d" --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\..\Drivers\CMSIS\Device\ST\STM32F2xx\Include -I..\..\Drivers\CMSIS\Include -I..\..\Middlewares\ST\STM32_USB_Device_Library\Class\CDC\Inc -I..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc -I..\..\Drivers\STM32F2xx_HAL_Driver\Inc -I..\..\Inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_HAL_DRIVER -DSTM32F215xx --omf_browse="bhd2 configuration\usbd_core.crf" ..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Src\usbd_core.c]
                          THUMB

                          AREA ||i.USBD_ClrClassConfig||, CODE, READONLY, ALIGN=1

                  USBD_ClrClassConfig PROC
;;;250    */
;;;251    USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
000000  b510              PUSH     {r4,lr}
;;;252    {
;;;253      /* Clear configuration  and Deinitialize the Class process*/
;;;254      pdev->pClass->DeInit(pdev, cfgidx);  
000002  f8d02214          LDR      r2,[r0,#0x214]
000006  6852              LDR      r2,[r2,#4]
000008  4790              BLX      r2
;;;255      return USBD_OK;
00000a  2000              MOVS     r0,#0
;;;256    }
00000c  bd10              POP      {r4,pc}
;;;257    
                          ENDP


                          AREA ||i.USBD_DeInit||, CODE, READONLY, ALIGN=1

                  USBD_DeInit PROC
;;;132    */
;;;133    USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
000000  b510              PUSH     {r4,lr}
;;;134    {
000002  4604              MOV      r4,r0
;;;135    //	PRINT_FUNC;
;;;136      /* Set Default State */
;;;137      pdev->dev_state  = USBD_STATE_DEFAULT;
000004  2001              MOVS     r0,#1
000006  f88401fc          STRB     r0,[r4,#0x1fc]
;;;138      
;;;139      /* Free Class Resources */
;;;140      pdev->pClass->DeInit(pdev, pdev->dev_config);  
00000a  f8d40214          LDR      r0,[r4,#0x214]
00000e  7921              LDRB     r1,[r4,#4]
000010  6842              LDR      r2,[r0,#4]
000012  4620              MOV      r0,r4
000014  4790              BLX      r2
;;;141      
;;;142        /* Stop the low level driver  */
;;;143      USBD_LL_Stop(pdev); 
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USBD_LL_Stop
;;;144      
;;;145      /* Initialize low level driver */
;;;146      USBD_LL_DeInit(pdev);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       USBD_LL_DeInit
;;;147      
;;;148      return USBD_OK;
000022  2000              MOVS     r0,#0
;;;149    }
000024  bd10              POP      {r4,pc}
;;;150    
                          ENDP


                          AREA ||i.USBD_Init||, CODE, READONLY, ALIGN=1

                  USBD_Init PROC
;;;96     */
;;;97     USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
000000  b510              PUSH     {r4,lr}
;;;98     {
000002  b180              CBZ      r0,|L3.38|
;;;99       /* Check whether the USB Host handle is valid */
;;;100      if(pdev == NULL)
;;;101      {
;;;102        USBD_ErrLog("Invalid Device handle");
;;;103        return USBD_FAIL; 
;;;104      }
;;;105      
;;;106      /* Unlink previous class*/
;;;107      if(pdev->pClass != NULL)
000004  f8d03214          LDR      r3,[r0,#0x214]
000008  b113              CBZ      r3,|L3.16|
;;;108      {
;;;109        pdev->pClass = NULL;
00000a  2300              MOVS     r3,#0
00000c  f8c03214          STR      r3,[r0,#0x214]
                  |L3.16|
;;;110      }
;;;111      
;;;112      /* Assign USBD Descriptors */
;;;113      if(pdesc != NULL)
000010  b109              CBZ      r1,|L3.22|
;;;114      {
;;;115        pdev->pDesc = pdesc;
000012  f8c01210          STR      r1,[r0,#0x210]
                  |L3.22|
;;;116      }
;;;117      
;;;118      /* Set Device initial State */
;;;119      pdev->dev_state  = USBD_STATE_DEFAULT;
000016  2101              MOVS     r1,#1
000018  f88011fc          STRB     r1,[r0,#0x1fc]
;;;120      pdev->id = id;
00001c  7002              STRB     r2,[r0,#0]
;;;121      /* Initialize low level driver */
;;;122      USBD_LL_Init(pdev);
00001e  f7fffffe          BL       USBD_LL_Init
;;;123      
;;;124      return USBD_OK; 
000022  2000              MOVS     r0,#0
;;;125    }
000024  bd10              POP      {r4,pc}
                  |L3.38|
000026  2002              MOVS     r0,#2                 ;103
000028  bd10              POP      {r4,pc}
;;;126    #include "stm32DebugPrint.h"
                          ENDP


                          AREA ||i.USBD_LL_DataInStage||, CODE, READONLY, ALIGN=1

                  USBD_LL_DataInStage PROC
;;;344    */
;;;345    USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;346    {
000004  4617              MOV      r7,r2
000006  4604              MOV      r4,r0
000008  b141              CBZ      r1,|L4.28|
;;;347      USBD_EndpointTypeDef    *pep;
;;;348        
;;;349      if(epnum == 0) 
;;;350      {
;;;351        pep = &pdev->ep_in[0];
;;;352        
;;;353        if ( pdev->ep0_state == USBD_EP0_DATA_IN)
;;;354        {
;;;355          if(pep->rem_length > pep->maxpacket)
;;;356          {
;;;357            pep->rem_length -=  pep->maxpacket;
;;;358            
;;;359            USBD_CtlContinueSendData (pdev, 
;;;360                                      pdata, 
;;;361                                      pep->rem_length);
;;;362          }
;;;363          else
;;;364          { /* last packet is MPS multiple, so send ZLP packet */
;;;365            if((pep->total_length % pep->maxpacket == 0) &&
;;;366               (pep->total_length >= pep->maxpacket) &&
;;;367                 (pep->total_length < pdev->ep0_data_len ))
;;;368            {
;;;369              
;;;370              USBD_CtlContinueSendData(pdev , NULL, 0);
;;;371              pdev->ep0_data_len = 0;
;;;372            }
;;;373            else
;;;374            {
;;;375              if((pdev->pClass->EP0_TxSent != NULL)&&
;;;376                 (pdev->dev_state == USBD_STATE_CONFIGURED))
;;;377              {
;;;378                pdev->pClass->EP0_TxSent(pdev); 
;;;379              }          
;;;380              USBD_CtlReceiveStatus(pdev);
;;;381            }
;;;382          }
;;;383        }
;;;384        if (pdev->dev_test_mode == 1)
;;;385        {
;;;386          USBD_RunTestMode(pdev); 
;;;387          pdev->dev_test_mode = 0;
;;;388        }
;;;389      }
;;;390      else if((pdev->pClass->DataIn != NULL)&& 
00000a  f8d40214          LDR      r0,[r4,#0x214]
00000e  6942              LDR      r2,[r0,#0x14]
000010  b3ea              CBZ      r2,|L4.142|
;;;391              (pdev->dev_state == USBD_STATE_CONFIGURED))
000012  f89401fc          LDRB     r0,[r4,#0x1fc]
000016  2803              CMP      r0,#3
000018  d03d              BEQ      |L4.150|
00001a  e03e              B        |L4.154|
                  |L4.28|
00001c  f8d411f4          LDR      r1,[r4,#0x1f4]        ;353
000020  2500              MOVS     r5,#0                 ;353
000022  f1040014          ADD      r0,r4,#0x14           ;351
000026  2902              CMP      r1,#2                 ;353
000028  d12c              BNE      |L4.132|
00002a  e9d06302          LDRD     r6,r3,[r0,#8]         ;353
00002e  429e              CMP      r6,r3                 ;355
000030  d907              BLS      |L4.66|
000032  1af3              SUBS     r3,r6,r3              ;357
000034  6083              STR      r3,[r0,#8]            ;359
000036  b29a              UXTH     r2,r3                 ;359
000038  4639              MOV      r1,r7                 ;359
00003a  4620              MOV      r0,r4                 ;359
00003c  f7fffffe          BL       USBD_CtlContinueSendData
000040  e020              B        |L4.132|
                  |L4.66|
000042  6840              LDR      r0,[r0,#4]            ;365
000044  fbb0f1f3          UDIV     r1,r0,r3              ;365
000048  fb030111          MLS      r1,r3,r1,r0           ;365
00004c  b969              CBNZ     r1,|L4.106|
00004e  4298              CMP      r0,r3                 ;366
000050  d30b              BCC      |L4.106|
000052  f8d411f8          LDR      r1,[r4,#0x1f8]        ;367
000056  4288              CMP      r0,r1                 ;367
000058  d207              BCS      |L4.106|
00005a  2200              MOVS     r2,#0                 ;370
00005c  4611              MOV      r1,r2                 ;370
00005e  4620              MOV      r0,r4                 ;370
000060  f7fffffe          BL       USBD_CtlContinueSendData
000064  f8c451f8          STR      r5,[r4,#0x1f8]        ;371
000068  e00c              B        |L4.132|
                  |L4.106|
00006a  f8d40214          LDR      r0,[r4,#0x214]        ;375
00006e  68c1              LDR      r1,[r0,#0xc]          ;375
000070  b129              CBZ      r1,|L4.126|
000072  f89401fc          LDRB     r0,[r4,#0x1fc]        ;376
000076  2803              CMP      r0,#3                 ;376
000078  d101              BNE      |L4.126|
00007a  4620              MOV      r0,r4                 ;378
00007c  4788              BLX      r1                    ;378
                  |L4.126|
00007e  4620              MOV      r0,r4                 ;380
000080  f7fffffe          BL       USBD_CtlReceiveStatus
                  |L4.132|
000084  f8940200          LDRB     r0,[r4,#0x200]        ;384
000088  2801              CMP      r0,#1                 ;384
00008a  d106              BNE      |L4.154|
00008c  e000              B        |L4.144|
                  |L4.142|
00008e  e004              B        |L4.154|
                  |L4.144|
000090  f8845200          STRB     r5,[r4,#0x200]        ;387
000094  e001              B        |L4.154|
                  |L4.150|
;;;392      {
;;;393        pdev->pClass->DataIn(pdev, epnum); 
000096  4620              MOV      r0,r4
000098  4790              BLX      r2
                  |L4.154|
;;;394      }  
;;;395      return USBD_OK;
00009a  2000              MOVS     r0,#0
;;;396    }
00009c  e8bd81f0          POP      {r4-r8,pc}
;;;397    
                          ENDP


                          AREA ||i.USBD_LL_DataOutStage||, CODE, READONLY, ALIGN=1

                  USBD_LL_DataOutStage PROC
;;;300    */
;;;301    USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
000000  b570              PUSH     {r4-r6,lr}
;;;302    {
000002  4615              MOV      r5,r2
000004  4604              MOV      r4,r0
000006  b141              CBZ      r1,|L5.26|
;;;303      USBD_EndpointTypeDef    *pep;
;;;304      
;;;305      if(epnum == 0) 
;;;306      {
;;;307        pep = &pdev->ep_out[0];
;;;308        
;;;309        if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
;;;310        {
;;;311          if(pep->rem_length > pep->maxpacket)
;;;312          {
;;;313            pep->rem_length -=  pep->maxpacket;
;;;314           
;;;315            USBD_CtlContinueRx (pdev, 
;;;316                                pdata,
;;;317                                MIN(pep->rem_length ,pep->maxpacket));
;;;318          }
;;;319          else
;;;320          {
;;;321            if((pdev->pClass->EP0_RxReady != NULL)&&
;;;322               (pdev->dev_state == USBD_STATE_CONFIGURED))
;;;323            {
;;;324              pdev->pClass->EP0_RxReady(pdev); 
;;;325            }
;;;326            USBD_CtlSendStatus(pdev);
;;;327          }
;;;328        }
;;;329      }
;;;330      else if((pdev->pClass->DataOut != NULL)&&
000008  f8d40214          LDR      r0,[r4,#0x214]
00000c  6982              LDR      r2,[r0,#0x18]
00000e  b33a              CBZ      r2,|L5.96|
;;;331              (pdev->dev_state == USBD_STATE_CONFIGURED))
000010  f89401fc          LDRB     r0,[r4,#0x1fc]
000014  2803              CMP      r0,#3
000016  d024              BEQ      |L5.98|
000018  e025              B        |L5.102|
                  |L5.26|
00001a  f8d411f4          LDR      r1,[r4,#0x1f4]        ;309
00001e  f5047082          ADD      r0,r4,#0x104          ;307
000022  2903              CMP      r1,#3                 ;309
000024  d11f              BNE      |L5.102|
000026  e9d02102          LDRD     r2,r1,[r0,#8]         ;309
00002a  428a              CMP      r2,r1                 ;311
00002c  d90b              BLS      |L5.70|
00002e  1a53              SUBS     r3,r2,r1              ;313
000030  6083              STR      r3,[r0,#8]            ;315
000032  4608              MOV      r0,r1                 ;315
000034  4283              CMP      r3,r0                 ;315
000036  d300              BCC      |L5.58|
000038  4603              MOV      r3,r0                 ;317
                  |L5.58|
00003a  b29a              UXTH     r2,r3                 ;317
00003c  4629              MOV      r1,r5                 ;317
00003e  4620              MOV      r0,r4                 ;317
000040  f7fffffe          BL       USBD_CtlContinueRx
000044  e00f              B        |L5.102|
                  |L5.70|
000046  f8d40214          LDR      r0,[r4,#0x214]        ;321
00004a  6901              LDR      r1,[r0,#0x10]         ;321
00004c  b129              CBZ      r1,|L5.90|
00004e  f89401fc          LDRB     r0,[r4,#0x1fc]        ;322
000052  2803              CMP      r0,#3                 ;322
000054  d101              BNE      |L5.90|
000056  4620              MOV      r0,r4                 ;324
000058  4788              BLX      r1                    ;324
                  |L5.90|
00005a  4620              MOV      r0,r4                 ;326
00005c  f7fffffe          BL       USBD_CtlSendStatus
                  |L5.96|
000060  e001              B        |L5.102|
                  |L5.98|
;;;332      {
;;;333        pdev->pClass->DataOut(pdev, epnum); 
000062  4620              MOV      r0,r4
000064  4790              BLX      r2
                  |L5.102|
;;;334      }  
;;;335      return USBD_OK;
000066  2000              MOVS     r0,#0
;;;336    }
000068  bd70              POP      {r4-r6,pc}
;;;337    
                          ENDP


                          AREA ||i.USBD_LL_DevConnected||, CODE, READONLY, ALIGN=1

                  USBD_LL_DevConnected PROC
;;;523    */
;;;524    USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
000000  2000              MOVS     r0,#0
;;;525    {
;;;526      return USBD_OK;
;;;527    }
000002  4770              BX       lr
;;;528    
                          ENDP


                          AREA ||i.USBD_LL_DevDisconnected||, CODE, READONLY, ALIGN=1

                  USBD_LL_DevDisconnected PROC
;;;534    */
;;;535    USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
000000  b510              PUSH     {r4,lr}
;;;536    {
;;;537    //	PRINT_FUNC;
;;;538      /* Free Class Resources */
;;;539      pdev->dev_state = USBD_STATE_DEFAULT;
000002  2101              MOVS     r1,#1
000004  f88011fc          STRB     r1,[r0,#0x1fc]
;;;540      pdev->pClass->DeInit(pdev, pdev->dev_config);  
000008  f8d02214          LDR      r2,[r0,#0x214]
00000c  7901              LDRB     r1,[r0,#4]
00000e  6852              LDR      r2,[r2,#4]
000010  4790              BLX      r2
;;;541       
;;;542      return USBD_OK;
000012  2000              MOVS     r0,#0
;;;543    }
000014  bd10              POP      {r4,pc}
;;;544    /**
                          ENDP


                          AREA ||i.USBD_LL_IsoINIncomplete||, CODE, READONLY, ALIGN=1

                  USBD_LL_IsoINIncomplete PROC
;;;501    */
;;;502    USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
000000  2000              MOVS     r0,#0
;;;503    {
;;;504      return USBD_OK;
;;;505    }
000002  4770              BX       lr
;;;506    
                          ENDP


                          AREA ||i.USBD_LL_IsoOUTIncomplete||, CODE, READONLY, ALIGN=1

                  USBD_LL_IsoOUTIncomplete PROC
;;;512    */
;;;513    USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
000000  2000              MOVS     r0,#0
;;;514    {
;;;515      return USBD_OK;
;;;516    }
000002  4770              BX       lr
;;;517    
                          ENDP


                          AREA ||i.USBD_LL_Reset||, CODE, READONLY, ALIGN=1

                  USBD_LL_Reset PROC
;;;404    
;;;405    USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
000000  b570              PUSH     {r4-r6,lr}
;;;406    {
;;;407      /* Open EP0 OUT */
;;;408      USBD_LL_OpenEP(pdev,
000002  2200              MOVS     r2,#0
000004  4604              MOV      r4,r0                 ;406
000006  2340              MOVS     r3,#0x40
000008  4611              MOV      r1,r2
00000a  f7fffffe          BL       USBD_LL_OpenEP
;;;409                  0x00,
;;;410                  USBD_EP_TYPE_CTRL,
;;;411                  USB_MAX_EP0_SIZE);
;;;412      
;;;413      pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
00000e  2540              MOVS     r5,#0x40
;;;414      
;;;415      /* Open EP0 IN */
;;;416      USBD_LL_OpenEP(pdev,
000010  462b              MOV      r3,r5
000012  2200              MOVS     r2,#0
000014  2180              MOVS     r1,#0x80
000016  4620              MOV      r0,r4
000018  f8c45110          STR      r5,[r4,#0x110]
00001c  f7fffffe          BL       USBD_LL_OpenEP
;;;417                  0x80,
;;;418                  USBD_EP_TYPE_CTRL,
;;;419                  USB_MAX_EP0_SIZE);
;;;420      
;;;421      pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
;;;422      /* Upon Reset call usr call back */
;;;423    //	PRINT_FUNC;
;;;424      pdev->dev_state = USBD_STATE_DEFAULT;
000020  2001              MOVS     r0,#1
000022  6225              STR      r5,[r4,#0x20]
000024  f88401fc          STRB     r0,[r4,#0x1fc]
;;;425      
;;;426      if (pdev->pClassData) 
000028  f8d40218          LDR      r0,[r4,#0x218]
00002c  b128              CBZ      r0,|L10.58|
;;;427        pdev->pClass->DeInit(pdev, pdev->dev_config);  
00002e  f8d40214          LDR      r0,[r4,#0x214]
000032  7921              LDRB     r1,[r4,#4]
000034  6842              LDR      r2,[r0,#4]
000036  4620              MOV      r0,r4
000038  4790              BLX      r2
                  |L10.58|
;;;428     
;;;429      
;;;430      return USBD_OK;
00003a  2000              MOVS     r0,#0
;;;431    }
00003c  bd70              POP      {r4-r6,pc}
;;;432    
                          ENDP


                          AREA ||i.USBD_LL_Resume||, CODE, READONLY, ALIGN=1

                  USBD_LL_Resume PROC
;;;469    
;;;470    USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
000000  f89011fd          LDRB     r1,[r0,#0x1fd]
;;;471    {
;;;472    //	PRINT_FUNC;
;;;473      pdev->dev_state = pdev->dev_old_state;  
000004  f88011fc          STRB     r1,[r0,#0x1fc]
;;;474      return USBD_OK;
000008  2000              MOVS     r0,#0
;;;475    }
00000a  4770              BX       lr
;;;476    
                          ENDP


                          AREA ||i.USBD_LL_SOF||, CODE, READONLY, ALIGN=1

                  USBD_LL_SOF PROC
;;;483    
;;;484    USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
000000  b510              PUSH     {r4,lr}
;;;485    {
;;;486      if(pdev->dev_state == USBD_STATE_CONFIGURED)
000002  f89011fc          LDRB     r1,[r0,#0x1fc]
000006  2903              CMP      r1,#3
000008  d104              BNE      |L12.20|
;;;487      {
;;;488        if(pdev->pClass->SOF != NULL)
00000a  f8d01214          LDR      r1,[r0,#0x214]
00000e  69c9              LDR      r1,[r1,#0x1c]
000010  b101              CBZ      r1,|L12.20|
;;;489        {
;;;490          pdev->pClass->SOF(pdev);
000012  4788              BLX      r1
                  |L12.20|
;;;491        }
;;;492      }
;;;493      return USBD_OK;
000014  2000              MOVS     r0,#0
;;;494    }
000016  bd10              POP      {r4,pc}
;;;495    
                          ENDP


                          AREA ||i.USBD_LL_SetSpeed||, CODE, READONLY, ALIGN=1

                  USBD_LL_SetSpeed PROC
;;;441    */
;;;442    USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
000000  7401              STRB     r1,[r0,#0x10]
;;;443    {
;;;444      pdev->dev_speed = speed;
;;;445      return USBD_OK;
000002  2000              MOVS     r0,#0
;;;446    }
000004  4770              BX       lr
;;;447    
                          ENDP


                          AREA ||i.USBD_LL_SetupStage||, CODE, READONLY, ALIGN=1

                  USBD_LL_SetupStage PROC
;;;264    */
;;;265    USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
000000  b570              PUSH     {r4-r6,lr}
;;;266    {
000002  4604              MOV      r4,r0
;;;267    
;;;268      USBD_ParseSetupRequest(&pdev->request, psetup);
000004  f5007002          ADD      r0,r0,#0x208
000008  4605              MOV      r5,r0
00000a  f7fffffe          BL       USBD_ParseSetupRequest
;;;269      
;;;270      pdev->ep0_state = USBD_EP0_SETUP;
00000e  2001              MOVS     r0,#1
;;;271      pdev->ep0_data_len = pdev->request.wLength;
000010  f8c401f4          STR      r0,[r4,#0x1f4]
000014  f8b4020e          LDRH     r0,[r4,#0x20e]
;;;272      
;;;273      switch (pdev->request.bmRequest & 0x1F) 
000018  f8c401f8          STR      r0,[r4,#0x1f8]
00001c  f8940208          LDRB     r0,[r4,#0x208]
000020  f010011f          ANDS     r1,r0,#0x1f
000024  d00a              BEQ      |L14.60|
000026  2901              CMP      r1,#1
000028  d00d              BEQ      |L14.70|
00002a  2902              CMP      r1,#2
00002c  d010              BEQ      |L14.80|
;;;274      {
;;;275      case USB_REQ_RECIPIENT_DEVICE:   
;;;276        USBD_StdDevReq (pdev, &pdev->request);
;;;277        break;
;;;278        
;;;279      case USB_REQ_RECIPIENT_INTERFACE:     
;;;280        USBD_StdItfReq(pdev, &pdev->request);
;;;281        break;
;;;282        
;;;283      case USB_REQ_RECIPIENT_ENDPOINT:        
;;;284        USBD_StdEPReq(pdev, &pdev->request);   
;;;285        break;
;;;286        
;;;287      default:           
;;;288        USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
00002e  f0000180          AND      r1,r0,#0x80
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       USBD_LL_StallEP
                  |L14.56|
;;;289        break;
;;;290      }  
;;;291      return USBD_OK;  
000038  2000              MOVS     r0,#0
;;;292    }
00003a  bd70              POP      {r4-r6,pc}
                  |L14.60|
00003c  4629              MOV      r1,r5
00003e  4620              MOV      r0,r4                 ;276
000040  f7fffffe          BL       USBD_StdDevReq
000044  e7f8              B        |L14.56|
                  |L14.70|
000046  4629              MOV      r1,r5                 ;277
000048  4620              MOV      r0,r4                 ;280
00004a  f7fffffe          BL       USBD_StdItfReq
00004e  e7f3              B        |L14.56|
                  |L14.80|
000050  4629              MOV      r1,r5                 ;281
000052  4620              MOV      r0,r4                 ;284
000054  f7fffffe          BL       USBD_StdEPReq
000058  e7ee              B        |L14.56|
;;;293    
                          ENDP


                          AREA ||i.USBD_LL_Suspend||, CODE, READONLY, ALIGN=1

                  USBD_LL_Suspend PROC
;;;454    
;;;455    USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
000000  f89011fc          LDRB     r1,[r0,#0x1fc]
;;;456    {
;;;457    	PRINT_FUNC;
;;;458      pdev->dev_old_state =  pdev->dev_state;
000004  f88011fd          STRB     r1,[r0,#0x1fd]
;;;459      pdev->dev_state  = USBD_STATE_SUSPENDED;
000008  2104              MOVS     r1,#4
00000a  f88011fc          STRB     r1,[r0,#0x1fc]
;;;460      return USBD_OK;
00000e  2000              MOVS     r0,#0
;;;461    }
000010  4770              BX       lr
;;;462    
                          ENDP


                          AREA ||i.USBD_RegisterClass||, CODE, READONLY, ALIGN=1

                  USBD_RegisterClass PROC
;;;158      */
;;;159    USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
000000  4602              MOV      r2,r0
;;;160    {
;;;161      USBD_StatusTypeDef   status = USBD_OK;
000002  2000              MOVS     r0,#0
000004  b111              CBZ      r1,|L16.12|
;;;162      if(pclass != 0)
;;;163      {
;;;164        /* link the class tgo the USB Device handle */
;;;165        pdev->pClass = pclass;
;;;166        status = USBD_OK;
000006  f8c21214          STR      r1,[r2,#0x214]
;;;167      }
;;;168      else
;;;169      {
;;;170        USBD_ErrLog("Invalid Class handle");
;;;171        status = USBD_FAIL; 
;;;172      }
;;;173      
;;;174      return status;
;;;175    }
00000a  4770              BX       lr
                  |L16.12|
00000c  2002              MOVS     r0,#2                 ;171
00000e  4770              BX       lr
;;;176    
                          ENDP


                          AREA ||i.USBD_RunTestMode||, CODE, READONLY, ALIGN=1

                  USBD_RunTestMode PROC
;;;214    */
;;;215    USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
000000  2000              MOVS     r0,#0
;;;216    {
;;;217      return USBD_OK;
;;;218    }
000002  4770              BX       lr
;;;219    
                          ENDP


                          AREA ||i.USBD_SetClassConfig||, CODE, READONLY, ALIGN=1

                  USBD_SetClassConfig PROC
;;;228    
;;;229    USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
000000  b510              PUSH     {r4,lr}
;;;230    {
000002  f8d02214          LDR      r2,[r0,#0x214]
;;;231      USBD_StatusTypeDef   ret = USBD_FAIL;
000006  2402              MOVS     r4,#2
000008  b11a              CBZ      r2,|L18.18|
;;;232      
;;;233      if(pdev->pClass != NULL)
;;;234      {
;;;235        /* Set configuration  and Start the Class*/
;;;236        if(pdev->pClass->Init(pdev, cfgidx) == 0)
00000a  6812              LDR      r2,[r2,#0]
00000c  4790              BLX      r2
00000e  b900              CBNZ     r0,|L18.18|
;;;237        {
;;;238          ret = USBD_OK;
000010  2400              MOVS     r4,#0
                  |L18.18|
;;;239        }
;;;240      }
;;;241      return ret; 
000012  4620              MOV      r0,r4
;;;242    }
000014  bd10              POP      {r4,pc}
;;;243    
                          ENDP


                          AREA ||i.USBD_Start||, CODE, READONLY, ALIGN=1

                  USBD_Start PROC
;;;182      */
;;;183    USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
000000  b510              PUSH     {r4,lr}
;;;184    {
;;;185      
;;;186      /* Start the low level driver  */
;;;187      USBD_LL_Start(pdev); 
000002  f7fffffe          BL       USBD_LL_Start
;;;188      
;;;189      return USBD_OK;  
000006  2000              MOVS     r0,#0
;;;190    }
000008  bd10              POP      {r4,pc}
;;;191    
                          ENDP


                          AREA ||i.USBD_Stop||, CODE, READONLY, ALIGN=1

                  USBD_Stop PROC
;;;197      */
;;;198    USBD_StatusTypeDef  USBD_Stop   (USBD_HandleTypeDef *pdev)
000000  b510              PUSH     {r4,lr}
;;;199    {
000002  4604              MOV      r4,r0
;;;200      /* Free Class Resources */
;;;201      pdev->pClass->DeInit(pdev, pdev->dev_config);  
000004  7901              LDRB     r1,[r0,#4]
000006  f8d00214          LDR      r0,[r0,#0x214]
00000a  6842              LDR      r2,[r0,#4]
00000c  4620              MOV      r0,r4
00000e  4790              BLX      r2
;;;202    
;;;203      /* Stop the low level driver  */
;;;204      USBD_LL_Stop(pdev); 
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       USBD_LL_Stop
;;;205      
;;;206      return USBD_OK;  
000016  2000              MOVS     r0,#0
;;;207    }
000018  bd10              POP      {r4,pc}
;;;208    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\Middlewares\\ST\\STM32_USB_Device_Library\\Core\\Src\\usbd_core.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_usbd_core_c_bf7904d4____REV16|
#line 129 "..\\..\\Drivers\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_usbd_core_c_bf7904d4____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_usbd_core_c_bf7904d4____REVSH|
#line 144
|__asm___11_usbd_core_c_bf7904d4____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
