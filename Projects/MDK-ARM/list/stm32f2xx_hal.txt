; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o"bhd2 configuration\stm32f2xx_hal.o" --asm_dir=.\list\ --list_dir=.\list\ --depend="bhd2 configuration\stm32f2xx_hal.d" --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\..\Drivers\CMSIS\Device\ST\STM32F2xx\Include -I..\..\Drivers\CMSIS\Include -I..\..\Middlewares\ST\STM32_USB_Device_Library\Class\CDC\Inc -I..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc -I..\..\Drivers\STM32F2xx_HAL_Driver\Inc -I..\..\Inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_HAL_DRIVER -DSTM32F215xx --omf_browse="bhd2 configuration\stm32f2xx_hal.crf" ..\..\Drivers\STM32F2xx_HAL_Driver\Src\stm32f2xx_hal.c]
                          THUMB

                          AREA ||i.HAL_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_DeInit PROC
;;;174      */
;;;175    HAL_StatusTypeDef HAL_DeInit(void)
000000  4a0b              LDR      r2,|L1.48|
;;;176    {
000002  b510              PUSH     {r4,lr}
;;;177      /* Reset of all peripherals */
;;;178      __APB1_FORCE_RESET();
000004  f04f30ff          MOV      r0,#0xffffffff
000008  6010              STR      r0,[r2,#0]
;;;179      __APB1_RELEASE_RESET();
00000a  2100              MOVS     r1,#0
00000c  6011              STR      r1,[r2,#0]
;;;180    
;;;181      __APB2_FORCE_RESET();
00000e  1d12              ADDS     r2,r2,#4
000010  6010              STR      r0,[r2,#0]
;;;182      __APB2_RELEASE_RESET();
000012  6011              STR      r1,[r2,#0]
;;;183    
;;;184      __AHB1_FORCE_RESET();
000014  4a06              LDR      r2,|L1.48|
000016  3a10              SUBS     r2,r2,#0x10
000018  6010              STR      r0,[r2,#0]
;;;185      __AHB1_RELEASE_RESET();
00001a  6011              STR      r1,[r2,#0]
;;;186    
;;;187      __AHB2_FORCE_RESET();
00001c  1d12              ADDS     r2,r2,#4
00001e  6010              STR      r0,[r2,#0]
;;;188      __AHB2_RELEASE_RESET();
000020  6011              STR      r1,[r2,#0]
;;;189    
;;;190      __AHB3_FORCE_RESET();
000022  1d12              ADDS     r2,r2,#4
000024  6010              STR      r0,[r2,#0]
;;;191      __AHB3_RELEASE_RESET();
000026  6011              STR      r1,[r2,#0]
;;;192    
;;;193      /* De-Init the low level hardware */
;;;194      HAL_MspDeInit();
000028  f7fffffe          BL       HAL_MspDeInit
;;;195        
;;;196      /* Return function status */
;;;197      return HAL_OK;
00002c  2000              MOVS     r0,#0
;;;198    }
00002e  bd10              POP      {r4,pc}
;;;199    
                          ENDP

                  |L1.48|
                          DCD      0x40023820

                          AREA ||i.HAL_Delay||, CODE, READONLY, ALIGN=2

                  HAL_Delay PROC
;;;281      */
;;;282    void HAL_Delay(__IO uint32_t Delay)
000000  4904              LDR      r1,|L2.20|
;;;283    {
000002  b501              PUSH     {r0,lr}
000004  6808              LDR      r0,[r1,#0]  ; uwTick
;;;284      uint32_t timingdelay;
;;;285      
;;;286      timingdelay = HAL_GetTick() + Delay;
000006  9a00              LDR      r2,[sp,#0]
000008  4410              ADD      r0,r0,r2
                  |L2.10|
00000a  680a              LDR      r2,[r1,#0]  ; uwTick
;;;287      while(HAL_GetTick() < timingdelay)
00000c  4282              CMP      r2,r0
00000e  d3fc              BCC      |L2.10|
;;;288      {
;;;289      }
;;;290    }
000010  bd08              POP      {r3,pc}
;;;291    
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      ||.data||

                          AREA ||i.HAL_DisableCompensationCell||, CODE, READONLY, ALIGN=2

                  HAL_DisableCompensationCell PROC
;;;398      */
;;;399    void HAL_DisableCompensationCell(void)
000000  4901              LDR      r1,|L3.8|
;;;400    {
;;;401      *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
000002  2000              MOVS     r0,#0
000004  6008              STR      r0,[r1,#0]
;;;402    }
000006  4770              BX       lr
;;;403    
                          ENDP

                  |L3.8|
                          DCD      0x42270400

                          AREA ||i.HAL_DisableDBGSleepMode||, CODE, READONLY, ALIGN=2

                  HAL_DisableDBGSleepMode PROC
;;;336      */
;;;337    void HAL_DisableDBGSleepMode(void)
000000  4802              LDR      r0,|L4.12|
;;;338    {
;;;339      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
000002  6841              LDR      r1,[r0,#4]
000004  f0210101          BIC      r1,r1,#1
000008  6041              STR      r1,[r0,#4]
;;;340    }
00000a  4770              BX       lr
;;;341    
                          ENDP

                  |L4.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_DisableDBGStandbyMode||, CODE, READONLY, ALIGN=2

                  HAL_DisableDBGStandbyMode PROC
;;;376      */
;;;377    void HAL_DisableDBGStandbyMode(void)
000000  4802              LDR      r0,|L5.12|
;;;378    {
;;;379      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
000002  6841              LDR      r1,[r0,#4]
000004  f0210104          BIC      r1,r1,#4
000008  6041              STR      r1,[r0,#4]
;;;380    }
00000a  4770              BX       lr
;;;381    
                          ENDP

                  |L5.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_DisableDBGStopMode||, CODE, READONLY, ALIGN=2

                  HAL_DisableDBGStopMode PROC
;;;356      */
;;;357    void HAL_DisableDBGStopMode(void)
000000  4802              LDR      r0,|L6.12|
;;;358    {
;;;359      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
000002  6841              LDR      r1,[r0,#4]
000004  f0210102          BIC      r1,r1,#2
000008  6041              STR      r1,[r0,#4]
;;;360    }
00000a  4770              BX       lr
;;;361    
                          ENDP

                  |L6.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_EnableCompensationCell||, CODE, READONLY, ALIGN=2

                  HAL_EnableCompensationCell PROC
;;;387      */
;;;388    void HAL_EnableCompensationCell(void)
000000  4901              LDR      r1,|L7.8|
;;;389    {
;;;390      *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  6008              STR      r0,[r1,#0]
;;;391    }
000006  4770              BX       lr
;;;392    
                          ENDP

                  |L7.8|
                          DCD      0x42270400

                          AREA ||i.HAL_EnableDBGSleepMode||, CODE, READONLY, ALIGN=2

                  HAL_EnableDBGSleepMode PROC
;;;326      */
;;;327    void HAL_EnableDBGSleepMode(void)
000000  4802              LDR      r0,|L8.12|
;;;328    {
;;;329      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
000002  6841              LDR      r1,[r0,#4]
000004  f0410101          ORR      r1,r1,#1
000008  6041              STR      r1,[r0,#4]
;;;330    }
00000a  4770              BX       lr
;;;331    
                          ENDP

                  |L8.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_EnableDBGStandbyMode||, CODE, READONLY, ALIGN=2

                  HAL_EnableDBGStandbyMode PROC
;;;366      */
;;;367    void HAL_EnableDBGStandbyMode(void)
000000  4802              LDR      r0,|L9.12|
;;;368    {
;;;369      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
000002  6841              LDR      r1,[r0,#4]
000004  f0410104          ORR      r1,r1,#4
000008  6041              STR      r1,[r0,#4]
;;;370    }
00000a  4770              BX       lr
;;;371    
                          ENDP

                  |L9.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_EnableDBGStopMode||, CODE, READONLY, ALIGN=2

                  HAL_EnableDBGStopMode PROC
;;;346      */
;;;347    void HAL_EnableDBGStopMode(void)
000000  4802              LDR      r0,|L10.12|
;;;348    {
;;;349      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
000002  6841              LDR      r1,[r0,#4]
000004  f0410102          ORR      r1,r1,#2
000008  6041              STR      r1,[r0,#4]
;;;350    }
00000a  4770              BX       lr
;;;351    
                          ENDP

                  |L10.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_GetDEVID||, CODE, READONLY, ALIGN=2

                  HAL_GetDEVID PROC
;;;316      */
;;;317    uint32_t HAL_GetDEVID(void)
000000  4802              LDR      r0,|L11.12|
;;;318    {
;;;319       return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
000002  6800              LDR      r0,[r0,#0]
000004  f3c0000b          UBFX     r0,r0,#0,#12
;;;320    }
000008  4770              BX       lr
;;;321    
                          ENDP

00000a  0000              DCW      0x0000
                  |L11.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_GetHalVersion||, CODE, READONLY, ALIGN=1

                  HAL_GetHalVersion PROC
;;;296      */
;;;297    uint32_t HAL_GetHalVersion(void)
000000  f04f2001          MOV      r0,#0x1000100
;;;298    {
;;;299     return __STM32F2xx_HAL_VERSION;
;;;300    }
000004  4770              BX       lr
;;;301    
                          ENDP


                          AREA ||i.HAL_GetREVID||, CODE, READONLY, ALIGN=2

                  HAL_GetREVID PROC
;;;306      */
;;;307    uint32_t HAL_GetREVID(void)
000000  4801              LDR      r0,|L13.8|
;;;308    {
;;;309       return((DBGMCU->IDCODE) >> 16);
000002  6800              LDR      r0,[r0,#0]
000004  0c00              LSRS     r0,r0,#16
;;;310    }
000006  4770              BX       lr
;;;311    
                          ENDP

                  |L13.8|
                          DCD      0xe0042000

                          AREA ||i.HAL_GetTick||, CODE, READONLY, ALIGN=2

                  HAL_GetTick PROC
;;;265      */
;;;266    uint32_t HAL_GetTick(void)
000000  4801              LDR      r0,|L14.8|
;;;267    {
;;;268      return uwTick;  
000002  6800              LDR      r0,[r0,#0]  ; uwTick
;;;269    }
000004  4770              BX       lr
;;;270    
                          ENDP

000006  0000              DCW      0x0000
                  |L14.8|
                          DCD      ||.data||

                          AREA ||i.HAL_IncTick||, CODE, READONLY, ALIGN=2

                  HAL_IncTick PROC
;;;255      */
;;;256    void HAL_IncTick(void)
000000  4802              LDR      r0,|L15.12|
;;;257    {
;;;258      uwTick++;
000002  6801              LDR      r1,[r0,#0]  ; uwTick
000004  1c49              ADDS     r1,r1,#1
000006  6001              STR      r1,[r0,#0]  ; uwTick
;;;259    }
000008  4770              BX       lr
;;;260    
                          ENDP

00000a  0000              DCW      0x0000
                  |L15.12|
                          DCD      ||.data||

                          AREA ||i.HAL_Init||, CODE, READONLY, ALIGN=2

                  HAL_Init PROC
;;;140      */
;;;141    HAL_StatusTypeDef HAL_Init(void)
000000  480a              LDR      r0,|L16.44|
;;;142    {
000002  b510              PUSH     {r4,lr}
;;;143      /* Configure Flash prefetch, Instruction cache, Data cache */ 
;;;144    #if (INSTRUCTION_CACHE_ENABLE != 0)
;;;145       __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
000004  6801              LDR      r1,[r0,#0]
000006  f4417100          ORR      r1,r1,#0x200
00000a  6001              STR      r1,[r0,#0]
;;;146    #endif /* INSTRUCTION_CACHE_ENABLE */
;;;147    
;;;148    #if (DATA_CACHE_ENABLE != 0)
;;;149       __HAL_FLASH_DATA_CACHE_ENABLE();
00000c  6801              LDR      r1,[r0,#0]
00000e  f4416180          ORR      r1,r1,#0x400
000012  6001              STR      r1,[r0,#0]
;;;150    #endif /* DATA_CACHE_ENABLE */
;;;151    
;;;152    #if (PREFETCH_ENABLE != 0)
;;;153      __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
000014  6801              LDR      r1,[r0,#0]
000016  f4417180          ORR      r1,r1,#0x100
00001a  6001              STR      r1,[r0,#0]
;;;154    #endif /* PREFETCH_ENABLE */
;;;155    
;;;156      /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
;;;157      HAL_SYSTICK_Config(HSI_VALUE/ 1000);
00001c  f44f507a          MOV      r0,#0x3e80
000020  f7fffffe          BL       HAL_SYSTICK_Config
;;;158      
;;;159      /* Set Interrupt Group Priority */
;;;160    	//HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
;;;161      
;;;162      /* Init the low level hardware */
;;;163      HAL_MspInit();
000024  f7fffffe          BL       HAL_MspInit
;;;164      
;;;165      /* Return function status */
;;;166      return HAL_OK;
000028  2000              MOVS     r0,#0
;;;167    }
00002a  bd10              POP      {r4,pc}
;;;168    
                          ENDP

                  |L16.44|
                          DCD      0x40023c00

                          AREA ||i.HAL_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_MspDeInit PROC
;;;216      */
;;;217    __weak void HAL_MspDeInit(void)
000000  4770              BX       lr
;;;218    {
;;;219      /* NOTE : This function Should not be modified, when the callback is needed,
;;;220                the HAL_MspDeInit could be implemented in the user file
;;;221       */ 
;;;222    }
;;;223    
                          ENDP


                          AREA ||i.HAL_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_MspInit PROC
;;;204      */
;;;205    __weak void HAL_MspInit(void)
000000  4770              BX       lr
;;;206    {
;;;207      /* NOTE : This function Should not be modified, when the callback is needed,
;;;208                the HAL_MspInit could be implemented in the user file
;;;209       */ 
;;;210    }
;;;211    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  uwTick
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Drivers\\STM32F2xx_HAL_Driver\\Src\\stm32f2xx_hal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f2xx_hal_c_HAL_Init____REV16|
#line 129 "..\\..\\Drivers\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f2xx_hal_c_HAL_Init____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f2xx_hal_c_HAL_Init____REVSH|
#line 144
|__asm___15_stm32f2xx_hal_c_HAL_Init____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
