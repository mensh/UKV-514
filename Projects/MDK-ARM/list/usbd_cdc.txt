; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o"bhd2 configuration\usbd_cdc.o" --asm_dir=.\list\ --list_dir=.\list\ --depend="bhd2 configuration\usbd_cdc.d" --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\..\Drivers\CMSIS\Device\ST\STM32F2xx\Include -I..\..\Drivers\CMSIS\Include -I..\..\Middlewares\ST\STM32_USB_Device_Library\Class\CDC\Inc -I..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc -I..\..\Drivers\STM32F2xx_HAL_Driver\Inc -I..\..\Inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_HAL_DRIVER -DSTM32F215xx --omf_browse="bhd2 configuration\usbd_cdc.crf" ..\..\Middlewares\ST\STM32_USB_Device_Library\Class\CDC\Src\usbd_cdc.c]
                          THUMB

                          AREA ||i.USBD_CDC_DataIn||, CODE, READONLY, ALIGN=1

                  USBD_CDC_DataIn PROC
;;;604      */
;;;605    static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
000000  b510              PUSH     {r4,lr}
;;;606    	{
;;;607    	USBD_CDC_HandleTypeDef *hcdc = pdev->pClassData;
000002  f8d00218          LDR      r0,[r0,#0x218]
000006  b130              CBZ      r0,|L1.22|
;;;608    
;;;609    	if( pdev->pClassData != NULL )
;;;610    		{
;;;611    		hcdc->TxState = 0;
000008  2100              MOVS     r1,#0
00000a  f8c01214          STR      r1,[r0,#0x214]
;;;612    
;;;613    		USB_CORE_sendPacket();	
00000e  f7fffffe          BL       USB_CORE_sendPacket
;;;614    
;;;615    		return USBD_OK;
000012  2000              MOVS     r0,#0
;;;616    		}
;;;617    	else
;;;618    		{
;;;619    		return USBD_FAIL;
;;;620    		}
;;;621    	}
000014  bd10              POP      {r4,pc}
                  |L1.22|
000016  2002              MOVS     r0,#2                 ;619
000018  bd10              POP      {r4,pc}
;;;622    
                          ENDP


                          AREA ||i.USBD_CDC_DataOut||, CODE, READONLY, ALIGN=1

                  USBD_CDC_DataOut PROC
;;;629      */
;;;630    static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
000000  b570              PUSH     {r4-r6,lr}
;;;631    {      
000002  4605              MOV      r5,r0
;;;632      USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
;;;633      
;;;634      /* Get the received data length */
;;;635      hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
000004  f8d04218          LDR      r4,[r0,#0x218]
000008  f7fffffe          BL       USBD_LL_GetRxDataSize
;;;636      
;;;637      /* USB data will be immediately processed, this allow next USB traffic being 
;;;638      NAKed till the end of the application Xfer */
;;;639      if(pdev->pClassData != NULL)
00000c  f8c4020c          STR      r0,[r4,#0x20c]
000010  f8d50218          LDR      r0,[r5,#0x218]
000014  b148              CBZ      r0,|L2.42|
;;;640      {
;;;641        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
000016  f8d5121c          LDR      r1,[r5,#0x21c]
00001a  f8d40204          LDR      r0,[r4,#0x204]
00001e  68ca              LDR      r2,[r1,#0xc]
000020  f5047103          ADD      r1,r4,#0x20c
000024  4790              BLX      r2
;;;642    
;;;643        return USBD_OK;
000026  2000              MOVS     r0,#0
;;;644      }
;;;645      else
;;;646      {
;;;647        return USBD_FAIL;
;;;648      }
;;;649    }
000028  bd70              POP      {r4-r6,pc}
                  |L2.42|
00002a  2002              MOVS     r0,#2                 ;647
00002c  bd70              POP      {r4-r6,pc}
;;;650    
                          ENDP


                          AREA ||i.USBD_CDC_DeInit||, CODE, READONLY, ALIGN=1

                  USBD_CDC_DeInit PROC
;;;527      */
;;;528    static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
000000  b570              PUSH     {r4-r6,lr}
;;;529                                     uint8_t cfgidx)
;;;530    {
000002  4604              MOV      r4,r0
;;;531      uint8_t ret = 0;
000004  2500              MOVS     r5,#0
;;;532      
;;;533      /* Open EP IN */
;;;534      USBD_LL_CloseEP(pdev,
000006  2183              MOVS     r1,#0x83
000008  f7fffffe          BL       USBD_LL_CloseEP
;;;535                  CDC_IN_EP);
;;;536      
;;;537      /* Open EP OUT */
;;;538      USBD_LL_CloseEP(pdev,
00000c  2101              MOVS     r1,#1
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       USBD_LL_CloseEP
;;;539                  CDC_OUT_EP);
;;;540      
;;;541      /* Open Command IN EP */
;;;542      USBD_LL_CloseEP(pdev,
000014  2182              MOVS     r1,#0x82
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USBD_LL_CloseEP
;;;543                  CDC_CMD_EP);
;;;544      
;;;545      
;;;546      /* DeInit  physical Interface components */
;;;547      if(pdev->pClassData != NULL)
00001c  f8d40218          LDR      r0,[r4,#0x218]
000020  b150              CBZ      r0,|L3.56|
;;;548      {
;;;549        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
000022  f8d4021c          LDR      r0,[r4,#0x21c]
000026  f5047406          ADD      r4,r4,#0x218
00002a  6840              LDR      r0,[r0,#4]
00002c  4780              BLX      r0
;;;550        USBD_free(pdev->pClassData);
00002e  6820              LDR      r0,[r4,#0]
000030  f7fffffe          BL       free
;;;551        pdev->pClassData = NULL;
000034  2000              MOVS     r0,#0
000036  6020              STR      r0,[r4,#0]
                  |L3.56|
;;;552      }
;;;553      
;;;554      return ret;
000038  4628              MOV      r0,r5
;;;555    }
00003a  bd70              POP      {r4-r6,pc}
;;;556    
                          ENDP


                          AREA ||i.USBD_CDC_EP0_RxReady||, CODE, READONLY, ALIGN=1

                  USBD_CDC_EP0_RxReady PROC
;;;659      */
;;;660    static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
000000  b510              PUSH     {r4,lr}
;;;661    { 
000002  e9d04186          LDRD     r4,r1,[r0,#0x218]
000006  b159              CBZ      r1,|L4.32|
;;;662      USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
;;;663      
;;;664      if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
000008  f8940200          LDRB     r0,[r4,#0x200]
00000c  28ff              CMP      r0,#0xff
00000e  d007              BEQ      |L4.32|
;;;665      {
;;;666        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
000010  688b              LDR      r3,[r1,#8]
000012  f8942201          LDRB     r2,[r4,#0x201]
000016  4621              MOV      r1,r4
000018  4798              BLX      r3
;;;667                                                          (uint8_t *)hcdc->data,
;;;668                                                          hcdc->CmdLength);
;;;669          hcdc->CmdOpCode = 0xFF; 
00001a  20ff              MOVS     r0,#0xff
00001c  f8840200          STRB     r0,[r4,#0x200]
                  |L4.32|
;;;670          
;;;671      }
;;;672      return USBD_OK;
000020  2000              MOVS     r0,#0
;;;673    }
000022  bd10              POP      {r4,pc}
;;;674    
                          ENDP


                          AREA ||i.USBD_CDC_GetDeviceQualifierDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_CDC_GetDeviceQualifierDescriptor PROC
;;;724    */
;;;725    uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
000000  210a              MOVS     r1,#0xa
;;;726    {
;;;727      *length = sizeof (USBD_CDC_DeviceQualifierDesc);
000002  8001              STRH     r1,[r0,#0]
;;;728      return USBD_CDC_DeviceQualifierDesc;
000004  4800              LDR      r0,|L5.8|
;;;729    }
000006  4770              BX       lr
;;;730    
                          ENDP

                  |L5.8|
                          DCD      ||.data||

                          AREA ||i.USBD_CDC_GetFSCfgDesc||, CODE, READONLY, ALIGN=2

                  USBD_CDC_GetFSCfgDesc PROC
;;;683      */
;;;684    static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
000000  2133              MOVS     r1,#0x33
;;;685    {
;;;686    	PRINT_FUNC;
;;;687      *length = sizeof (USBD_CDC_CfgFSDesc);
000002  8001              STRH     r1,[r0,#0]
;;;688      return USBD_CDC_CfgFSDesc;
000004  4800              LDR      r0,|L6.8|
;;;689    }
000006  4770              BX       lr
;;;690    
                          ENDP

                  |L6.8|
                          DCD      ||.data||+0x40

                          AREA ||i.USBD_CDC_GetHSCfgDesc||, CODE, READONLY, ALIGN=2

                  USBD_CDC_GetHSCfgDesc PROC
;;;697      */
;;;698    static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
000000  2133              MOVS     r1,#0x33
;;;699    {
;;;700    	PRINT_FUNC;
;;;701      *length = sizeof (USBD_CDC_CfgHSDesc);
000002  8001              STRH     r1,[r0,#0]
;;;702      return USBD_CDC_CfgHSDesc;
000004  4800              LDR      r0,|L7.8|
;;;703    }
000006  4770              BX       lr
;;;704    
                          ENDP

                  |L7.8|
                          DCD      ||.data||+0xc

                          AREA ||i.USBD_CDC_GetOtherSpeedCfgDesc||, CODE, READONLY, ALIGN=2

                  USBD_CDC_GetOtherSpeedCfgDesc PROC
;;;711      */
;;;712    static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
000000  2133              MOVS     r1,#0x33
;;;713    {
;;;714    	PRINT_FUNC;
;;;715      *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
000002  8001              STRH     r1,[r0,#0]
;;;716      return USBD_CDC_OtherSpeedCfgDesc;
000004  4800              LDR      r0,|L8.8|
;;;717    }
000006  4770              BX       lr
;;;718    
                          ENDP

                  |L8.8|
                          DCD      ||.data||+0x74

                          AREA ||i.USBD_CDC_Init||, CODE, READONLY, ALIGN=1

                  USBD_CDC_Init PROC
;;;437      */
;;;438    static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;439                                   uint8_t cfgidx)
;;;440    {
000004  4604              MOV      r4,r0
;;;441      uint8_t ret = 0;
;;;442      USBD_CDC_HandleTypeDef   *hcdc;
;;;443      
;;;444      if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
000006  7c00              LDRB     r0,[r0,#0x10]
000008  2500              MOVS     r5,#0                 ;441
;;;445      {  
;;;446        /* Open EP IN */
;;;447    //		#warning: "CDC_DATA_HS_IN_PACKET_SIZE changed to CDC_DATA_FS_IN_PACKET_SIZE"
;;;448        USBD_LL_OpenEP(pdev,
00000a  f44f7600          MOV      r6,#0x200
00000e  b370              CBZ      r0,|L9.110|
;;;449                       CDC_IN_EP,
;;;450                       USBD_EP_TYPE_BULK,
;;;451                       CDC_DATA_HS_IN_PACKET_SIZE);
;;;452        
;;;453    //		#warning: "CDC_DATA_HS_OUT_PACKET_SIZE changed to CDC_DATA_FS_OUT_PACKET_SIZE"
;;;454        /* Open EP OUT */
;;;455        USBD_LL_OpenEP(pdev,
;;;456                       CDC_OUT_EP,
;;;457                       USBD_EP_TYPE_BULK,
;;;458                       CDC_DATA_HS_OUT_PACKET_SIZE);
;;;459        
;;;460      }
;;;461      else
;;;462      {
;;;463        /* Open EP IN */
;;;464        USBD_LL_OpenEP(pdev,
000010  2340              MOVS     r3,#0x40
000012  2202              MOVS     r2,#2
000014  2183              MOVS     r1,#0x83
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USBD_LL_OpenEP
;;;465                       CDC_IN_EP,
;;;466                       USBD_EP_TYPE_BULK,
;;;467                       CDC_DATA_FS_IN_PACKET_SIZE);
;;;468        
;;;469        /* Open EP OUT */
;;;470        USBD_LL_OpenEP(pdev,
00001c  2340              MOVS     r3,#0x40
                  |L9.30|
00001e  2202              MOVS     r2,#2
000020  2101              MOVS     r1,#1
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       USBD_LL_OpenEP
;;;471                       CDC_OUT_EP,
;;;472                       USBD_EP_TYPE_BULK,
;;;473                       CDC_DATA_FS_OUT_PACKET_SIZE);
;;;474      }
;;;475      /* Open Command IN EP */
;;;476      USBD_LL_OpenEP(pdev,
000028  2308              MOVS     r3,#8
00002a  2203              MOVS     r2,#3
00002c  2182              MOVS     r1,#0x82
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       USBD_LL_OpenEP
;;;477                     CDC_CMD_EP,
;;;478                     USBD_EP_TYPE_INTR,
;;;479                     CDC_CMD_PACKET_SIZE);
;;;480      
;;;481        
;;;482      pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
000034  f44f7007          MOV      r0,#0x21c
000038  f7fffffe          BL       malloc
;;;483      
;;;484      if(pdev->pClassData == NULL)
00003c  f8c40218          STR      r0,[r4,#0x218]
000040  b1f0              CBZ      r0,|L9.128|
;;;485      {
;;;486        ret = 1; 
;;;487      }
;;;488      else
;;;489      {
;;;490        hcdc = pdev->pClassData;
000042  4607              MOV      r7,r0
;;;491        
;;;492        /* Init  physical Interface components */
;;;493        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
000044  f8d4021c          LDR      r0,[r4,#0x21c]
000048  6800              LDR      r0,[r0,#0]
00004a  4780              BLX      r0
;;;494        
;;;495        /* Init Xfer states */
;;;496        hcdc->TxState =0;
00004c  2000              MOVS     r0,#0
00004e  f8c70214          STR      r0,[r7,#0x214]
;;;497        hcdc->RxState =0;
000052  f8c70218          STR      r0,[r7,#0x218]
;;;498           
;;;499        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
000056  7c20              LDRB     r0,[r4,#0x10]
000058  f8d72204          LDR      r2,[r7,#0x204]
00005c  b190              CBZ      r0,|L9.132|
;;;500        {      
;;;501          /* Prepare Out endpoint to receive next packet */
;;;502          USBD_LL_PrepareReceive(pdev,
;;;503                                 CDC_OUT_EP,
;;;504                                 hcdc->RxBuffer,
;;;505                                 CDC_DATA_HS_OUT_PACKET_SIZE);
;;;506        }
;;;507        else
;;;508        {
;;;509          /* Prepare Out endpoint to receive next packet */
;;;510          USBD_LL_PrepareReceive(pdev,
00005e  2340              MOVS     r3,#0x40
                  |L9.96|
000060  2101              MOVS     r1,#1                 ;502
000062  4620              MOV      r0,r4                 ;502
000064  f7fffffe          BL       USBD_LL_PrepareReceive
                  |L9.104|
;;;511                                 CDC_OUT_EP,
;;;512                                 hcdc->RxBuffer,
;;;513                                 CDC_DATA_FS_OUT_PACKET_SIZE);
;;;514        }
;;;515        
;;;516        
;;;517      }
;;;518      return ret;
000068  4628              MOV      r0,r5
;;;519    }
00006a  e8bd81f0          POP      {r4-r8,pc}
                  |L9.110|
00006e  e7ff              B        |L9.112|
                  |L9.112|
000070  4633              MOV      r3,r6                 ;448
000072  2202              MOVS     r2,#2                 ;448
000074  2183              MOVS     r1,#0x83              ;448
000076  4620              MOV      r0,r4                 ;448
000078  f7fffffe          BL       USBD_LL_OpenEP
00007c  4633              MOV      r3,r6                 ;455
00007e  e7ce              B        |L9.30|
                  |L9.128|
000080  2501              MOVS     r5,#1                 ;486
000082  e7f1              B        |L9.104|
                  |L9.132|
000084  4633              MOV      r3,r6                 ;502
000086  e7eb              B        |L9.96|
;;;520    
                          ENDP


                          AREA ||i.USBD_CDC_ReceivePacket||, CODE, READONLY, ALIGN=1

                  USBD_CDC_ReceivePacket PROC
;;;820      */
;;;821    uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
000000  b510              PUSH     {r4,lr}
;;;822    {      
000002  f8d01218          LDR      r1,[r0,#0x218]
000006  b169              CBZ      r1,|L10.36|
;;;823      USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
;;;824      
;;;825      /* Suspend or Resume USB Out process */
;;;826      if(pdev->pClassData != NULL)
;;;827      {
;;;828        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
000008  7c02              LDRB     r2,[r0,#0x10]
00000a  2a00              CMP      r2,#0
00000c  f8d12204          LDR      r2,[r1,#0x204]
000010  d005              BEQ      |L10.30|
;;;829        {      
;;;830          /* Prepare Out endpoint to receive next packet */
;;;831          USBD_LL_PrepareReceive(pdev,
;;;832                                 CDC_OUT_EP,
;;;833                                 hcdc->RxBuffer,
;;;834                                 CDC_DATA_HS_OUT_PACKET_SIZE);
;;;835        }
;;;836        else
;;;837        {
;;;838          /* Prepare Out endpoint to receive next packet */
;;;839          USBD_LL_PrepareReceive(pdev,
000012  2340              MOVS     r3,#0x40
                  |L10.20|
000014  2101              MOVS     r1,#1
000016  f7fffffe          BL       USBD_LL_PrepareReceive
;;;840                                 CDC_OUT_EP,
;;;841                                 hcdc->RxBuffer,
;;;842                                 CDC_DATA_FS_OUT_PACKET_SIZE);
;;;843        }
;;;844        return USBD_OK;
00001a  2000              MOVS     r0,#0
;;;845      }
;;;846      else
;;;847      {
;;;848        return USBD_FAIL;
;;;849      }
;;;850    }
00001c  bd10              POP      {r4,pc}
                  |L10.30|
00001e  f44f7300          MOV      r3,#0x200             ;831
000022  e7f7              B        |L10.20|
                  |L10.36|
000024  2002              MOVS     r0,#2                 ;848
000026  bd10              POP      {r4,pc}
;;;851    /**
                          ENDP


                          AREA ||i.USBD_CDC_RegisterInterface||, CODE, READONLY, ALIGN=1

                  USBD_CDC_RegisterInterface PROC
;;;736      */
;;;737    uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
000000  4602              MOV      r2,r0
;;;738                                          USBD_CDC_ItfTypeDef *fops)
;;;739    {
;;;740      uint8_t  ret = USBD_FAIL;
000002  2002              MOVS     r0,#2
000004  2900              CMP      r1,#0                 ;739
000006  d002              BEQ      |L11.14|
;;;741      
;;;742      if(fops != NULL)
;;;743      {
;;;744        pdev->pUserData= fops;
;;;745        ret = USBD_OK;    
000008  2000              MOVS     r0,#0
00000a  f8c2121c          STR      r1,[r2,#0x21c]
                  |L11.14|
;;;746      }
;;;747      
;;;748      return ret;
;;;749    }
00000e  4770              BX       lr
;;;750    
                          ENDP


                          AREA ||i.USBD_CDC_SetRxBuffer||, CODE, READONLY, ALIGN=1

                  USBD_CDC_SetRxBuffer PROC
;;;775      */
;;;776    uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
000000  f8d00218          LDR      r0,[r0,#0x218]
;;;777                                       uint8_t  *pbuff)
;;;778    {
;;;779      USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
;;;780      
;;;781      hcdc->RxBuffer = pbuff;
;;;782      
;;;783      return USBD_OK;
000004  f8c01204          STR      r1,[r0,#0x204]
000008  2000              MOVS     r0,#0
;;;784    }
00000a  4770              BX       lr
;;;785    
                          ENDP


                          AREA ||i.USBD_CDC_SetTxBuffer||, CODE, READONLY, ALIGN=1

                  USBD_CDC_SetTxBuffer PROC
;;;756      */
;;;757    uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
000000  f8d00218          LDR      r0,[r0,#0x218]
;;;758                                    uint8_t  *pbuff,
;;;759                                    uint16_t length)
;;;760    {
;;;761      USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
;;;762      
;;;763      hcdc->TxBuffer = pbuff;
;;;764      hcdc->TxLength = length;  
;;;765      
;;;766      return USBD_OK;  
000004  f8c02210          STR      r2,[r0,#0x210]
000008  f8c01208          STR      r1,[r0,#0x208]
00000c  2000              MOVS     r0,#0
;;;767    }
00000e  4770              BX       lr
;;;768    
                          ENDP


                          AREA ||i.USBD_CDC_Setup||, CODE, READONLY, ALIGN=1

                  USBD_CDC_Setup PROC
;;;563      */
;;;564    static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
000000  b570              PUSH     {r4-r6,lr}
;;;565                                    USBD_SetupReqTypedef *req)
;;;566    {
000002  4606              MOV      r6,r0
;;;567      USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
;;;568      
;;;569      switch (req->bmRequest & USB_REQ_TYPE_MASK)
000004  f8d05218          LDR      r5,[r0,#0x218]
000008  7808              LDRB     r0,[r1,#0]
00000a  460c              MOV      r4,r1                 ;566
00000c  f0000160          AND      r1,r0,#0x60
000010  2920              CMP      r1,#0x20
000012  d119              BNE      |L14.72|
;;;570      {
;;;571      case USB_REQ_TYPE_CLASS :
;;;572        if (req->wLength)
000014  88e2              LDRH     r2,[r4,#6]
000016  b1ba              CBZ      r2,|L14.72|
;;;573        {
;;;574          if (req->bmRequest & 0x80)
000018  0600              LSLS     r0,r0,#24
;;;575          {
;;;576            ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
;;;577                                                              (uint8_t *)hcdc->data,
;;;578                                                              req->wLength);
;;;579              USBD_CtlSendData (pdev, 
;;;580                                (uint8_t *)hcdc->data,
;;;581                                req->wLength);
;;;582          }
;;;583          else
;;;584          {
;;;585            hcdc->CmdOpCode = req->bRequest;
00001a  7860              LDRB     r0,[r4,#1]
00001c  d50a              BPL      |L14.52|
00001e  f8d6121c          LDR      r1,[r6,#0x21c]        ;576
000022  688b              LDR      r3,[r1,#8]            ;576
000024  4629              MOV      r1,r5                 ;576
000026  4798              BLX      r3                    ;576
000028  88e2              LDRH     r2,[r4,#6]            ;579
00002a  4629              MOV      r1,r5                 ;579
00002c  4630              MOV      r0,r6                 ;579
00002e  f7fffffe          BL       USBD_CtlSendData
000032  e009              B        |L14.72|
                  |L14.52|
000034  f8850200          STRB     r0,[r5,#0x200]
;;;586            hcdc->CmdLength = req->wLength;
000038  79a0              LDRB     r0,[r4,#6]
00003a  f8850201          STRB     r0,[r5,#0x201]
;;;587                                                          
;;;588            USBD_CtlPrepareRx (pdev, 
00003e  88e2              LDRH     r2,[r4,#6]
000040  4629              MOV      r1,r5
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       USBD_CtlPrepareRx
                  |L14.72|
;;;589                               (uint8_t *)hcdc->data,
;;;590                               req->wLength);
;;;591          }
;;;592          break;
;;;593        }
;;;594      }
;;;595      return USBD_OK;
000048  2000              MOVS     r0,#0
;;;596    }
00004a  bd70              POP      {r4-r6,pc}
;;;597    
                          ENDP


                          AREA ||i.USBD_CDC_TransmitPacket||, CODE, READONLY, ALIGN=1

                  USBD_CDC_TransmitPacket PROC
;;;792      */
;;;793    uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
000000  b510              PUSH     {r4,lr}
;;;794    	{      
000002  f8d01218          LDR      r1,[r0,#0x218]
000006  b121              CBZ      r1,|L15.18|
;;;795    	USBD_CDC_HandleTypeDef *hcdc = pdev->pClassData;
;;;796    
;;;797    	if( pdev->pClassData == NULL )
;;;798    		return USBD_FAIL;
;;;799    	
;;;800    	if( hcdc->TxState == 0 )
000008  f8d12214          LDR      r2,[r1,#0x214]
00000c  b11a              CBZ      r2,|L15.22|
;;;801    		{
;;;802    		/* Tx Transfer in progress */	
;;;803    		hcdc->TxState = 1;
;;;804    			
;;;805    		/* Transmit next packet */
;;;806    		USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
;;;807    
;;;808    		return USBD_OK;
;;;809    		}
;;;810    
;;;811    	return USBD_BUSY;
00000e  2001              MOVS     r0,#1
;;;812    	}
000010  bd10              POP      {r4,pc}
                  |L15.18|
000012  2002              MOVS     r0,#2                 ;798
000014  bd10              POP      {r4,pc}
                  |L15.22|
000016  2201              MOVS     r2,#1                 ;803
000018  f8c12214          STR      r2,[r1,#0x214]        ;803
00001c  f8b12210          LDRH     r2,[r1,#0x210]        ;806
000020  b293              UXTH     r3,r2                 ;806
000022  f8d12208          LDR      r2,[r1,#0x208]        ;806
000026  2183              MOVS     r1,#0x83              ;806
000028  f7fffffe          BL       USBD_LL_Transmit
00002c  2000              MOVS     r0,#0                 ;808
00002e  bd10              POP      {r4,pc}
;;;813    
                          ENDP


                          AREA ||i.USBD_CDC_isTxState||, CODE, READONLY, ALIGN=1

                  USBD_CDC_isTxState PROC
;;;409    
;;;410    uint8_t USBD_CDC_isTxState(USBD_HandleTypeDef *pdev)
000000  f8d00218          LDR      r0,[r0,#0x218]
;;;411    	{
000004  b118              CBZ      r0,|L16.14|
;;;412    	USBD_CDC_HandleTypeDef *hcdc;
;;;413    	if( pdev->pClassData != NULL )
;;;414    		{
;;;415    		hcdc = pdev->pClassData;
;;;416    		return hcdc->TxState;
000006  f8d00214          LDR      r0,[r0,#0x214]
00000a  b2c0              UXTB     r0,r0
;;;417    		}
;;;418    	return 1;
;;;419    	}
00000c  4770              BX       lr
                  |L16.14|
00000e  2001              MOVS     r0,#1                 ;418
000010  4770              BX       lr
;;;420    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  USBD_CDC_DeviceQualifierDesc
000000  0a060002          DCB      0x0a,0x06,0x00,0x02
000004  00000040          DCB      0x00,0x00,0x00,0x40
000008  01000000          DCB      0x01,0x00,0x00,0x00
                  USBD_CDC_CfgHSDesc
00000c  09023300          DCB      0x09,0x02,0x33,0x00
000010  010100c0          DCB      0x01,0x01,0x00,0xc0
000014  fa090400          DCB      0xfa,0x09,0x04,0x00
000018  00020202          DCB      0x00,0x02,0x02,0x02
00001c  00000524          DCB      0x00,0x00,0x05,0x24
000020  00100104          DCB      0x00,0x10,0x01,0x04
000024  24020005          DCB      0x24,0x02,0x00,0x05
000028  24060001          DCB      0x24,0x06,0x00,0x01
00002c  05240100          DCB      0x05,0x24,0x01,0x00
000030  01070501          DCB      0x01,0x07,0x05,0x01
000034  02000205          DCB      0x02,0x00,0x02,0x05
000038  07058302          DCB      0x07,0x05,0x83,0x02
00003c  00020500          DCB      0x00,0x02,0x05,0x00
                  USBD_CDC_CfgFSDesc
000040  09023300          DCB      0x09,0x02,0x33,0x00
000044  010100c0          DCB      0x01,0x01,0x00,0xc0
000048  7d090400          DCB      0x7d,0x09,0x04,0x00
00004c  00020202          DCB      0x00,0x02,0x02,0x02
000050  00000524          DCB      0x00,0x00,0x05,0x24
000054  00100104          DCB      0x00,0x10,0x01,0x04
000058  24020005          DCB      0x24,0x02,0x00,0x05
00005c  24060001          DCB      0x24,0x06,0x00,0x01
000060  05240100          DCB      0x05,0x24,0x01,0x00
000064  01070501          DCB      0x01,0x07,0x05,0x01
000068  02400005          DCB      0x02,0x40,0x00,0x05
00006c  07058302          DCB      0x07,0x05,0x83,0x02
000070  40000500          DCB      0x40,0x00,0x05,0x00
                  USBD_CDC_OtherSpeedCfgDesc
000074  09023300          DCB      0x09,0x02,0x33,0x00
000078  010100c0          DCB      0x01,0x01,0x00,0xc0
00007c  00090400          DCB      0x00,0x09,0x04,0x00
000080  00020202          DCB      0x00,0x02,0x02,0x02
000084  00000524          DCB      0x00,0x00,0x05,0x24
000088  00100104          DCB      0x00,0x10,0x01,0x04
00008c  24020005          DCB      0x24,0x02,0x00,0x05
000090  24060001          DCB      0x24,0x06,0x00,0x01
000094  05240100          DCB      0x05,0x24,0x01,0x00
000098  01070501          DCB      0x01,0x07,0x05,0x01
00009c  02000205          DCB      0x02,0x00,0x02,0x05
0000a0  07058302          DCB      0x07,0x05,0x83,0x02
0000a4  000205            DCB      0x00,0x02,0x05

                          AREA ||area_number.20||, DATA, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.data||
                  USBD_CDC
                          DCD      USBD_CDC_Init
                          DCD      USBD_CDC_DeInit
                          DCD      USBD_CDC_Setup
                          DCD      0x00000000
                          DCD      USBD_CDC_EP0_RxReady
                          DCD      USBD_CDC_DataIn
                          DCD      USBD_CDC_DataOut
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      USBD_CDC_GetHSCfgDesc
                          DCD      USBD_CDC_GetFSCfgDesc
                          DCD      USBD_CDC_GetOtherSpeedCfgDesc
                          DCD      USBD_CDC_GetDeviceQualifierDescriptor

;*** Start embedded assembler ***

#line 1 "..\\..\\Middlewares\\ST\\STM32_USB_Device_Library\\Class\\CDC\\Src\\usbd_cdc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_usbd_cdc_c_USBD_CDC____REV16|
#line 129 "..\\..\\Drivers\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_usbd_cdc_c_USBD_CDC____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_usbd_cdc_c_USBD_CDC____REVSH|
#line 144
|__asm___10_usbd_cdc_c_USBD_CDC____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
