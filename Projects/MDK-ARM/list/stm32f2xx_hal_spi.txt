; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o"bhd2 configuration\stm32f2xx_hal_spi.o" --asm_dir=.\list\ --list_dir=.\list\ --depend="bhd2 configuration\stm32f2xx_hal_spi.d" --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\..\Drivers\CMSIS\Device\ST\STM32F2xx\Include -I..\..\Drivers\CMSIS\Include -I..\..\Middlewares\ST\STM32_USB_Device_Library\Class\CDC\Inc -I..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc -I..\..\Drivers\STM32F2xx_HAL_Driver\Inc -I..\..\Inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_HAL_DRIVER -DSTM32F215xx --omf_browse="bhd2 configuration\stm32f2xx_hal_spi.crf" ..\..\Drivers\STM32F2xx_HAL_Driver\Src\stm32f2xx_hal_spi.c]
                          THUMB

                          AREA ||i.HAL_SPI_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_SPI_DeInit PROC
;;;214      */
;;;215    HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;216    {
000002  0004              MOVS     r4,r0
000004  d00f              BEQ      |L1.38|
;;;217      /* Check the SPI handle allocation */
;;;218      if(hspi == NULL)
;;;219      {
;;;220        return HAL_ERROR;
;;;221      }
;;;222    
;;;223      /* Disable the SPI Peripheral Clock */
;;;224      __HAL_SPI_DISABLE(hspi);
000006  6820              LDR      r0,[r4,#0]
000008  6801              LDR      r1,[r0,#0]
00000a  f0210140          BIC      r1,r1,#0x40
00000e  6001              STR      r1,[r0,#0]
;;;225    
;;;226      /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
;;;227      HAL_SPI_MspDeInit(hspi);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       HAL_SPI_MspDeInit
;;;228    
;;;229      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
000016  2000              MOVS     r0,#0
000018  f8840052          STRB     r0,[r4,#0x52]
;;;230      hspi->State = HAL_SPI_STATE_RESET;
00001c  f8840051          STRB     r0,[r4,#0x51]
;;;231    
;;;232      /* Release Lock */
;;;233      __HAL_UNLOCK(hspi);
000020  f8840050          STRB     r0,[r4,#0x50]
;;;234    
;;;235      return HAL_OK;
;;;236    }
000024  bd10              POP      {r4,pc}
                  |L1.38|
000026  2001              MOVS     r0,#1                 ;220
000028  bd10              POP      {r4,pc}
;;;237    
                          ENDP


                          AREA ||i.HAL_SPI_ErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_ErrorCallback PROC
;;;1470     */
;;;1471    __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1472   {
;;;1473     /* NOTE : - This function Should not be modified, when the callback is needed,
;;;1474               the HAL_SPI_ErrorCallback() could be implenetd in the user file.
;;;1475               - The ErrorCode parameter in the hspi handle is updated by the SPI processes
;;;1476               and user can use HAL_SPI_GetError() API to check the latest error occured.
;;;1477      */
;;;1478   }
;;;1479   
                          ENDP


                          AREA ||i.HAL_SPI_GetError||, CODE, READONLY, ALIGN=1

                  HAL_SPI_GetError PROC
;;;1513     */
;;;1514   HAL_SPI_ErrorTypeDef HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
000000  f8900052          LDRB     r0,[r0,#0x52]
;;;1515   {
;;;1516     return hspi->ErrorCode;
;;;1517   }
000004  4770              BX       lr
;;;1518   
                          ENDP


                          AREA ||i.HAL_SPI_GetState||, CODE, READONLY, ALIGN=1

                  HAL_SPI_GetState PROC
;;;1503     */
;;;1504   HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
000000  f8900051          LDRB     r0,[r0,#0x51]
;;;1505   {
;;;1506     return hspi->State;
;;;1507   }
000004  4770              BX       lr
;;;1508   
                          ENDP


                          AREA ||i.HAL_SPI_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_SPI_IRQHandler PROC
;;;1365     */
;;;1366   void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;1367   {
;;;1368     uint32_t tmp1 = 0, tmp2 = 0, tmp3 = 0;
;;;1369   
;;;1370     tmp1 = __HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE);
000002  6801              LDR      r1,[r0,#0]
000004  688a              LDR      r2,[r1,#8]
;;;1371     tmp2 = __HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_RXNE);
000006  684b              LDR      r3,[r1,#4]
000008  f0120f01          TST      r2,#1                 ;1370
;;;1372     tmp3 = __HAL_SPI_GET_FLAG(hspi, SPI_FLAG_OVR);
00000c  688c              LDR      r4,[r1,#8]
00000e  f3c31380          UBFX     r3,r3,#6,#1           ;1371
000012  f3c41480          UBFX     r4,r4,#6,#1
000016  d001              BEQ      |L5.28|
;;;1373     /* SPI in mode Receiver and Overrun not occurred ---------------------------*/
;;;1374     if((tmp1 != RESET) && (tmp2 != RESET) && (tmp3 == RESET))
000018  b103              CBZ      r3,|L5.28|
00001a  b15c              CBZ      r4,|L5.52|
                  |L5.28|
;;;1375     {
;;;1376       hspi->RxISR(hspi);
;;;1377       return;
;;;1378     } 
;;;1379   
;;;1380     tmp1 = __HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE);
00001c  688a              LDR      r2,[r1,#8]
00001e  f3c20340          UBFX     r3,r2,#1,#1
;;;1381     tmp2 = __HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_TXE);
000022  684a              LDR      r2,[r1,#4]
000024  f3c212c0          UBFX     r2,r2,#7,#1
;;;1382     /* SPI in mode Tramitter ---------------------------------------------------*/
;;;1383     if((tmp1 != RESET) && (tmp2 != RESET))
000028  b133              CBZ      r3,|L5.56|
00002a  b12a              CBZ      r2,|L5.56|
;;;1384     {
;;;1385       hspi->TxISR(hspi);
00002c  6cc1              LDR      r1,[r0,#0x4c]
                  |L5.46|
00002e  e8bd4010          POP      {r4,lr}
000032  4708              BX       r1
                  |L5.52|
000034  6c81              LDR      r1,[r0,#0x48]         ;1377
000036  e7fa              B        |L5.46|
                  |L5.56|
;;;1386       return;
;;;1387     }
;;;1388   
;;;1389     if(__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_ERR) != RESET)
000038  684a              LDR      r2,[r1,#4]
00003a  43d2              MVNS     r2,r2
00003c  0692              LSLS     r2,r2,#26
00003e  d442              BMI      |L5.198|
;;;1390     {
;;;1391       /* SPI CRC error interrupt occured ---------------------------------------*/
;;;1392       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
000040  688a              LDR      r2,[r1,#8]
000042  43d2              MVNS     r2,r2
000044  06d2              LSLS     r2,r2,#27
000046  d409              BMI      |L5.92|
;;;1393       {
;;;1394         hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
000048  f8902052          LDRB     r2,[r0,#0x52]
00004c  f0420202          ORR      r2,r2,#2
000050  f8802052          STRB     r2,[r0,#0x52]
;;;1395         __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
000054  688a              LDR      r2,[r1,#8]
000056  f0220210          BIC      r2,r2,#0x10
00005a  608a              STR      r2,[r1,#8]
                  |L5.92|
;;;1396       }
;;;1397       /* SPI Mode Fault error interrupt occured --------------------------------*/
;;;1398       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_MODF) != RESET)
00005c  6801              LDR      r1,[r0,#0]
00005e  688a              LDR      r2,[r1,#8]
000060  43d2              MVNS     r2,r2
000062  0692              LSLS     r2,r2,#26
000064  d40a              BMI      |L5.124|
;;;1399       {
;;;1400         hspi->ErrorCode |= HAL_SPI_ERROR_MODF;
000066  f8902052          LDRB     r2,[r0,#0x52]
00006a  f0420201          ORR      r2,r2,#1
00006e  f8802052          STRB     r2,[r0,#0x52]
;;;1401         __HAL_SPI_CLEAR_MODFFLAG(hspi);
000072  688a              LDR      r2,[r1,#8]
000074  680a              LDR      r2,[r1,#0]
000076  f0220240          BIC      r2,r2,#0x40
00007a  600a              STR      r2,[r1,#0]
                  |L5.124|
;;;1402       }
;;;1403       
;;;1404       /* SPI Overrun error interrupt occured -----------------------------------*/
;;;1405       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_OVR) != RESET)
00007c  6801              LDR      r1,[r0,#0]
00007e  688a              LDR      r2,[r1,#8]
000080  43d2              MVNS     r2,r2
000082  0652              LSLS     r2,r2,#25
000084  d40b              BMI      |L5.158|
;;;1406       {
;;;1407         if(hspi->State != HAL_SPI_STATE_BUSY_TX)
000086  f8902051          LDRB     r2,[r0,#0x51]
00008a  2a12              CMP      r2,#0x12
00008c  d007              BEQ      |L5.158|
;;;1408         {
;;;1409           hspi->ErrorCode |= HAL_SPI_ERROR_OVR;
00008e  f8902052          LDRB     r2,[r0,#0x52]
000092  f0420204          ORR      r2,r2,#4
000096  f8802052          STRB     r2,[r0,#0x52]
;;;1410           __HAL_SPI_CLEAR_OVRFLAG(hspi);      
00009a  68ca              LDR      r2,[r1,#0xc]
00009c  688a              LDR      r2,[r1,#8]
                  |L5.158|
;;;1411         }
;;;1412       }
;;;1413   
;;;1414       /* SPI Frame error interrupt occured -------------------------------------*/
;;;1415       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_FRE) != RESET)
00009e  688a              LDR      r2,[r1,#8]
0000a0  43d2              MVNS     r2,r2
0000a2  05d2              LSLS     r2,r2,#23
0000a4  d406              BMI      |L5.180|
;;;1416       {
;;;1417         hspi->ErrorCode |= HAL_SPI_ERROR_FRE;
0000a6  f8902052          LDRB     r2,[r0,#0x52]
0000aa  f0420208          ORR      r2,r2,#8
0000ae  f8802052          STRB     r2,[r0,#0x52]
;;;1418         __HAL_SPI_CLEAR_FREFLAG(hspi);
0000b2  6889              LDR      r1,[r1,#8]
                  |L5.180|
;;;1419       }
;;;1420   
;;;1421       /* Call the Error call Back in case of Errors */
;;;1422       if(hspi->ErrorCode!=HAL_SPI_ERROR_NONE)
0000b4  f8901052          LDRB     r1,[r0,#0x52]
0000b8  2900              CMP      r1,#0
0000ba  d004              BEQ      |L5.198|
;;;1423       {
;;;1424         hspi->State = HAL_SPI_STATE_READY;
0000bc  2101              MOVS     r1,#1
0000be  f8801051          STRB     r1,[r0,#0x51]
;;;1425         HAL_SPI_ErrorCallback(hspi);
0000c2  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L5.198|
;;;1426       }
;;;1427     }
;;;1428   }
0000c6  bd10              POP      {r4,pc}
;;;1429   
                          ENDP


                          AREA ||i.HAL_SPI_Init||, CODE, READONLY, ALIGN=1

                  HAL_SPI_Init PROC
;;;154      */
;;;155    HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;156    {
000002  0004              MOVS     r4,r0
000004  d003              BEQ      |L6.14|
;;;157      /* Check the SPI handle allocation */
;;;158      if(hspi == NULL)
;;;159      {
;;;160        return HAL_ERROR;
;;;161      }
;;;162    
;;;163      /* Check the parameters */
;;;164      assert_param(IS_SPI_MODE(hspi->Init.Mode));
;;;165      assert_param(IS_SPI_DIRECTION_MODE(hspi->Init.Direction));
;;;166      assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
;;;167      assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
;;;168      assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
;;;169      assert_param(IS_SPI_NSS(hspi->Init.NSS));
;;;170      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
;;;171      assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
;;;172      assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
;;;173      assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
;;;174      assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
;;;175    
;;;176      if(hspi->State == HAL_SPI_STATE_RESET)
000006  f8940051          LDRB     r0,[r4,#0x51]
00000a  b110              CBZ      r0,|L6.18|
00000c  e004              B        |L6.24|
                  |L6.14|
00000e  2001              MOVS     r0,#1                 ;160
;;;177      {
;;;178        /* Init the low level hardware : GPIO, CLOCK, NVIC... */
;;;179        HAL_SPI_MspInit(hspi);
;;;180      }
;;;181      
;;;182      hspi->State = HAL_SPI_STATE_BUSY;
;;;183    
;;;184      /* Disble the selected SPI peripheral */
;;;185      __HAL_SPI_DISABLE(hspi);
;;;186    
;;;187      /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
;;;188      /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
;;;189      Communication speed, First bit and CRC calculation state */
;;;190      hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
;;;191                             hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
;;;192                             hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
;;;193    
;;;194      /* Configure : NSS management */
;;;195      hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode);
;;;196    
;;;197      /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
;;;198      /* Configure : CRC Polynomial */
;;;199      hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
;;;200    
;;;201      /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
;;;202      hspi->Instance->I2SCFGR &= (uint32_t)(~SPI_I2SCFGR_I2SMOD);
;;;203    
;;;204      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
;;;205      hspi->State = HAL_SPI_STATE_READY;
;;;206      
;;;207      return HAL_OK;
;;;208    }
000010  bd10              POP      {r4,pc}
                  |L6.18|
000012  4620              MOV      r0,r4                 ;179
000014  f7fffffe          BL       HAL_SPI_MspInit
                  |L6.24|
000018  2002              MOVS     r0,#2                 ;182
00001a  f8840051          STRB     r0,[r4,#0x51]         ;182
00001e  6820              LDR      r0,[r4,#0]            ;185
000020  6801              LDR      r1,[r0,#0]            ;185
000022  f0210140          BIC      r1,r1,#0x40           ;185
000026  6001              STR      r1,[r0,#0]            ;185
000028  e9d40101          LDRD     r0,r1,[r4,#4]         ;185
00002c  4308              ORRS     r0,r0,r1              ;190
00002e  e9d41203          LDRD     r1,r2,[r4,#0xc]       ;190
000032  4311              ORRS     r1,r1,r2              ;190
000034  4308              ORRS     r0,r0,r1              ;190
000036  6961              LDR      r1,[r4,#0x14]         ;190
000038  4308              ORRS     r0,r0,r1              ;190
00003a  8b21              LDRH     r1,[r4,#0x18]         ;190
00003c  f4017100          AND      r1,r1,#0x200          ;190
000040  4308              ORRS     r0,r0,r1              ;190
000042  69e1              LDR      r1,[r4,#0x1c]         ;190
000044  4308              ORRS     r0,r0,r1              ;190
000046  6a21              LDR      r1,[r4,#0x20]         ;190
000048  4308              ORRS     r0,r0,r1              ;190
00004a  6aa1              LDR      r1,[r4,#0x28]         ;190
00004c  4308              ORRS     r0,r0,r1              ;190
00004e  6821              LDR      r1,[r4,#0]            ;190
000050  6008              STR      r0,[r1,#0]            ;190
000052  69a0              LDR      r0,[r4,#0x18]         ;195
000054  2104              MOVS     r1,#4                 ;195
000056  ea014010          AND      r0,r1,r0,LSR #16      ;195
00005a  6a61              LDR      r1,[r4,#0x24]         ;195
00005c  4308              ORRS     r0,r0,r1              ;195
00005e  6821              LDR      r1,[r4,#0]            ;195
000060  6048              STR      r0,[r1,#4]            ;195
000062  6821              LDR      r1,[r4,#0]            ;199
000064  6ae0              LDR      r0,[r4,#0x2c]         ;199
000066  6108              STR      r0,[r1,#0x10]         ;199
000068  6820              LDR      r0,[r4,#0]            ;202
00006a  69c1              LDR      r1,[r0,#0x1c]         ;202
00006c  f4216100          BIC      r1,r1,#0x800          ;202
000070  61c1              STR      r1,[r0,#0x1c]         ;202
000072  2000              MOVS     r0,#0                 ;204
000074  f8840052          STRB     r0,[r4,#0x52]         ;204
000078  2001              MOVS     r0,#1                 ;205
00007a  f8840051          STRB     r0,[r4,#0x51]         ;205
00007e  2000              MOVS     r0,#0                 ;207
000080  bd10              POP      {r4,pc}
;;;209    
                          ENDP


                          AREA ||i.HAL_SPI_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_SPI_MspDeInit PROC
;;;254      */
;;;255     __weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;256    {
;;;257      /* NOTE : This function Should not be modified, when the callback is needed,
;;;258                the HAL_SPI_MspDeInit could be implenetd in the user file
;;;259       */
;;;260    }
;;;261    
                          ENDP


                          AREA ||i.HAL_SPI_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_SPI_MspInit PROC
;;;242      */
;;;243     __weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;244     {
;;;245       /* NOTE : This function Should not be modified, when the callback is needed,
;;;246                the HAL_SPI_MspInit could be implenetd in the user file
;;;247       */
;;;248    }
;;;249    
                          ENDP


                          AREA ||i.HAL_SPI_Receive||, CODE, READONLY, ALIGN=1

                  HAL_SPI_Receive PROC
;;;462      */
;;;463    HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;464    {
000004  4604              MOV      r4,r0
;;;465      __IO uint16_t tmpreg;
;;;466      uint32_t tmp = 0;
;;;467    
;;;468      if(hspi->State == HAL_SPI_STATE_READY)
000006  f8900051          LDRB     r0,[r0,#0x51]
00000a  469a              MOV      r10,r3                ;464
00000c  2801              CMP      r0,#1
00000e  d17d              BNE      |L9.268|
;;;469      {
;;;470        if((pData == NULL ) || (Size == 0)) 
000010  b3f1              CBZ      r1,|L9.144|
000012  b3ea              CBZ      r2,|L9.144|
;;;471        {
;;;472          return  HAL_ERROR;
;;;473        }
;;;474    
;;;475        /* Process Locked */
;;;476        __HAL_LOCK(hspi);
000014  f8940050          LDRB     r0,[r4,#0x50]
000018  2801              CMP      r0,#1
00001a  d077              BEQ      |L9.268|
00001c  2601              MOVS     r6,#1
00001e  f8846050          STRB     r6,[r4,#0x50]
;;;477    
;;;478        /* Configure communication */
;;;479        hspi->State       = HAL_SPI_STATE_BUSY_RX;
000022  2022              MOVS     r0,#0x22
000024  f8840051          STRB     r0,[r4,#0x51]
;;;480        hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
000028  2500              MOVS     r5,#0
00002a  f8845052          STRB     r5,[r4,#0x52]
;;;481    
;;;482        hspi->pRxBuffPtr  = pData;
;;;483        hspi->RxXferSize  = Size;
00002e  63a1              STR      r1,[r4,#0x38]
000030  87a2              STRH     r2,[r4,#0x3c]
;;;484        hspi->RxXferCount = Size;
000032  87e2              STRH     r2,[r4,#0x3e]
;;;485    
;;;486        /*Init field not used in handle to zero */
;;;487        hspi->RxISR = 0;
;;;488        hspi->TxISR = 0;
000034  64a5              STR      r5,[r4,#0x48]
;;;489        hspi->TxXferSize   = 0;
000036  64e5              STR      r5,[r4,#0x4c]
000038  86a5              STRH     r5,[r4,#0x34]
;;;490        hspi->TxXferCount  = 0;
00003a  86e5              STRH     r5,[r4,#0x36]
;;;491    
;;;492        /* Configure communication direction : 1Line */
;;;493        if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
00003c  68a0              LDR      r0,[r4,#8]
00003e  f44f4900          MOV      r9,#0x8000
000042  4548              CMP      r0,r9
000044  d104              BNE      |L9.80|
;;;494        {
;;;495          __HAL_SPI_1LINE_RX(hspi);
000046  6820              LDR      r0,[r4,#0]
000048  6803              LDR      r3,[r0,#0]
00004a  f4234380          BIC      r3,r3,#0x4000
00004e  6003              STR      r3,[r0,#0]
                  |L9.80|
;;;496        }
;;;497    
;;;498        /* Reset CRC Calculation */
;;;499        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
000050  6aa0              LDR      r0,[r4,#0x28]
000052  f44f5700          MOV      r7,#0x2000
000056  42b8              CMP      r0,r7
000058  d109              BNE      |L9.110|
;;;500        {
;;;501          __HAL_SPI_RESET_CRC(hspi);
00005a  6820              LDR      r0,[r4,#0]
00005c  6803              LDR      r3,[r0,#0]
00005e  f4235300          BIC      r3,r3,#0x2000
000062  6003              STR      r3,[r0,#0]
000064  6820              LDR      r0,[r4,#0]
000066  6803              LDR      r3,[r0,#0]
000068  f4435300          ORR      r3,r3,#0x2000
00006c  6003              STR      r3,[r0,#0]
                  |L9.110|
;;;502        }
;;;503        
;;;504        if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
00006e  6860              LDR      r0,[r4,#4]
000070  f44f7882          MOV      r8,#0x104
000074  4540              CMP      r0,r8
000076  d101              BNE      |L9.124|
000078  68a0              LDR      r0,[r4,#8]
00007a  b178              CBZ      r0,|L9.156|
                  |L9.124|
;;;505        {
;;;506          /* Process Unlocked */
;;;507          __HAL_UNLOCK(hspi);
;;;508    
;;;509          /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;510          return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
;;;511        }
;;;512    
;;;513        /* Check if the SPI is already enabled */ 
;;;514        if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
00007c  6820              LDR      r0,[r4,#0]
00007e  6801              LDR      r1,[r0,#0]
000080  0649              LSLS     r1,r1,#25
000082  d403              BMI      |L9.140|
;;;515        {
;;;516          /* Enable SPI peripheral */
;;;517          __HAL_SPI_ENABLE(hspi);
000084  6801              LDR      r1,[r0,#0]
000086  f0410140          ORR      r1,r1,#0x40
00008a  6001              STR      r1,[r0,#0]
                  |L9.140|
;;;518        }
;;;519    
;;;520        /* Receive data in 8 Bit mode */
;;;521        if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
00008c  68e0              LDR      r0,[r4,#0xc]
00008e  e000              B        |L9.146|
                  |L9.144|
000090  e001              B        |L9.150|
                  |L9.146|
000092  b1e8              CBZ      r0,|L9.208|
000094  e031              B        |L9.250|
                  |L9.150|
000096  2001              MOVS     r0,#1                 ;472
                  |L9.152|
;;;522        {
;;;523          while(hspi->RxXferCount > 1)
;;;524          {
;;;525            /* Wait until RXNE flag is set */
;;;526            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;527            { 
;;;528              return HAL_TIMEOUT;
;;;529            }
;;;530    
;;;531            (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;532            hspi->RxXferCount--;
;;;533          }
;;;534          /* Enable CRC Transmission */
;;;535          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED) 
;;;536          {
;;;537            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;538          }
;;;539        }
;;;540        /* Receive data in 16 Bit mode */
;;;541        else
;;;542        {
;;;543          while(hspi->RxXferCount > 1)
;;;544          {
;;;545            /* Wait until RXNE flag is set to read data */
;;;546            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;547            { 
;;;548              return HAL_TIMEOUT;
;;;549            }
;;;550    
;;;551            *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;552            hspi->pRxBuffPtr+=2;
;;;553            hspi->RxXferCount--;
;;;554          }
;;;555          /* Enable CRC Transmission */
;;;556          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED) 
;;;557          {
;;;558            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;559          }
;;;560        }
;;;561    
;;;562        /* Wait until RXNE flag is set */
;;;563        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;564        { 
;;;565          return HAL_TIMEOUT;
;;;566        }
;;;567    
;;;568        /* Receive last data in 8 Bit mode */
;;;569        if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;570        {
;;;571          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;572        }
;;;573        /* Receive last data in 16 Bit mode */
;;;574        else
;;;575        {
;;;576          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;577          hspi->pRxBuffPtr+=2;
;;;578        }
;;;579        hspi->RxXferCount--;
;;;580    
;;;581        /* Wait until RXNE flag is set: CRC Received */
;;;582        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
;;;583        {
;;;584          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;585          {
;;;586            hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
;;;587            return HAL_TIMEOUT;
;;;588          }
;;;589    
;;;590          /* Read CRC to Flush RXNE flag */
;;;591          tmpreg = hspi->Instance->DR;
;;;592        }
;;;593        
;;;594        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
;;;595        {
;;;596          /* Disable SPI peripheral */
;;;597          __HAL_SPI_DISABLE(hspi);
;;;598        }
;;;599    
;;;600        hspi->State = HAL_SPI_STATE_READY;
;;;601    
;;;602        tmp = __HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR);
;;;603        /* Check if CRC error occurred */
;;;604        if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED) && (tmp != RESET))
;;;605        {  
;;;606          hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
;;;607    
;;;608          /* Reset CRC Calculation */
;;;609          __HAL_SPI_RESET_CRC(hspi);
;;;610    
;;;611          /* Process Unlocked */
;;;612          __HAL_UNLOCK(hspi);
;;;613    
;;;614          return HAL_ERROR; 
;;;615        }
;;;616    
;;;617        /* Process Unlocked */
;;;618        __HAL_UNLOCK(hspi);
;;;619    
;;;620        return HAL_OK;
;;;621      }
;;;622      else
;;;623      {
;;;624        return HAL_BUSY;
;;;625      }
;;;626    }
000098  e8bd8ff8          POP      {r3-r11,pc}
                  |L9.156|
00009c  f8845050          STRB     r5,[r4,#0x50]         ;507
0000a0  4613              MOV      r3,r2                 ;510
0000a2  460a              MOV      r2,r1                 ;510
0000a4  4620              MOV      r0,r4                 ;510
0000a6  f8cda000          STR      r10,[sp,#0]           ;510
0000aa  f7fffffe          BL       HAL_SPI_TransmitReceive
0000ae  e7f3              B        |L9.152|
                  |L9.176|
0000b0  4653              MOV      r3,r10                ;526
0000b2  2200              MOVS     r2,#0                 ;526
0000b4  2101              MOVS     r1,#1                 ;526
0000b6  4620              MOV      r0,r4                 ;526
0000b8  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0000bc  bb38              CBNZ     r0,|L9.270|
0000be  6820              LDR      r0,[r4,#0]            ;531
0000c0  68c1              LDR      r1,[r0,#0xc]          ;531
0000c2  6ba0              LDR      r0,[r4,#0x38]         ;531
0000c4  1c42              ADDS     r2,r0,#1              ;531
0000c6  63a2              STR      r2,[r4,#0x38]         ;531
0000c8  7001              STRB     r1,[r0,#0]            ;531
0000ca  8fe0              LDRH     r0,[r4,#0x3e]         ;532
0000cc  1e40              SUBS     r0,r0,#1              ;532
0000ce  87e0              STRH     r0,[r4,#0x3e]         ;532
                  |L9.208|
0000d0  8fe0              LDRH     r0,[r4,#0x3e]         ;523
0000d2  2801              CMP      r0,#1                 ;523
0000d4  d8ec              BHI      |L9.176|
0000d6  e013              B        |L9.256|
                  |L9.216|
0000d8  4653              MOV      r3,r10                ;546
0000da  2200              MOVS     r2,#0                 ;546
0000dc  2101              MOVS     r1,#1                 ;546
0000de  4620              MOV      r0,r4                 ;546
0000e0  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0000e4  b998              CBNZ     r0,|L9.270|
0000e6  6820              LDR      r0,[r4,#0]            ;551
0000e8  68c0              LDR      r0,[r0,#0xc]          ;551
0000ea  6ba1              LDR      r1,[r4,#0x38]         ;551
0000ec  8008              STRH     r0,[r1,#0]            ;551
0000ee  6ba0              LDR      r0,[r4,#0x38]         ;552
0000f0  1c80              ADDS     r0,r0,#2              ;552
0000f2  63a0              STR      r0,[r4,#0x38]         ;553
0000f4  8fe0              LDRH     r0,[r4,#0x3e]         ;553
0000f6  1e40              SUBS     r0,r0,#1              ;553
0000f8  87e0              STRH     r0,[r4,#0x3e]         ;553
                  |L9.250|
0000fa  8fe0              LDRH     r0,[r4,#0x3e]         ;543
0000fc  2801              CMP      r0,#1                 ;543
0000fe  d8eb              BHI      |L9.216|
                  |L9.256|
000100  6aa0              LDR      r0,[r4,#0x28]         ;556
000102  42b8              CMP      r0,r7                 ;556
000104  d107              BNE      |L9.278|
000106  6820              LDR      r0,[r4,#0]            ;558
000108  6801              LDR      r1,[r0,#0]            ;558
00010a  e001              B        |L9.272|
                  |L9.268|
00010c  e061              B        |L9.466|
                  |L9.270|
00010e  e009              B        |L9.292|
                  |L9.272|
000110  f4415180          ORR      r1,r1,#0x1000         ;558
000114  6001              STR      r1,[r0,#0]            ;558
                  |L9.278|
000116  4653              MOV      r3,r10                ;563
000118  2200              MOVS     r2,#0                 ;563
00011a  2101              MOVS     r1,#1                 ;563
00011c  4620              MOV      r0,r4                 ;563
00011e  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000122  b108              CBZ      r0,|L9.296|
                  |L9.292|
000124  2003              MOVS     r0,#3                 ;565
000126  e7b7              B        |L9.152|
                  |L9.296|
000128  68e0              LDR      r0,[r4,#0xc]          ;569
00012a  2800              CMP      r0,#0                 ;569
00012c  6820              LDR      r0,[r4,#0]            ;569
00012e  d018              BEQ      |L9.354|
000130  68c0              LDR      r0,[r0,#0xc]          ;576
000132  6ba1              LDR      r1,[r4,#0x38]         ;576
000134  8008              STRH     r0,[r1,#0]            ;576
000136  6ba0              LDR      r0,[r4,#0x38]         ;577
000138  1c80              ADDS     r0,r0,#2              ;577
00013a  63a0              STR      r0,[r4,#0x38]         ;577
                  |L9.316|
00013c  8fe0              LDRH     r0,[r4,#0x3e]         ;579
00013e  1e40              SUBS     r0,r0,#1              ;579
000140  87e0              STRH     r0,[r4,#0x3e]         ;579
000142  6aa0              LDR      r0,[r4,#0x28]         ;582
000144  42b8              CMP      r0,r7                 ;582
000146  d116              BNE      |L9.374|
000148  4653              MOV      r3,r10                ;584
00014a  2200              MOVS     r2,#0                 ;584
00014c  2101              MOVS     r1,#1                 ;584
00014e  4620              MOV      r0,r4                 ;584
000150  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000154  b158              CBZ      r0,|L9.366|
000156  f8140f52          LDRB     r0,[r4,#0x52]!        ;586
00015a  f0400002          ORR      r0,r0,#2              ;586
00015e  7020              STRB     r0,[r4,#0]            ;586
000160  e7e0              B        |L9.292|
                  |L9.354|
000162  68c1              LDR      r1,[r0,#0xc]          ;571
000164  6ba0              LDR      r0,[r4,#0x38]         ;571
000166  1c42              ADDS     r2,r0,#1              ;571
000168  63a2              STR      r2,[r4,#0x38]         ;571
00016a  7001              STRB     r1,[r0,#0]            ;571
00016c  e7e6              B        |L9.316|
                  |L9.366|
00016e  6820              LDR      r0,[r4,#0]            ;591
000170  68c0              LDR      r0,[r0,#0xc]          ;591
000172  f8ad0000          STRH     r0,[sp,#0]            ;591
                  |L9.374|
000176  6860              LDR      r0,[r4,#4]            ;594
000178  4540              CMP      r0,r8                 ;594
00017a  d10a              BNE      |L9.402|
00017c  68a0              LDR      r0,[r4,#8]            ;594
00017e  4548              CMP      r0,r9                 ;594
000180  d002              BEQ      |L9.392|
000182  f5b06f80          CMP      r0,#0x400             ;594
000186  d104              BNE      |L9.402|
                  |L9.392|
000188  6820              LDR      r0,[r4,#0]            ;597
00018a  6801              LDR      r1,[r0,#0]            ;597
00018c  f0210140          BIC      r1,r1,#0x40           ;597
000190  6001              STR      r1,[r0,#0]            ;597
                  |L9.402|
000192  f8846051          STRB     r6,[r4,#0x51]         ;600
000196  6820              LDR      r0,[r4,#0]            ;602
000198  6881              LDR      r1,[r0,#8]            ;602
00019a  6aa2              LDR      r2,[r4,#0x28]         ;604
00019c  f3c11100          UBFX     r1,r1,#4,#1           ;602
0001a0  42ba              CMP      r2,r7                 ;604
0001a2  d112              BNE      |L9.458|
0001a4  b189              CBZ      r1,|L9.458|
0001a6  f8141f52          LDRB     r1,[r4,#0x52]!        ;606
0001aa  f0410102          ORR      r1,r1,#2              ;606
0001ae  f804191f          STRB     r1,[r4],#-0x1f        ;606
0001b2  6801              LDR      r1,[r0,#0]            ;609
0001b4  f4215100          BIC      r1,r1,#0x2000         ;609
0001b8  6001              STR      r1,[r0,#0]            ;609
0001ba  f8540c33          LDR      r0,[r4,#-0x33]        ;609
0001be  6801              LDR      r1,[r0,#0]            ;609
0001c0  f4415100          ORR      r1,r1,#0x2000         ;609
0001c4  6001              STR      r1,[r0,#0]            ;609
0001c6  7765              STRB     r5,[r4,#0x1d]         ;612
0001c8  e765              B        |L9.150|
                  |L9.458|
0001ca  f8845050          STRB     r5,[r4,#0x50]         ;618
0001ce  2000              MOVS     r0,#0                 ;620
0001d0  e762              B        |L9.152|
                  |L9.466|
0001d2  2002              MOVS     r0,#2                 ;624
0001d4  e760              B        |L9.152|
;;;627    
                          ENDP


                          AREA ||i.HAL_SPI_Receive_DMA||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Receive_DMA PROC
;;;1181     */
;;;1182   HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000000  b570              PUSH     {r4-r6,lr}
;;;1183   {
000002  4604              MOV      r4,r0
;;;1184     if(hspi->State == HAL_SPI_STATE_READY)
000004  f8900051          LDRB     r0,[r0,#0x51]
000008  2801              CMP      r0,#1
00000a  d15d              BNE      |L10.200|
;;;1185     {
;;;1186       if((pData == NULL) || (Size == 0))
00000c  b1d1              CBZ      r1,|L10.68|
00000e  b1ca              CBZ      r2,|L10.68|
;;;1187       {
;;;1188         return  HAL_ERROR;
;;;1189       }
;;;1190   
;;;1191       /* Process Locked */
;;;1192       __HAL_LOCK(hspi);
000010  f8940050          LDRB     r0,[r4,#0x50]
000014  2801              CMP      r0,#1
000016  d057              BEQ      |L10.200|
000018  2001              MOVS     r0,#1
00001a  f8840050          STRB     r0,[r4,#0x50]
;;;1193   
;;;1194       /* Configure communication */
;;;1195       hspi->State       = HAL_SPI_STATE_BUSY_RX;
00001e  2022              MOVS     r0,#0x22
000020  f8840051          STRB     r0,[r4,#0x51]
;;;1196       hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
000024  2500              MOVS     r5,#0
000026  f8845052          STRB     r5,[r4,#0x52]
;;;1197   
;;;1198       hspi->pRxBuffPtr  = pData;
;;;1199       hspi->RxXferSize  = Size;
00002a  63a1              STR      r1,[r4,#0x38]
00002c  87a2              STRH     r2,[r4,#0x3c]
;;;1200       hspi->RxXferCount = Size;
00002e  87e2              STRH     r2,[r4,#0x3e]
;;;1201   
;;;1202       /*Init field not used in handle to zero */
;;;1203       hspi->RxISR = 0;
;;;1204       hspi->TxISR = 0;
000030  64a5              STR      r5,[r4,#0x48]
;;;1205       hspi->TxXferSize   = 0;
000032  64e5              STR      r5,[r4,#0x4c]
000034  86a5              STRH     r5,[r4,#0x34]
;;;1206       hspi->TxXferCount  = 0;
000036  86e5              STRH     r5,[r4,#0x36]
;;;1207   
;;;1208       /* Configure communication direction : 1Line */
;;;1209       if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
000038  68a0              LDR      r0,[r4,#8]
00003a  f5b04f00          CMP      r0,#0x8000
00003e  d003              BEQ      |L10.72|
;;;1210       {
;;;1211          __HAL_SPI_1LINE_RX(hspi);
;;;1212       }
;;;1213       else if((hspi->Init.Direction == SPI_DIRECTION_2LINES)&&(hspi->Init.Mode == SPI_MODE_MASTER))
000040  b140              CBZ      r0,|L10.84|
000042  e00b              B        |L10.92|
                  |L10.68|
000044  2001              MOVS     r0,#1                 ;1188
;;;1214       {
;;;1215          /* Process Unlocked */
;;;1216          __HAL_UNLOCK(hspi);
;;;1217   
;;;1218          /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;1219          return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
;;;1220       }
;;;1221   
;;;1222       /* Reset CRC Calculation */
;;;1223       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
;;;1224       {
;;;1225         __HAL_SPI_RESET_CRC(hspi);
;;;1226       }
;;;1227   
;;;1228       /* Set the SPI Rx DMA transfer complete callback */
;;;1229       hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
;;;1230   
;;;1231       /* Set the DMA error callback */
;;;1232       hspi->hdmarx->XferErrorCallback = SPI_DMAError;
;;;1233   
;;;1234       /* Enable the Rx DMA Stream */
;;;1235       HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
;;;1236   
;;;1237       /* Enable Rx DMA Request */  
;;;1238       hspi->Instance->CR2 |= SPI_CR2_RXDMAEN;  
;;;1239   
;;;1240       /* Process Unlocked */
;;;1241       __HAL_UNLOCK(hspi);
;;;1242   
;;;1243       /* Check if the SPI is already enabled */ 
;;;1244       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1245       {
;;;1246         /* Enable SPI peripheral */
;;;1247         __HAL_SPI_ENABLE(hspi);
;;;1248       }
;;;1249   
;;;1250       return HAL_OK;
;;;1251     }
;;;1252     else
;;;1253     {
;;;1254       return HAL_BUSY;
;;;1255     }
;;;1256   }
000046  bd70              POP      {r4-r6,pc}
                  |L10.72|
000048  6820              LDR      r0,[r4,#0]            ;1211
00004a  6801              LDR      r1,[r0,#0]            ;1211
00004c  f4214180          BIC      r1,r1,#0x4000         ;1211
000050  6001              STR      r1,[r0,#0]            ;1211
000052  e003              B        |L10.92|
                  |L10.84|
000054  6860              LDR      r0,[r4,#4]            ;1213
000056  f5b07f82          CMP      r0,#0x104             ;1213
00005a  d004              BEQ      |L10.102|
                  |L10.92|
00005c  6aa0              LDR      r0,[r4,#0x28]         ;1223
00005e  f5b05f00          CMP      r0,#0x2000            ;1223
000062  d009              BEQ      |L10.120|
000064  e012              B        |L10.140|
                  |L10.102|
000066  f8845050          STRB     r5,[r4,#0x50]         ;1216
00006a  4620              MOV      r0,r4                 ;1219
00006c  e8bd4070          POP      {r4-r6,lr}            ;1219
000070  4613              MOV      r3,r2                 ;1219
000072  460a              MOV      r2,r1                 ;1219
000074  f7ffbffe          B.W      HAL_SPI_TransmitReceive_DMA
                  |L10.120|
000078  6820              LDR      r0,[r4,#0]            ;1225
00007a  6801              LDR      r1,[r0,#0]            ;1225
00007c  f4215100          BIC      r1,r1,#0x2000         ;1225
000080  6001              STR      r1,[r0,#0]            ;1225
000082  6820              LDR      r0,[r4,#0]            ;1225
000084  6801              LDR      r1,[r0,#0]            ;1225
000086  f4415100          ORR      r1,r1,#0x2000         ;1225
00008a  6001              STR      r1,[r0,#0]            ;1225
                  |L10.140|
00008c  6c61              LDR      r1,[r4,#0x44]         ;1229
00008e  480f              LDR      r0,|L10.204|
000090  63c8              STR      r0,[r1,#0x3c]         ;1232
000092  6c61              LDR      r1,[r4,#0x44]         ;1232
000094  480e              LDR      r0,|L10.208|
000096  6488              STR      r0,[r1,#0x48]         ;1235
000098  6821              LDR      r1,[r4,#0]            ;1235
00009a  8fe3              LDRH     r3,[r4,#0x3e]         ;1235
00009c  310c              ADDS     r1,r1,#0xc            ;1235
00009e  6ba2              LDR      r2,[r4,#0x38]         ;1235
0000a0  6c60              LDR      r0,[r4,#0x44]         ;1235
0000a2  f7fffffe          BL       HAL_DMA_Start_IT
0000a6  6820              LDR      r0,[r4,#0]            ;1238
0000a8  6841              LDR      r1,[r0,#4]            ;1238
0000aa  f0410101          ORR      r1,r1,#1              ;1238
0000ae  6041              STR      r1,[r0,#4]            ;1238
0000b0  f8845050          STRB     r5,[r4,#0x50]         ;1241
0000b4  6820              LDR      r0,[r4,#0]            ;1244
0000b6  6801              LDR      r1,[r0,#0]            ;1244
0000b8  0649              LSLS     r1,r1,#25             ;1244
0000ba  d403              BMI      |L10.196|
0000bc  6801              LDR      r1,[r0,#0]            ;1247
0000be  f0410140          ORR      r1,r1,#0x40           ;1247
0000c2  6001              STR      r1,[r0,#0]            ;1247
                  |L10.196|
0000c4  2000              MOVS     r0,#0                 ;1250
0000c6  bd70              POP      {r4-r6,pc}
                  |L10.200|
0000c8  2002              MOVS     r0,#2                 ;1254
0000ca  bd70              POP      {r4-r6,pc}
;;;1257   
                          ENDP

                  |L10.204|
                          DCD      SPI_DMAReceiveCplt
                  |L10.208|
                          DCD      SPI_DMAError

                          AREA ||i.HAL_SPI_Receive_IT||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Receive_IT PROC
;;;952      */
;;;953    HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000000  b410              PUSH     {r4}
;;;954    {
000002  4613              MOV      r3,r2
;;;955      if(hspi->State == HAL_SPI_STATE_READY)
000004  f8902051          LDRB     r2,[r0,#0x51]
000008  2a01              CMP      r2,#1
00000a  d14f              BNE      |L11.172|
;;;956      {
;;;957        if((pData == NULL) || (Size == 0)) 
00000c  b1d9              CBZ      r1,|L11.70|
00000e  b1d3              CBZ      r3,|L11.70|
;;;958        {
;;;959          return  HAL_ERROR;
;;;960        }
;;;961    
;;;962        /* Process Locked */
;;;963        __HAL_LOCK(hspi);
000010  f8902050          LDRB     r2,[r0,#0x50]
000014  2a01              CMP      r2,#1
000016  d049              BEQ      |L11.172|
000018  2201              MOVS     r2,#1
00001a  f8802050          STRB     r2,[r0,#0x50]
;;;964    
;;;965        /* Configure communication */
;;;966        hspi->State        = HAL_SPI_STATE_BUSY_RX;
00001e  2222              MOVS     r2,#0x22
000020  f8802051          STRB     r2,[r0,#0x51]
;;;967        hspi->ErrorCode    = HAL_SPI_ERROR_NONE;
000024  2200              MOVS     r2,#0
000026  f8802052          STRB     r2,[r0,#0x52]
;;;968    
;;;969        hspi->RxISR = &SPI_RxISR;
00002a  4c21              LDR      r4,|L11.176|
;;;970        hspi->pRxBuffPtr   = pData;
;;;971        hspi->RxXferSize   = Size;
00002c  6484              STR      r4,[r0,#0x48]
00002e  6381              STR      r1,[r0,#0x38]
000030  8783              STRH     r3,[r0,#0x3c]
;;;972        hspi->RxXferCount  = Size ; 
000032  87c3              STRH     r3,[r0,#0x3e]
;;;973    
;;;974       /*Init field not used in handle to zero */
;;;975        hspi->TxISR = 0;
;;;976        hspi->TxXferSize   = 0;
000034  64c2              STR      r2,[r0,#0x4c]
000036  8682              STRH     r2,[r0,#0x34]
;;;977        hspi->TxXferCount  = 0;
000038  86c2              STRH     r2,[r0,#0x36]
;;;978    
;;;979        /* Configure communication direction : 1Line */
;;;980        if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
00003a  6884              LDR      r4,[r0,#8]
00003c  f5b44f00          CMP      r4,#0x8000
000040  d004              BEQ      |L11.76|
;;;981        {
;;;982           __HAL_SPI_1LINE_RX(hspi);
;;;983        }
;;;984        else if((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
000042  b14c              CBZ      r4,|L11.88|
000044  e00c              B        |L11.96|
                  |L11.70|
000046  2001              MOVS     r0,#1                 ;959
                  |L11.72|
;;;985        {
;;;986           /* Process Unlocked */
;;;987           __HAL_UNLOCK(hspi);
;;;988    
;;;989           /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;990           return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
;;;991        }
;;;992    
;;;993        /* Reset CRC Calculation */
;;;994        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
;;;995        {
;;;996          __HAL_SPI_RESET_CRC(hspi);
;;;997        }
;;;998    
;;;999        /* Enable TXE and ERR interrupt */
;;;1000       __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
;;;1001   
;;;1002       /* Process Unlocked */
;;;1003       __HAL_UNLOCK(hspi);
;;;1004   
;;;1005       /* Note : The SPI must be enabled after unlocking current process 
;;;1006                 to avoid the risk of SPI interrupt handle execution before current
;;;1007                 process unlock */
;;;1008   
;;;1009           /* Check if the SPI is already enabled */ 
;;;1010       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1011       {
;;;1012         /* Enable SPI peripheral */
;;;1013         __HAL_SPI_ENABLE(hspi);
;;;1014       }
;;;1015   
;;;1016       return HAL_OK;
;;;1017     }
;;;1018     else
;;;1019     {
;;;1020       return HAL_BUSY; 
;;;1021     }
;;;1022   }
000048  bc10              POP      {r4}
00004a  4770              BX       lr
                  |L11.76|
00004c  6801              LDR      r1,[r0,#0]            ;982
00004e  680b              LDR      r3,[r1,#0]            ;982
000050  f4234380          BIC      r3,r3,#0x4000         ;982
000054  600b              STR      r3,[r1,#0]            ;982
000056  e003              B        |L11.96|
                  |L11.88|
000058  6844              LDR      r4,[r0,#4]            ;984
00005a  f5b47f82          CMP      r4,#0x104             ;984
00005e  d004              BEQ      |L11.106|
                  |L11.96|
000060  6a81              LDR      r1,[r0,#0x28]         ;994
000062  f5b15f00          CMP      r1,#0x2000            ;994
000066  d006              BEQ      |L11.118|
000068  e00f              B        |L11.138|
                  |L11.106|
00006a  f8802050          STRB     r2,[r0,#0x50]         ;987
00006e  bc10              POP      {r4}                  ;990
000070  460a              MOV      r2,r1                 ;990
000072  f7ffbffe          B.W      HAL_SPI_TransmitReceive_IT
                  |L11.118|
000076  6801              LDR      r1,[r0,#0]            ;996
000078  680b              LDR      r3,[r1,#0]            ;996
00007a  f4235300          BIC      r3,r3,#0x2000         ;996
00007e  600b              STR      r3,[r1,#0]            ;996
000080  6801              LDR      r1,[r0,#0]            ;996
000082  680b              LDR      r3,[r1,#0]            ;996
000084  f4435300          ORR      r3,r3,#0x2000         ;996
000088  600b              STR      r3,[r1,#0]            ;996
                  |L11.138|
00008a  6801              LDR      r1,[r0,#0]            ;1000
00008c  684b              LDR      r3,[r1,#4]            ;1000
00008e  f0430360          ORR      r3,r3,#0x60           ;1000
000092  604b              STR      r3,[r1,#4]            ;1000
000094  f8802050          STRB     r2,[r0,#0x50]         ;1003
000098  6800              LDR      r0,[r0,#0]            ;1010
00009a  6801              LDR      r1,[r0,#0]            ;1010
00009c  0649              LSLS     r1,r1,#25             ;1010
00009e  d403              BMI      |L11.168|
0000a0  6801              LDR      r1,[r0,#0]            ;1013
0000a2  f0410140          ORR      r1,r1,#0x40           ;1013
0000a6  6001              STR      r1,[r0,#0]            ;1013
                  |L11.168|
0000a8  2000              MOVS     r0,#0                 ;1016
0000aa  e7cd              B        |L11.72|
                  |L11.172|
0000ac  2002              MOVS     r0,#2                 ;1020
0000ae  e7cb              B        |L11.72|
;;;1023   
                          ENDP

                  |L11.176|
                          DCD      SPI_RxISR

                          AREA ||i.HAL_SPI_RxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_RxCpltCallback PROC
;;;1446     */
;;;1447   __weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1448   {
;;;1449     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1450               the HAL_SPI_RxCpltCallback() could be implenetd in the user file
;;;1451      */
;;;1452   }
;;;1453   
                          ENDP


                          AREA ||i.HAL_SPI_Transmit||, CODE, READONLY, ALIGN=1

                  HAL_SPI_Transmit PROC
;;;324      */
;;;325    HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;326    {
000004  4604              MOV      r4,r0
;;;327    
;;;328      if(hspi->State == HAL_SPI_STATE_READY)
000006  f8900051          LDRB     r0,[r0,#0x51]
00000a  4698              MOV      r8,r3                 ;326
00000c  2801              CMP      r0,#1
00000e  d17d              BNE      |L13.268|
;;;329      {
;;;330        if((pData == NULL ) || (Size == 0)) 
000010  b339              CBZ      r1,|L13.98|
000012  b332              CBZ      r2,|L13.98|
;;;331        {
;;;332          return  HAL_ERROR;
;;;333        }
;;;334    
;;;335        /* Check the parameters */
;;;336        assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
;;;337    
;;;338        /* Process Locked */
;;;339        __HAL_LOCK(hspi);
000014  f8940050          LDRB     r0,[r4,#0x50]
000018  2801              CMP      r0,#1
00001a  d077              BEQ      |L13.268|
00001c  2601              MOVS     r6,#1
00001e  f8846050          STRB     r6,[r4,#0x50]
;;;340    
;;;341        /* Configure communication */
;;;342        hspi->State = HAL_SPI_STATE_BUSY_TX;
000022  2012              MOVS     r0,#0x12
000024  f8840051          STRB     r0,[r4,#0x51]
;;;343        hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
000028  2500              MOVS     r5,#0
00002a  f8845052          STRB     r5,[r4,#0x52]
;;;344    
;;;345        hspi->pTxBuffPtr = pData;
;;;346        hspi->TxXferSize = Size;
00002e  6321              STR      r1,[r4,#0x30]
000030  86a2              STRH     r2,[r4,#0x34]
;;;347        hspi->TxXferCount = Size;
000032  86e2              STRH     r2,[r4,#0x36]
;;;348    
;;;349        /*Init field not used in handle to zero */
;;;350        hspi->TxISR = 0;
;;;351        hspi->RxISR = 0;
000034  64e5              STR      r5,[r4,#0x4c]
;;;352        hspi->RxXferSize   = 0;
000036  64a5              STR      r5,[r4,#0x48]
000038  87a5              STRH     r5,[r4,#0x3c]
;;;353        hspi->RxXferCount  = 0;
00003a  87e5              STRH     r5,[r4,#0x3e]
;;;354    
;;;355        /* Reset CRC Calculation */
;;;356        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
00003c  6aa0              LDR      r0,[r4,#0x28]
00003e  0377              LSLS     r7,r6,#13
000040  42b8              CMP      r0,r7
000042  d109              BNE      |L13.88|
;;;357        {
;;;358          __HAL_SPI_RESET_CRC(hspi);
000044  6820              LDR      r0,[r4,#0]
000046  6801              LDR      r1,[r0,#0]
000048  f4215100          BIC      r1,r1,#0x2000
00004c  6001              STR      r1,[r0,#0]
00004e  6820              LDR      r0,[r4,#0]
000050  6801              LDR      r1,[r0,#0]
000052  f4415100          ORR      r1,r1,#0x2000
000056  6001              STR      r1,[r0,#0]
                  |L13.88|
;;;359        }
;;;360    
;;;361        if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
000058  68a0              LDR      r0,[r4,#8]
00005a  f5b04f00          CMP      r0,#0x8000
00005e  d003              BEQ      |L13.104|
000060  e007              B        |L13.114|
                  |L13.98|
000062  2001              MOVS     r0,#1                 ;332
                  |L13.100|
;;;362        {
;;;363          /* Configure communication direction : 1Line */
;;;364          __HAL_SPI_1LINE_TX(hspi);
;;;365        }
;;;366    
;;;367        /* Check if the SPI is already enabled */ 
;;;368        if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;369        {
;;;370          /* Enable SPI peripheral */
;;;371          __HAL_SPI_ENABLE(hspi);
;;;372        }
;;;373    
;;;374        /* Transmit data in 8 Bit mode */
;;;375        if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;376        {
;;;377    
;;;378          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;379          hspi->TxXferCount--;
;;;380    
;;;381          while(hspi->TxXferCount > 0)
;;;382          {
;;;383            /* Wait until TXE flag is set to send data */
;;;384            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;385            { 
;;;386              return HAL_TIMEOUT;
;;;387            }
;;;388            hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;389            hspi->TxXferCount--;
;;;390          }
;;;391          /* Enable CRC Transmission */
;;;392          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED) 
;;;393          {
;;;394            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;395          }
;;;396        }
;;;397        /* Transmit data in 16 Bit mode */
;;;398        else
;;;399        {
;;;400          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;401          hspi->pTxBuffPtr+=2;
;;;402          hspi->TxXferCount--;
;;;403    
;;;404          while(hspi->TxXferCount > 0)
;;;405          {
;;;406            /* Wait until TXE flag is set to send data */
;;;407            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;408            { 
;;;409              return HAL_TIMEOUT;
;;;410            }
;;;411            hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;412            hspi->pTxBuffPtr+=2;
;;;413            hspi->TxXferCount--;
;;;414          }
;;;415          /* Enable CRC Transmission */
;;;416          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED) 
;;;417          {
;;;418            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;419          }
;;;420        }
;;;421    
;;;422        /* Wait until TXE flag is set to send data */
;;;423        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;424        {
;;;425          hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
;;;426          return HAL_TIMEOUT;
;;;427        }
;;;428    
;;;429        /* Wait until Busy flag is reset before disabling SPI */
;;;430        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
;;;431        { 
;;;432          hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
;;;433          return HAL_TIMEOUT;
;;;434        }
;;;435     
;;;436        /* Clear OVERUN flag in 2 Lines communication mode because received is not read */
;;;437        if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
;;;438        {
;;;439          __HAL_SPI_CLEAR_OVRFLAG(hspi);
;;;440        }
;;;441    
;;;442        hspi->State = HAL_SPI_STATE_READY; 
;;;443    
;;;444        /* Process Unlocked */
;;;445        __HAL_UNLOCK(hspi);
;;;446    
;;;447        return HAL_OK;
;;;448      }
;;;449      else
;;;450      {
;;;451        return HAL_BUSY;
;;;452      }
;;;453    }
000064  e8bd81f0          POP      {r4-r8,pc}
                  |L13.104|
000068  6820              LDR      r0,[r4,#0]            ;364
00006a  6801              LDR      r1,[r0,#0]            ;364
00006c  f4414180          ORR      r1,r1,#0x4000         ;364
000070  6001              STR      r1,[r0,#0]            ;364
                  |L13.114|
000072  6820              LDR      r0,[r4,#0]            ;368
000074  6801              LDR      r1,[r0,#0]            ;368
000076  0649              LSLS     r1,r1,#25             ;368
000078  d403              BMI      |L13.130|
00007a  6801              LDR      r1,[r0,#0]            ;371
00007c  f0410140          ORR      r1,r1,#0x40           ;371
000080  6001              STR      r1,[r0,#0]            ;371
                  |L13.130|
000082  68e0              LDR      r0,[r4,#0xc]          ;375
000084  b9a0              CBNZ     r0,|L13.176|
                  |L13.134|
000086  6b20              LDR      r0,[r4,#0x30]         ;378
000088  1c41              ADDS     r1,r0,#1              ;378
00008a  6321              STR      r1,[r4,#0x30]         ;378
00008c  6821              LDR      r1,[r4,#0]            ;378
00008e  7800              LDRB     r0,[r0,#0]            ;378
000090  60c8              STR      r0,[r1,#0xc]          ;378
000092  8ee0              LDRH     r0,[r4,#0x36]         ;379
000094  1e40              SUBS     r0,r0,#1              ;379
000096  86e0              STRH     r0,[r4,#0x36]         ;379
000098  0400              LSLS     r0,r0,#16             ;381
00009a  0c00              LSRS     r0,r0,#16             ;381
00009c  d01f              BEQ      |L13.222|
00009e  4643              MOV      r3,r8                 ;384
0000a0  2200              MOVS     r2,#0                 ;384
0000a2  2102              MOVS     r1,#2                 ;384
0000a4  4620              MOV      r0,r4                 ;384
0000a6  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0000aa  2800              CMP      r0,#0                 ;384
0000ac  d0eb              BEQ      |L13.134|
0000ae  e014              B        |L13.218|
                  |L13.176|
0000b0  6b20              LDR      r0,[r4,#0x30]         ;400
0000b2  6821              LDR      r1,[r4,#0]            ;400
0000b4  8800              LDRH     r0,[r0,#0]            ;400
0000b6  60c8              STR      r0,[r1,#0xc]          ;400
0000b8  6b20              LDR      r0,[r4,#0x30]         ;401
0000ba  1c80              ADDS     r0,r0,#2              ;401
0000bc  6320              STR      r0,[r4,#0x30]         ;402
0000be  8ee0              LDRH     r0,[r4,#0x36]         ;402
0000c0  1e40              SUBS     r0,r0,#1              ;402
0000c2  86e0              STRH     r0,[r4,#0x36]         ;402
0000c4  0400              LSLS     r0,r0,#16             ;404
0000c6  0c00              LSRS     r0,r0,#16             ;404
0000c8  d009              BEQ      |L13.222|
0000ca  4643              MOV      r3,r8                 ;407
0000cc  2200              MOVS     r2,#0                 ;407
0000ce  2102              MOVS     r1,#2                 ;407
0000d0  4620              MOV      r0,r4                 ;407
0000d2  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0000d6  2800              CMP      r0,#0                 ;407
0000d8  d0ea              BEQ      |L13.176|
                  |L13.218|
0000da  2003              MOVS     r0,#3                 ;409
0000dc  e7c2              B        |L13.100|
                  |L13.222|
0000de  6aa0              LDR      r0,[r4,#0x28]         ;416
0000e0  42b8              CMP      r0,r7                 ;416
0000e2  d104              BNE      |L13.238|
0000e4  6820              LDR      r0,[r4,#0]            ;418
0000e6  6801              LDR      r1,[r0,#0]            ;418
0000e8  f4415180          ORR      r1,r1,#0x1000         ;418
0000ec  6001              STR      r1,[r0,#0]            ;418
                  |L13.238|
0000ee  4643              MOV      r3,r8                 ;423
0000f0  2200              MOVS     r2,#0                 ;423
0000f2  2102              MOVS     r1,#2                 ;423
0000f4  4620              MOV      r0,r4                 ;423
0000f6  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0000fa  b930              CBNZ     r0,|L13.266|
0000fc  4643              MOV      r3,r8                 ;430
0000fe  2201              MOVS     r2,#1                 ;430
000100  2180              MOVS     r1,#0x80              ;430
000102  4620              MOV      r0,r4                 ;430
000104  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000108  b138              CBZ      r0,|L13.282|
                  |L13.266|
00010a  e000              B        |L13.270|
                  |L13.268|
00010c  e010              B        |L13.304|
                  |L13.270|
00010e  f8140f52          LDRB     r0,[r4,#0x52]!        ;432
000112  f0400020          ORR      r0,r0,#0x20           ;432
000116  7020              STRB     r0,[r4,#0]            ;432
000118  e7df              B        |L13.218|
                  |L13.282|
00011a  68a0              LDR      r0,[r4,#8]            ;437
00011c  b910              CBNZ     r0,|L13.292|
00011e  6820              LDR      r0,[r4,#0]            ;439
000120  68c1              LDR      r1,[r0,#0xc]          ;439
000122  6880              LDR      r0,[r0,#8]            ;439
                  |L13.292|
000124  f8846051          STRB     r6,[r4,#0x51]         ;442
000128  f8845050          STRB     r5,[r4,#0x50]         ;445
00012c  2000              MOVS     r0,#0                 ;447
00012e  e799              B        |L13.100|
                  |L13.304|
000130  2002              MOVS     r0,#2                 ;451
000132  e797              B        |L13.100|
;;;454    
                          ENDP


                          AREA ||i.HAL_SPI_TransmitReceive||, CODE, READONLY, ALIGN=1

                  HAL_SPI_TransmitReceive PROC
;;;636      */
;;;637    HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;638    {
000004  4604              MOV      r4,r0
;;;639      __IO uint16_t tmpreg;
;;;640      uint32_t tmp = 0;
;;;641      
;;;642      tmp = hspi->State; 
000006  f8900051          LDRB     r0,[r0,#0x51]
00000a  f8dd8020          LDR      r8,[sp,#0x20]
;;;643      if((tmp == HAL_SPI_STATE_READY) || (tmp == HAL_SPI_STATE_BUSY_RX))
00000e  2801              CMP      r0,#1
000010  d001              BEQ      |L14.22|
000012  2822              CMP      r0,#0x22
000014  d17e              BNE      |L14.276|
                  |L14.22|
;;;644      {
;;;645        if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
000016  b169              CBZ      r1,|L14.52|
000018  b162              CBZ      r2,|L14.52|
00001a  b15b              CBZ      r3,|L14.52|
;;;646        {
;;;647          return  HAL_ERROR;
;;;648        }
;;;649    
;;;650        /* Check the parameters */
;;;651        assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
;;;652    
;;;653        /* Process Locked */
;;;654        __HAL_LOCK(hspi);
00001c  f8940050          LDRB     r0,[r4,#0x50]
000020  2801              CMP      r0,#1
000022  d077              BEQ      |L14.276|
000024  2601              MOVS     r6,#1
000026  f8846050          STRB     r6,[r4,#0x50]
;;;655     
;;;656        /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
;;;657        if(hspi->State == HAL_SPI_STATE_READY)
00002a  f8940051          LDRB     r0,[r4,#0x51]
00002e  2801              CMP      r0,#1
000030  d003              BEQ      |L14.58|
000032  e005              B        |L14.64|
                  |L14.52|
000034  2001              MOVS     r0,#1                 ;647
                  |L14.54|
;;;658        {
;;;659          hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
;;;660        }
;;;661    
;;;662         /* Configure communication */   
;;;663        hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;664    
;;;665        hspi->pRxBuffPtr  = pRxData;
;;;666        hspi->RxXferSize  = Size;
;;;667        hspi->RxXferCount = Size;  
;;;668        
;;;669        hspi->pTxBuffPtr  = pTxData;
;;;670        hspi->TxXferSize  = Size; 
;;;671        hspi->TxXferCount = Size;
;;;672    
;;;673        /*Init field not used in handle to zero */
;;;674        hspi->RxISR = 0;
;;;675        hspi->TxISR = 0;
;;;676    
;;;677        /* Reset CRC Calculation */
;;;678        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
;;;679        {
;;;680          __HAL_SPI_RESET_CRC(hspi);
;;;681        }
;;;682    
;;;683        /* Check if the SPI is already enabled */ 
;;;684        if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;685        {
;;;686          /* Enable SPI peripheral */
;;;687          __HAL_SPI_ENABLE(hspi);
;;;688        }
;;;689    
;;;690        /* Transmit and Receive data in 16 Bit mode */
;;;691        if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
;;;692        {
;;;693          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;694          hspi->pTxBuffPtr+=2;
;;;695          hspi->TxXferCount--;
;;;696    
;;;697          if(hspi->TxXferCount == 0)
;;;698          {
;;;699            /* Enable CRC Transmission */
;;;700            if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
;;;701            {
;;;702              hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;703            }
;;;704    
;;;705            /* Wait until RXNE flag is set */
;;;706            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;707            { 
;;;708              return HAL_TIMEOUT;
;;;709            }
;;;710    
;;;711            *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;712            hspi->pRxBuffPtr+=2;
;;;713            hspi->RxXferCount--;
;;;714          }
;;;715          else
;;;716          {
;;;717            while(hspi->TxXferCount > 0)
;;;718            {
;;;719              /* Wait until TXE flag is set to send data */
;;;720              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;721              { 
;;;722                return HAL_TIMEOUT;
;;;723              }
;;;724    
;;;725              hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;726              hspi->pTxBuffPtr+=2;
;;;727              hspi->TxXferCount--;
;;;728    
;;;729              /* Enable CRC Transmission */
;;;730              if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
;;;731              {
;;;732                hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;733              }
;;;734    
;;;735              /* Wait until RXNE flag is set */
;;;736              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;737              { 
;;;738                return HAL_TIMEOUT;
;;;739              }
;;;740    
;;;741              *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;742              hspi->pRxBuffPtr+=2;
;;;743              hspi->RxXferCount--;
;;;744            }
;;;745    
;;;746            /* Wait until RXNE flag is set */
;;;747            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;748            {
;;;749              return HAL_TIMEOUT;
;;;750            }
;;;751    
;;;752            *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;753            hspi->pRxBuffPtr+=2;
;;;754            hspi->RxXferCount--;
;;;755          }
;;;756        }
;;;757        /* Transmit and Receive data in 8 Bit mode */
;;;758        else
;;;759        {
;;;760    
;;;761          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;762          hspi->TxXferCount--;
;;;763    
;;;764          if(hspi->TxXferCount == 0)
;;;765          {
;;;766            /* Enable CRC Transmission */
;;;767            if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
;;;768            {
;;;769              hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;770            }
;;;771    
;;;772            /* Wait until RXNE flag is set */
;;;773            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;774            {
;;;775              return HAL_TIMEOUT;
;;;776            }
;;;777    
;;;778            (*hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;779            hspi->RxXferCount--;
;;;780          }
;;;781          else
;;;782          {
;;;783            while(hspi->TxXferCount > 0)
;;;784            {
;;;785              /* Wait until TXE flag is set to send data */
;;;786              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;787              {
;;;788                return HAL_TIMEOUT;
;;;789              }
;;;790    
;;;791              hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;792              hspi->TxXferCount--;
;;;793    
;;;794              /* Enable CRC Transmission */
;;;795              if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
;;;796              {
;;;797                hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;798              }
;;;799    
;;;800              /* Wait until RXNE flag is set */
;;;801              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;802              {
;;;803                return HAL_TIMEOUT;
;;;804              }
;;;805    
;;;806              (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;807              hspi->RxXferCount--;
;;;808            }
;;;809    
;;;810            /* Wait until RXNE flag is set */
;;;811            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;812            {
;;;813              return HAL_TIMEOUT;
;;;814            }
;;;815    
;;;816            (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;817            hspi->RxXferCount--;
;;;818          }
;;;819        }
;;;820    
;;;821        /* Read CRC from DR to close CRC calculation process */
;;;822        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
;;;823        {
;;;824          /* Wait until RXNE flag is set */
;;;825          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;826          {
;;;827            hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
;;;828            return HAL_TIMEOUT;
;;;829          }
;;;830          /* Read CRC */
;;;831          tmpreg = hspi->Instance->DR;
;;;832        }
;;;833    
;;;834        /* Wait until Busy flag is reset before disabling SPI */
;;;835        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
;;;836        {
;;;837          hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
;;;838          return HAL_TIMEOUT;
;;;839        }
;;;840        
;;;841        hspi->State = HAL_SPI_STATE_READY;
;;;842    
;;;843        tmp = __HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR);
;;;844        /* Check if CRC error occurred */
;;;845        if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED) && (tmp != RESET))
;;;846        {
;;;847          hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
;;;848    
;;;849          /* Reset CRC Calculation */
;;;850          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
;;;851          {
;;;852            __HAL_SPI_RESET_CRC(hspi);
;;;853          }
;;;854    
;;;855          /* Process Unlocked */
;;;856          __HAL_UNLOCK(hspi);
;;;857          
;;;858          return HAL_ERROR; 
;;;859        }
;;;860    
;;;861        /* Process Unlocked */
;;;862        __HAL_UNLOCK(hspi);
;;;863    
;;;864        return HAL_OK;
;;;865      }
;;;866      else
;;;867      {
;;;868        return HAL_BUSY;
;;;869      }
;;;870    }
000036  e8bd83f8          POP      {r3-r9,pc}
                  |L14.58|
00003a  2032              MOVS     r0,#0x32              ;659
00003c  f8840051          STRB     r0,[r4,#0x51]         ;659
                  |L14.64|
000040  2500              MOVS     r5,#0                 ;663
000042  f8845052          STRB     r5,[r4,#0x52]         ;663
000046  63a2              STR      r2,[r4,#0x38]         ;666
000048  87a3              STRH     r3,[r4,#0x3c]         ;666
00004a  87e3              STRH     r3,[r4,#0x3e]         ;667
00004c  6321              STR      r1,[r4,#0x30]         ;670
00004e  86a3              STRH     r3,[r4,#0x34]         ;670
000050  86e3              STRH     r3,[r4,#0x36]         ;671
000052  64a5              STR      r5,[r4,#0x48]         ;675
000054  64e5              STR      r5,[r4,#0x4c]         ;678
000056  6aa0              LDR      r0,[r4,#0x28]         ;678
000058  f44f5700          MOV      r7,#0x2000            ;678
00005c  42b8              CMP      r0,r7                 ;678
00005e  d109              BNE      |L14.116|
000060  6820              LDR      r0,[r4,#0]            ;680
000062  6801              LDR      r1,[r0,#0]            ;680
000064  f4215100          BIC      r1,r1,#0x2000         ;680
000068  6001              STR      r1,[r0,#0]            ;680
00006a  6820              LDR      r0,[r4,#0]            ;680
00006c  6801              LDR      r1,[r0,#0]            ;680
00006e  f4415100          ORR      r1,r1,#0x2000         ;680
000072  6001              STR      r1,[r0,#0]            ;680
                  |L14.116|
000074  6820              LDR      r0,[r4,#0]            ;684
000076  6801              LDR      r1,[r0,#0]            ;684
000078  0649              LSLS     r1,r1,#25             ;684
00007a  d403              BMI      |L14.132|
00007c  6801              LDR      r1,[r0,#0]            ;687
00007e  f0410140          ORR      r1,r1,#0x40           ;687
000082  6001              STR      r1,[r0,#0]            ;687
                  |L14.132|
000084  68e0              LDR      r0,[r4,#0xc]          ;691
000086  f5b06f00          CMP      r0,#0x800             ;691
00008a  6b20              LDR      r0,[r4,#0x30]         ;691
00008c  d00b              BEQ      |L14.166|
00008e  1c41              ADDS     r1,r0,#1              ;761
000090  6321              STR      r1,[r4,#0x30]         ;761
000092  6821              LDR      r1,[r4,#0]            ;761
000094  7800              LDRB     r0,[r0,#0]            ;761
000096  60c8              STR      r0,[r1,#0xc]          ;761
000098  8ee0              LDRH     r0,[r4,#0x36]         ;762
00009a  1e40              SUBS     r0,r0,#1              ;762
00009c  0400              LSLS     r0,r0,#16             ;762
00009e  0c00              LSRS     r0,r0,#16             ;762
0000a0  86e0              STRH     r0,[r4,#0x36]         ;762
0000a2  d059              BEQ      |L14.344|
0000a4  e06c              B        |L14.384|
                  |L14.166|
0000a6  6821              LDR      r1,[r4,#0]            ;693
0000a8  8800              LDRH     r0,[r0,#0]            ;693
0000aa  60c8              STR      r0,[r1,#0xc]          ;693
0000ac  6b20              LDR      r0,[r4,#0x30]         ;694
0000ae  1c80              ADDS     r0,r0,#2              ;694
0000b0  6320              STR      r0,[r4,#0x30]         ;695
0000b2  8ee0              LDRH     r0,[r4,#0x36]         ;695
0000b4  1e40              SUBS     r0,r0,#1              ;695
0000b6  0400              LSLS     r0,r0,#16             ;695
0000b8  0c00              LSRS     r0,r0,#16             ;695
0000ba  86e0              STRH     r0,[r4,#0x36]         ;695
0000bc  d110              BNE      |L14.224|
0000be  6aa0              LDR      r0,[r4,#0x28]         ;700
0000c0  42b8              CMP      r0,r7                 ;700
0000c2  d104              BNE      |L14.206|
0000c4  6820              LDR      r0,[r4,#0]            ;702
0000c6  6801              LDR      r1,[r0,#0]            ;702
0000c8  f4415180          ORR      r1,r1,#0x1000         ;702
0000cc  6001              STR      r1,[r0,#0]            ;702
                  |L14.206|
0000ce  4643              MOV      r3,r8                 ;706
0000d0  2200              MOVS     r2,#0                 ;706
0000d2  2101              MOVS     r1,#1                 ;706
0000d4  4620              MOV      r0,r4                 ;706
0000d6  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0000da  2800              CMP      r0,#0                 ;706
0000dc  d164              BNE      |L14.424|
0000de  e033              B        |L14.328|
                  |L14.224|
0000e0  4643              MOV      r3,r8                 ;720
0000e2  2200              MOVS     r2,#0                 ;720
0000e4  2102              MOVS     r1,#2                 ;720
0000e6  4620              MOV      r0,r4                 ;720
0000e8  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0000ec  2800              CMP      r0,#0                 ;720
0000ee  d17e              BNE      |L14.494|
0000f0  6b20              LDR      r0,[r4,#0x30]         ;725
0000f2  6821              LDR      r1,[r4,#0]            ;725
0000f4  8800              LDRH     r0,[r0,#0]            ;725
0000f6  60c8              STR      r0,[r1,#0xc]          ;725
0000f8  6b20              LDR      r0,[r4,#0x30]         ;726
0000fa  1c80              ADDS     r0,r0,#2              ;726
0000fc  6320              STR      r0,[r4,#0x30]         ;727
0000fe  8ee0              LDRH     r0,[r4,#0x36]         ;727
000100  1e40              SUBS     r0,r0,#1              ;727
000102  0400              LSLS     r0,r0,#16             ;727
000104  0c00              LSRS     r0,r0,#16             ;727
000106  86e0              STRH     r0,[r4,#0x36]         ;727
000108  d109              BNE      |L14.286|
00010a  6aa0              LDR      r0,[r4,#0x28]         ;730
00010c  42b8              CMP      r0,r7                 ;730
00010e  d106              BNE      |L14.286|
000110  6820              LDR      r0,[r4,#0]            ;732
000112  e000              B        |L14.278|
                  |L14.276|
000114  e0b6              B        |L14.644|
                  |L14.278|
000116  6801              LDR      r1,[r0,#0]            ;732
000118  f4415180          ORR      r1,r1,#0x1000         ;732
00011c  6001              STR      r1,[r0,#0]            ;732
                  |L14.286|
00011e  4643              MOV      r3,r8                 ;736
000120  2200              MOVS     r2,#0                 ;736
000122  2101              MOVS     r1,#1                 ;736
000124  4620              MOV      r0,r4                 ;736
000126  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00012a  bbe8              CBNZ     r0,|L14.424|
00012c  6820              LDR      r0,[r4,#0]            ;741
00012e  68c0              LDR      r0,[r0,#0xc]          ;741
000130  6ba1              LDR      r1,[r4,#0x38]         ;741
000132  8008              STRH     r0,[r1,#0]            ;741
000134  6ba0              LDR      r0,[r4,#0x38]         ;742
000136  1c80              ADDS     r0,r0,#2              ;742
000138  63a0              STR      r0,[r4,#0x38]         ;743
00013a  8fe0              LDRH     r0,[r4,#0x3e]         ;743
00013c  1e40              SUBS     r0,r0,#1              ;743
00013e  87e0              STRH     r0,[r4,#0x3e]         ;743
000140  8ee0              LDRH     r0,[r4,#0x36]         ;717
000142  2800              CMP      r0,#0                 ;743
000144  d1cc              BNE      |L14.224|
000146  e7c2              B        |L14.206|
                  |L14.328|
000148  6820              LDR      r0,[r4,#0]            ;752
00014a  68c0              LDR      r0,[r0,#0xc]          ;752
00014c  6ba1              LDR      r1,[r4,#0x38]         ;752
00014e  8008              STRH     r0,[r1,#0]            ;752
000150  6ba0              LDR      r0,[r4,#0x38]         ;753
000152  1c80              ADDS     r0,r0,#2              ;753
000154  63a0              STR      r0,[r4,#0x38]         ;754
000156  e052              B        |L14.510|
                  |L14.344|
000158  6aa0              LDR      r0,[r4,#0x28]         ;767
00015a  42b8              CMP      r0,r7                 ;767
00015c  d104              BNE      |L14.360|
00015e  6820              LDR      r0,[r4,#0]            ;769
000160  6801              LDR      r1,[r0,#0]            ;769
000162  f4415180          ORR      r1,r1,#0x1000         ;769
000166  6001              STR      r1,[r0,#0]            ;769
                  |L14.360|
000168  4643              MOV      r3,r8                 ;773
00016a  2200              MOVS     r2,#0                 ;773
00016c  2101              MOVS     r1,#1                 ;773
00016e  4620              MOV      r0,r4                 ;773
000170  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000174  b9c0              CBNZ     r0,|L14.424|
000176  6820              LDR      r0,[r4,#0]            ;778
000178  68c0              LDR      r0,[r0,#0xc]          ;778
00017a  6ba1              LDR      r1,[r4,#0x38]         ;778
00017c  7008              STRB     r0,[r1,#0]            ;778
00017e  e03e              B        |L14.510|
                  |L14.384|
000180  4643              MOV      r3,r8                 ;786
000182  2200              MOVS     r2,#0                 ;786
000184  2102              MOVS     r1,#2                 ;786
000186  4620              MOV      r0,r4                 ;786
000188  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00018c  b960              CBNZ     r0,|L14.424|
00018e  6b20              LDR      r0,[r4,#0x30]         ;791
000190  1c41              ADDS     r1,r0,#1              ;791
000192  6321              STR      r1,[r4,#0x30]         ;791
000194  6821              LDR      r1,[r4,#0]            ;791
000196  7800              LDRB     r0,[r0,#0]            ;791
000198  60c8              STR      r0,[r1,#0xc]          ;791
00019a  8ee0              LDRH     r0,[r4,#0x36]         ;792
00019c  1e40              SUBS     r0,r0,#1              ;792
00019e  0400              LSLS     r0,r0,#16             ;792
0001a0  0c00              LSRS     r0,r0,#16             ;792
0001a2  86e0              STRH     r0,[r4,#0x36]         ;792
0001a4  d109              BNE      |L14.442|
0001a6  e000              B        |L14.426|
                  |L14.424|
0001a8  e021              B        |L14.494|
                  |L14.426|
0001aa  6aa0              LDR      r0,[r4,#0x28]         ;795
0001ac  42b8              CMP      r0,r7                 ;795
0001ae  d104              BNE      |L14.442|
0001b0  6820              LDR      r0,[r4,#0]            ;797
0001b2  6801              LDR      r1,[r0,#0]            ;797
0001b4  f4415180          ORR      r1,r1,#0x1000         ;797
0001b8  6001              STR      r1,[r0,#0]            ;797
                  |L14.442|
0001ba  4643              MOV      r3,r8                 ;801
0001bc  2200              MOVS     r2,#0                 ;801
0001be  2101              MOVS     r1,#1                 ;801
0001c0  4620              MOV      r0,r4                 ;801
0001c2  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0001c6  b990              CBNZ     r0,|L14.494|
0001c8  6820              LDR      r0,[r4,#0]            ;806
0001ca  68c2              LDR      r2,[r0,#0xc]          ;806
0001cc  6ba0              LDR      r0,[r4,#0x38]         ;806
0001ce  1c41              ADDS     r1,r0,#1              ;806
0001d0  63a1              STR      r1,[r4,#0x38]         ;806
0001d2  7002              STRB     r2,[r0,#0]            ;806
0001d4  8fe0              LDRH     r0,[r4,#0x3e]         ;807
0001d6  1e40              SUBS     r0,r0,#1              ;807
0001d8  87e0              STRH     r0,[r4,#0x3e]         ;807
0001da  8ee0              LDRH     r0,[r4,#0x36]         ;783
0001dc  2800              CMP      r0,#0                 ;807
0001de  d1cf              BNE      |L14.384|
0001e0  4643              MOV      r3,r8                 ;811
0001e2  2200              MOVS     r2,#0                 ;811
0001e4  2101              MOVS     r1,#1                 ;811
0001e6  4620              MOV      r0,r4                 ;811
0001e8  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0001ec  b108              CBZ      r0,|L14.498|
                  |L14.494|
0001ee  2003              MOVS     r0,#3                 ;813
0001f0  e721              B        |L14.54|
                  |L14.498|
0001f2  6820              LDR      r0,[r4,#0]            ;816
0001f4  68c1              LDR      r1,[r0,#0xc]          ;816
0001f6  6ba0              LDR      r0,[r4,#0x38]         ;816
0001f8  1c42              ADDS     r2,r0,#1              ;816
0001fa  63a2              STR      r2,[r4,#0x38]         ;816
0001fc  7001              STRB     r1,[r0,#0]            ;816
                  |L14.510|
0001fe  8fe0              LDRH     r0,[r4,#0x3e]         ;779
000200  1e40              SUBS     r0,r0,#1              ;779
000202  87e0              STRH     r0,[r4,#0x3e]         ;779
000204  6aa0              LDR      r0,[r4,#0x28]         ;822
000206  42b8              CMP      r0,r7                 ;822
000208  d10f              BNE      |L14.554|
00020a  4643              MOV      r3,r8                 ;825
00020c  2200              MOVS     r2,#0                 ;825
00020e  2101              MOVS     r1,#1                 ;825
000210  4620              MOV      r0,r4                 ;825
000212  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000216  b120              CBZ      r0,|L14.546|
000218  f8140f52          LDRB     r0,[r4,#0x52]!        ;827
00021c  f0400002          ORR      r0,r0,#2              ;827
000220  e00e              B        |L14.576|
                  |L14.546|
000222  6820              LDR      r0,[r4,#0]            ;831
000224  68c0              LDR      r0,[r0,#0xc]          ;831
000226  f8ad0000          STRH     r0,[sp,#0]            ;831
                  |L14.554|
00022a  4643              MOV      r3,r8                 ;835
00022c  2201              MOVS     r2,#1                 ;835
00022e  2180              MOVS     r1,#0x80              ;835
000230  4620              MOV      r0,r4                 ;835
000232  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000236  b128              CBZ      r0,|L14.580|
000238  f8140f52          LDRB     r0,[r4,#0x52]!        ;837
00023c  f0400020          ORR      r0,r0,#0x20           ;837
                  |L14.576|
000240  7020              STRB     r0,[r4,#0]            ;837
000242  e7d4              B        |L14.494|
                  |L14.580|
000244  f8846051          STRB     r6,[r4,#0x51]         ;841
000248  6820              LDR      r0,[r4,#0]            ;843
00024a  6881              LDR      r1,[r0,#8]            ;843
00024c  6aa2              LDR      r2,[r4,#0x28]         ;845
00024e  f3c11100          UBFX     r1,r1,#4,#1           ;843
000252  42ba              CMP      r2,r7                 ;845
000254  d112              BNE      |L14.636|
000256  b189              CBZ      r1,|L14.636|
000258  f8141f52          LDRB     r1,[r4,#0x52]!        ;847
00025c  f0410102          ORR      r1,r1,#2              ;847
000260  f804191f          STRB     r1,[r4],#-0x1f        ;847
000264  6801              LDR      r1,[r0,#0]            ;852
000266  f4215100          BIC      r1,r1,#0x2000         ;852
00026a  6001              STR      r1,[r0,#0]            ;852
00026c  f8540c33          LDR      r0,[r4,#-0x33]        ;852
000270  6801              LDR      r1,[r0,#0]            ;852
000272  f4415100          ORR      r1,r1,#0x2000         ;852
000276  6001              STR      r1,[r0,#0]            ;852
000278  7765              STRB     r5,[r4,#0x1d]         ;856
00027a  e6db              B        |L14.52|
                  |L14.636|
00027c  f8845050          STRB     r5,[r4,#0x50]         ;862
000280  2000              MOVS     r0,#0                 ;864
000282  e6d8              B        |L14.54|
                  |L14.644|
000284  2002              MOVS     r0,#2                 ;868
000286  e6d6              B        |L14.54|
;;;871    
                          ENDP


                          AREA ||i.HAL_SPI_TransmitReceive_DMA||, CODE, READONLY, ALIGN=2

                  HAL_SPI_TransmitReceive_DMA PROC
;;;1266     */
;;;1267   HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
000000  b570              PUSH     {r4-r6,lr}
;;;1268   {
000002  4604              MOV      r4,r0
;;;1269     uint32_t tmpstate = 0;
;;;1270     tmpstate = hspi->State;
000004  f8900051          LDRB     r0,[r0,#0x51]
;;;1271     if((tmpstate == HAL_SPI_STATE_READY) || (tmpstate == HAL_SPI_STATE_BUSY_RX))
000008  2801              CMP      r0,#1
00000a  d001              BEQ      |L15.16|
00000c  2822              CMP      r0,#0x22
00000e  d160              BNE      |L15.210|
                  |L15.16|
;;;1272     {
;;;1273       if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
000010  b169              CBZ      r1,|L15.46|
000012  b162              CBZ      r2,|L15.46|
000014  b15b              CBZ      r3,|L15.46|
;;;1274       {
;;;1275         return  HAL_ERROR;
;;;1276       }
;;;1277   
;;;1278       /* Check the parameters */
;;;1279       assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
;;;1280       
;;;1281       /* Process locked */
;;;1282       __HAL_LOCK(hspi);
000016  f8940050          LDRB     r0,[r4,#0x50]
00001a  2801              CMP      r0,#1
00001c  d059              BEQ      |L15.210|
00001e  2001              MOVS     r0,#1
000020  f8840050          STRB     r0,[r4,#0x50]
;;;1283   
;;;1284       /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
;;;1285       if(hspi->State == HAL_SPI_STATE_READY)
000024  f8940051          LDRB     r0,[r4,#0x51]
000028  2801              CMP      r0,#1
00002a  d002              BEQ      |L15.50|
00002c  e004              B        |L15.56|
                  |L15.46|
00002e  2001              MOVS     r0,#1                 ;1275
;;;1286       {
;;;1287         hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
;;;1288       }
;;;1289   
;;;1290       /* Configure communication */
;;;1291       hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;1292   
;;;1293       hspi->pTxBuffPtr  = (uint8_t*)pTxData;
;;;1294       hspi->TxXferSize  = Size;
;;;1295       hspi->TxXferCount = Size;
;;;1296   
;;;1297       hspi->pRxBuffPtr  = (uint8_t*)pRxData;
;;;1298       hspi->RxXferSize  = Size;
;;;1299       hspi->RxXferCount = Size;
;;;1300   
;;;1301       /*Init field not used in handle to zero */
;;;1302       hspi->RxISR = 0;
;;;1303       hspi->TxISR = 0;
;;;1304   
;;;1305       /* Reset CRC Calculation */
;;;1306       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
;;;1307       {
;;;1308         __HAL_SPI_RESET_CRC(hspi);
;;;1309       }
;;;1310   
;;;1311       /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
;;;1312       if(hspi->State == HAL_SPI_STATE_BUSY_RX)
;;;1313       {
;;;1314         hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
;;;1315       }
;;;1316       else
;;;1317       {
;;;1318         hspi->hdmarx->XferCpltCallback = SPI_DMATransmitReceiveCplt;
;;;1319       }
;;;1320   
;;;1321       /* Set the DMA error callback */
;;;1322       hspi->hdmarx->XferErrorCallback = SPI_DMAError;
;;;1323   
;;;1324       /* Enable the Rx DMA Stream */
;;;1325       HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
;;;1326   
;;;1327       /* Enable Rx DMA Request */  
;;;1328       hspi->Instance->CR2 |= SPI_CR2_RXDMAEN;
;;;1329   
;;;1330       /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
;;;1331       is performed in DMA reception complete callback  */
;;;1332       hspi->hdmatx->XferCpltCallback = NULL;
;;;1333   
;;;1334       /* Set the DMA error callback */
;;;1335       hspi->hdmatx->XferErrorCallback = SPI_DMAError;
;;;1336   
;;;1337       /* Enable the Tx DMA Stream */
;;;1338       HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
;;;1339   
;;;1340       /* Enable Tx DMA Request */  
;;;1341       hspi->Instance->CR2 |= SPI_CR2_TXDMAEN;
;;;1342   
;;;1343       /* Process Unlocked */
;;;1344       __HAL_UNLOCK(hspi);
;;;1345   
;;;1346           /* Check if the SPI is already enabled */ 
;;;1347       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1348       {
;;;1349         /* Enable SPI peripheral */
;;;1350         __HAL_SPI_ENABLE(hspi);
;;;1351       }
;;;1352   
;;;1353       return HAL_OK;
;;;1354     }
;;;1355     else
;;;1356     {
;;;1357       return HAL_BUSY;
;;;1358     }
;;;1359   }
000030  bd70              POP      {r4-r6,pc}
                  |L15.50|
000032  2032              MOVS     r0,#0x32              ;1287
000034  f8840051          STRB     r0,[r4,#0x51]         ;1287
                  |L15.56|
000038  2500              MOVS     r5,#0                 ;1291
00003a  f8845052          STRB     r5,[r4,#0x52]         ;1291
00003e  6321              STR      r1,[r4,#0x30]         ;1294
000040  86a3              STRH     r3,[r4,#0x34]         ;1294
000042  86e3              STRH     r3,[r4,#0x36]         ;1295
000044  63a2              STR      r2,[r4,#0x38]         ;1298
000046  87a3              STRH     r3,[r4,#0x3c]         ;1298
000048  87e3              STRH     r3,[r4,#0x3e]         ;1299
00004a  64a5              STR      r5,[r4,#0x48]         ;1303
00004c  64e5              STR      r5,[r4,#0x4c]         ;1306
00004e  6aa0              LDR      r0,[r4,#0x28]         ;1306
000050  f5b05f00          CMP      r0,#0x2000            ;1306
000054  d109              BNE      |L15.106|
000056  6820              LDR      r0,[r4,#0]            ;1308
000058  6801              LDR      r1,[r0,#0]            ;1308
00005a  f4215100          BIC      r1,r1,#0x2000         ;1308
00005e  6001              STR      r1,[r0,#0]            ;1308
000060  6820              LDR      r0,[r4,#0]            ;1308
000062  6801              LDR      r1,[r0,#0]            ;1308
000064  f4415100          ORR      r1,r1,#0x2000         ;1308
000068  6001              STR      r1,[r0,#0]            ;1308
                  |L15.106|
00006a  f8940051          LDRB     r0,[r4,#0x51]         ;1312
00006e  2822              CMP      r0,#0x22              ;1312
000070  d02d              BEQ      |L15.206|
000072  4819              LDR      r0,|L15.216|
                  |L15.116|
000074  6c61              LDR      r1,[r4,#0x44]         ;1318
000076  4e19              LDR      r6,|L15.220|
000078  63c8              STR      r0,[r1,#0x3c]         ;1322
00007a  6c60              LDR      r0,[r4,#0x44]         ;1322
00007c  6486              STR      r6,[r0,#0x48]         ;1325
00007e  6821              LDR      r1,[r4,#0]            ;1325
000080  8fe3              LDRH     r3,[r4,#0x3e]         ;1325
000082  310c              ADDS     r1,r1,#0xc            ;1325
000084  6ba2              LDR      r2,[r4,#0x38]         ;1325
000086  6c60              LDR      r0,[r4,#0x44]         ;1325
000088  f7fffffe          BL       HAL_DMA_Start_IT
00008c  6820              LDR      r0,[r4,#0]            ;1328
00008e  6841              LDR      r1,[r0,#4]            ;1328
000090  f0410101          ORR      r1,r1,#1              ;1328
000094  6041              STR      r1,[r0,#4]            ;1328
000096  6c20              LDR      r0,[r4,#0x40]         ;1332
000098  63c5              STR      r5,[r0,#0x3c]         ;1335
00009a  6c20              LDR      r0,[r4,#0x40]         ;1335
00009c  6486              STR      r6,[r0,#0x48]         ;1338
00009e  6822              LDR      r2,[r4,#0]            ;1338
0000a0  8ee3              LDRH     r3,[r4,#0x36]         ;1338
0000a2  320c              ADDS     r2,r2,#0xc            ;1338
0000a4  6b21              LDR      r1,[r4,#0x30]         ;1338
0000a6  6c20              LDR      r0,[r4,#0x40]         ;1338
0000a8  f7fffffe          BL       HAL_DMA_Start_IT
0000ac  6820              LDR      r0,[r4,#0]            ;1341
0000ae  6841              LDR      r1,[r0,#4]            ;1341
0000b0  f0410102          ORR      r1,r1,#2              ;1341
0000b4  6041              STR      r1,[r0,#4]            ;1341
0000b6  f8845050          STRB     r5,[r4,#0x50]         ;1344
0000ba  6820              LDR      r0,[r4,#0]            ;1347
0000bc  6801              LDR      r1,[r0,#0]            ;1347
0000be  0649              LSLS     r1,r1,#25             ;1347
0000c0  d403              BMI      |L15.202|
0000c2  6801              LDR      r1,[r0,#0]            ;1350
0000c4  f0410140          ORR      r1,r1,#0x40           ;1350
0000c8  6001              STR      r1,[r0,#0]            ;1350
                  |L15.202|
0000ca  2000              MOVS     r0,#0                 ;1353
0000cc  bd70              POP      {r4-r6,pc}
                  |L15.206|
0000ce  4804              LDR      r0,|L15.224|
0000d0  e7d0              B        |L15.116|
                  |L15.210|
0000d2  2002              MOVS     r0,#2                 ;1357
0000d4  bd70              POP      {r4-r6,pc}
;;;1360   
                          ENDP

0000d6  0000              DCW      0x0000
                  |L15.216|
                          DCD      SPI_DMATransmitReceiveCplt
                  |L15.220|
                          DCD      SPI_DMAError
                  |L15.224|
                          DCD      SPI_DMAReceiveCplt

                          AREA ||i.HAL_SPI_TransmitReceive_IT||, CODE, READONLY, ALIGN=2

                  HAL_SPI_TransmitReceive_IT PROC
;;;1031     */
;;;1032   HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
000000  b530              PUSH     {r4,r5,lr}
;;;1033   {
;;;1034    uint32_t tmp = 0;
;;;1035   
;;;1036    tmp = hspi->State;
000002  f8904051          LDRB     r4,[r0,#0x51]
;;;1037    if((tmp == HAL_SPI_STATE_READY) || (tmp == HAL_SPI_STATE_BUSY_RX))
000006  2c01              CMP      r4,#1
000008  d001              BEQ      |L16.14|
00000a  2c22              CMP      r4,#0x22
00000c  d13f              BNE      |L16.142|
                  |L16.14|
;;;1038     {
;;;1039       if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0)) 
00000e  b169              CBZ      r1,|L16.44|
000010  b162              CBZ      r2,|L16.44|
000012  b15b              CBZ      r3,|L16.44|
;;;1040       {
;;;1041         return  HAL_ERROR;
;;;1042       }
;;;1043   
;;;1044       /* Check the parameters */
;;;1045       assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
;;;1046   
;;;1047       /* Process locked */
;;;1048       __HAL_LOCK(hspi);
000014  f8904050          LDRB     r4,[r0,#0x50]
000018  2c01              CMP      r4,#1
00001a  d038              BEQ      |L16.142|
00001c  2401              MOVS     r4,#1
00001e  f8804050          STRB     r4,[r0,#0x50]
;;;1049   
;;;1050       /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
;;;1051       if(hspi->State == HAL_SPI_STATE_READY)
000022  f8904051          LDRB     r4,[r0,#0x51]
000026  2c01              CMP      r4,#1
000028  d002              BEQ      |L16.48|
00002a  e004              B        |L16.54|
                  |L16.44|
00002c  2001              MOVS     r0,#1                 ;1041
;;;1052       {
;;;1053         hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
;;;1054       }
;;;1055   
;;;1056       /* Configure communication */
;;;1057       hspi->ErrorCode    = HAL_SPI_ERROR_NONE;
;;;1058   
;;;1059       hspi->TxISR = &SPI_TxISR;
;;;1060       hspi->pTxBuffPtr   = pTxData;
;;;1061       hspi->TxXferSize   = Size;
;;;1062       hspi->TxXferCount  = Size;
;;;1063   
;;;1064       hspi->RxISR = &SPI_2LinesRxISR;
;;;1065       hspi->pRxBuffPtr   = pRxData;
;;;1066       hspi->RxXferSize   = Size;
;;;1067       hspi->RxXferCount  = Size;
;;;1068   
;;;1069       /* Reset CRC Calculation */
;;;1070       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
;;;1071       {
;;;1072         __HAL_SPI_RESET_CRC(hspi);
;;;1073       }
;;;1074   
;;;1075       /* Enable TXE, RXNE and ERR interrupt */
;;;1076       __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
;;;1077   
;;;1078       /* Process Unlocked */
;;;1079       __HAL_UNLOCK(hspi);
;;;1080   
;;;1081       /* Check if the SPI is already enabled */ 
;;;1082       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1083       {
;;;1084         /* Enable SPI peripheral */
;;;1085         __HAL_SPI_ENABLE(hspi);
;;;1086       }
;;;1087   
;;;1088       return HAL_OK;
;;;1089     }
;;;1090     else
;;;1091     {
;;;1092       return HAL_BUSY; 
;;;1093     }
;;;1094   }
00002e  bd30              POP      {r4,r5,pc}
                  |L16.48|
000030  2432              MOVS     r4,#0x32              ;1053
000032  f8804051          STRB     r4,[r0,#0x51]         ;1053
                  |L16.54|
000036  2400              MOVS     r4,#0                 ;1057
000038  f8804052          STRB     r4,[r0,#0x52]         ;1057
00003c  4d15              LDR      r5,|L16.148|
00003e  64c5              STR      r5,[r0,#0x4c]         ;1061
000040  6301              STR      r1,[r0,#0x30]         ;1061
000042  8683              STRH     r3,[r0,#0x34]         ;1061
000044  86c3              STRH     r3,[r0,#0x36]         ;1062
000046  4914              LDR      r1,|L16.152|
000048  6382              STR      r2,[r0,#0x38]         ;1066
00004a  6481              STR      r1,[r0,#0x48]         ;1066
00004c  8783              STRH     r3,[r0,#0x3c]         ;1066
00004e  87c3              STRH     r3,[r0,#0x3e]         ;1067
000050  6a81              LDR      r1,[r0,#0x28]         ;1070
000052  f5b15f00          CMP      r1,#0x2000            ;1070
000056  d109              BNE      |L16.108|
000058  6801              LDR      r1,[r0,#0]            ;1072
00005a  680a              LDR      r2,[r1,#0]            ;1072
00005c  f4225200          BIC      r2,r2,#0x2000         ;1072
000060  600a              STR      r2,[r1,#0]            ;1072
000062  6801              LDR      r1,[r0,#0]            ;1072
000064  680a              LDR      r2,[r1,#0]            ;1072
000066  f4425200          ORR      r2,r2,#0x2000         ;1072
00006a  600a              STR      r2,[r1,#0]            ;1072
                  |L16.108|
00006c  6801              LDR      r1,[r0,#0]            ;1076
00006e  684a              LDR      r2,[r1,#4]            ;1076
000070  f04202e0          ORR      r2,r2,#0xe0           ;1076
000074  604a              STR      r2,[r1,#4]            ;1076
000076  f8804050          STRB     r4,[r0,#0x50]         ;1079
00007a  6800              LDR      r0,[r0,#0]            ;1082
00007c  6801              LDR      r1,[r0,#0]            ;1082
00007e  0649              LSLS     r1,r1,#25             ;1082
000080  d403              BMI      |L16.138|
000082  6801              LDR      r1,[r0,#0]            ;1085
000084  f0410140          ORR      r1,r1,#0x40           ;1085
000088  6001              STR      r1,[r0,#0]            ;1085
                  |L16.138|
00008a  2000              MOVS     r0,#0                 ;1088
00008c  bd30              POP      {r4,r5,pc}
                  |L16.142|
00008e  2002              MOVS     r0,#2                 ;1092
000090  bd30              POP      {r4,r5,pc}
;;;1095   
                          ENDP

000092  0000              DCW      0x0000
                  |L16.148|
                          DCD      SPI_TxISR
                  |L16.152|
                          DCD      SPI_2LinesRxISR

                          AREA ||i.HAL_SPI_Transmit_DMA||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Transmit_DMA PROC
;;;1102     */
;;;1103   HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000000  b570              PUSH     {r4-r6,lr}
;;;1104   {
000002  4604              MOV      r4,r0
;;;1105     if(hspi->State == HAL_SPI_STATE_READY)
000004  f8900051          LDRB     r0,[r0,#0x51]
000008  2801              CMP      r0,#1
00000a  d14d              BNE      |L17.168|
;;;1106     {
;;;1107       if((pData == NULL) || (Size == 0))
00000c  b1c9              CBZ      r1,|L17.66|
00000e  b1c2              CBZ      r2,|L17.66|
;;;1108       {
;;;1109         return  HAL_ERROR;
;;;1110       }
;;;1111   
;;;1112       /* Check the parameters */
;;;1113       assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
;;;1114   
;;;1115       /* Process Locked */
;;;1116       __HAL_LOCK(hspi);
000010  f8940050          LDRB     r0,[r4,#0x50]
000014  2801              CMP      r0,#1
000016  d047              BEQ      |L17.168|
000018  2001              MOVS     r0,#1
00001a  f8840050          STRB     r0,[r4,#0x50]
;;;1117   
;;;1118       /* Configure communication */
;;;1119       hspi->State       = HAL_SPI_STATE_BUSY_TX;
00001e  2012              MOVS     r0,#0x12
000020  f8840051          STRB     r0,[r4,#0x51]
;;;1120       hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
000024  2500              MOVS     r5,#0
000026  f8845052          STRB     r5,[r4,#0x52]
;;;1121   
;;;1122       hspi->pTxBuffPtr  = pData;
;;;1123       hspi->TxXferSize  = Size;
00002a  6321              STR      r1,[r4,#0x30]
00002c  86a2              STRH     r2,[r4,#0x34]
;;;1124       hspi->TxXferCount = Size;
00002e  86e2              STRH     r2,[r4,#0x36]
;;;1125   
;;;1126       /*Init field not used in handle to zero */
;;;1127       hspi->TxISR = 0;
;;;1128       hspi->RxISR = 0;
000030  64e5              STR      r5,[r4,#0x4c]
;;;1129       hspi->RxXferSize   = 0;
000032  64a5              STR      r5,[r4,#0x48]
000034  87a5              STRH     r5,[r4,#0x3c]
;;;1130       hspi->RxXferCount  = 0;
000036  87e5              STRH     r5,[r4,#0x3e]
;;;1131   
;;;1132       /* Configure communication direction : 1Line */
;;;1133       if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
000038  68a0              LDR      r0,[r4,#8]
00003a  f5b04f00          CMP      r0,#0x8000
00003e  d002              BEQ      |L17.70|
000040  e006              B        |L17.80|
                  |L17.66|
000042  2001              MOVS     r0,#1                 ;1109
;;;1134       {
;;;1135         __HAL_SPI_1LINE_TX(hspi);
;;;1136       }
;;;1137   
;;;1138       /* Reset CRC Calculation */
;;;1139       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
;;;1140       {
;;;1141         __HAL_SPI_RESET_CRC(hspi);
;;;1142       }
;;;1143   
;;;1144       /* Set the SPI TxDMA transfer complete callback */
;;;1145       hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
;;;1146   
;;;1147       /* Set the DMA error callback */
;;;1148       hspi->hdmatx->XferErrorCallback = SPI_DMAError;
;;;1149   
;;;1150       /* Enable the Tx DMA Stream */
;;;1151       HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
;;;1152   
;;;1153       /* Enable Tx DMA Request */
;;;1154       hspi->Instance->CR2 |= SPI_CR2_TXDMAEN;
;;;1155   
;;;1156       /* Process Unlocked */
;;;1157       __HAL_UNLOCK(hspi);
;;;1158   
;;;1159       /* Check if the SPI is already enabled */ 
;;;1160       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1161       {
;;;1162         /* Enable SPI peripheral */
;;;1163         __HAL_SPI_ENABLE(hspi);
;;;1164       }
;;;1165   
;;;1166       return HAL_OK;
;;;1167     }
;;;1168     else
;;;1169     {
;;;1170       return HAL_BUSY;
;;;1171     }
;;;1172   }
000044  bd70              POP      {r4-r6,pc}
                  |L17.70|
000046  6820              LDR      r0,[r4,#0]            ;1135
000048  6801              LDR      r1,[r0,#0]            ;1135
00004a  f4414180          ORR      r1,r1,#0x4000         ;1135
00004e  6001              STR      r1,[r0,#0]            ;1135
                  |L17.80|
000050  6aa0              LDR      r0,[r4,#0x28]         ;1139
000052  f5b05f00          CMP      r0,#0x2000            ;1139
000056  d109              BNE      |L17.108|
000058  6820              LDR      r0,[r4,#0]            ;1141
00005a  6801              LDR      r1,[r0,#0]            ;1141
00005c  f4215100          BIC      r1,r1,#0x2000         ;1141
000060  6001              STR      r1,[r0,#0]            ;1141
000062  6820              LDR      r0,[r4,#0]            ;1141
000064  6801              LDR      r1,[r0,#0]            ;1141
000066  f4415100          ORR      r1,r1,#0x2000         ;1141
00006a  6001              STR      r1,[r0,#0]            ;1141
                  |L17.108|
00006c  6c21              LDR      r1,[r4,#0x40]         ;1145
00006e  480f              LDR      r0,|L17.172|
000070  63c8              STR      r0,[r1,#0x3c]         ;1148
000072  6c21              LDR      r1,[r4,#0x40]         ;1148
000074  480e              LDR      r0,|L17.176|
000076  6488              STR      r0,[r1,#0x48]         ;1151
000078  6822              LDR      r2,[r4,#0]            ;1151
00007a  8ee3              LDRH     r3,[r4,#0x36]         ;1151
00007c  320c              ADDS     r2,r2,#0xc            ;1151
00007e  6b21              LDR      r1,[r4,#0x30]         ;1151
000080  6c20              LDR      r0,[r4,#0x40]         ;1151
000082  f7fffffe          BL       HAL_DMA_Start_IT
000086  6820              LDR      r0,[r4,#0]            ;1154
000088  6841              LDR      r1,[r0,#4]            ;1154
00008a  f0410102          ORR      r1,r1,#2              ;1154
00008e  6041              STR      r1,[r0,#4]            ;1154
000090  f8845050          STRB     r5,[r4,#0x50]         ;1157
000094  6820              LDR      r0,[r4,#0]            ;1160
000096  6801              LDR      r1,[r0,#0]            ;1160
000098  0649              LSLS     r1,r1,#25             ;1160
00009a  d403              BMI      |L17.164|
00009c  6801              LDR      r1,[r0,#0]            ;1163
00009e  f0410140          ORR      r1,r1,#0x40           ;1163
0000a2  6001              STR      r1,[r0,#0]            ;1163
                  |L17.164|
0000a4  2000              MOVS     r0,#0                 ;1166
0000a6  bd70              POP      {r4-r6,pc}
                  |L17.168|
0000a8  2002              MOVS     r0,#2                 ;1170
0000aa  bd70              POP      {r4-r6,pc}
;;;1173   
                          ENDP

                  |L17.172|
                          DCD      SPI_DMATransmitCplt
                  |L17.176|
                          DCD      SPI_DMAError

                          AREA ||i.HAL_SPI_Transmit_IT||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Transmit_IT PROC
;;;878      */
;;;879    HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000000  b510              PUSH     {r4,lr}
;;;880    {
;;;881      if(hspi->State == HAL_SPI_STATE_READY)
000002  f8903051          LDRB     r3,[r0,#0x51]
000006  2b01              CMP      r3,#1
000008  d147              BNE      |L18.154|
;;;882      {
;;;883        if((pData == NULL) || (Size == 0))
00000a  b1d1              CBZ      r1,|L18.66|
00000c  b1ca              CBZ      r2,|L18.66|
;;;884        {
;;;885          return  HAL_ERROR;
;;;886        }
;;;887    
;;;888        /* Check the parameters */
;;;889        assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
;;;890    
;;;891        /* Process Locked */
;;;892        __HAL_LOCK(hspi);
00000e  f8903050          LDRB     r3,[r0,#0x50]
000012  2b01              CMP      r3,#1
000014  d041              BEQ      |L18.154|
000016  2301              MOVS     r3,#1
000018  f8803050          STRB     r3,[r0,#0x50]
;;;893    
;;;894        /* Configure communication */
;;;895        hspi->State        = HAL_SPI_STATE_BUSY_TX;
00001c  2312              MOVS     r3,#0x12
00001e  f8803051          STRB     r3,[r0,#0x51]
;;;896        hspi->ErrorCode    = HAL_SPI_ERROR_NONE;
000022  2300              MOVS     r3,#0
000024  f8803052          STRB     r3,[r0,#0x52]
;;;897    
;;;898        hspi->TxISR = &SPI_TxISR;
000028  4c1d              LDR      r4,|L18.160|
;;;899        hspi->pTxBuffPtr   = pData;
;;;900        hspi->TxXferSize   = Size;
00002a  64c4              STR      r4,[r0,#0x4c]
00002c  6301              STR      r1,[r0,#0x30]
00002e  8682              STRH     r2,[r0,#0x34]
;;;901        hspi->TxXferCount  = Size;
000030  86c2              STRH     r2,[r0,#0x36]
;;;902    
;;;903        /*Init field not used in handle to zero */
;;;904        hspi->RxISR = 0;
;;;905        hspi->RxXferSize   = 0;
000032  6483              STR      r3,[r0,#0x48]
000034  8783              STRH     r3,[r0,#0x3c]
;;;906        hspi->RxXferCount  = 0;
000036  87c3              STRH     r3,[r0,#0x3e]
;;;907    
;;;908        /* Configure communication direction : 1Line */
;;;909        if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
000038  6881              LDR      r1,[r0,#8]
00003a  f5b14f00          CMP      r1,#0x8000
00003e  d002              BEQ      |L18.70|
000040  e006              B        |L18.80|
                  |L18.66|
000042  2001              MOVS     r0,#1                 ;885
;;;910        {
;;;911          __HAL_SPI_1LINE_TX(hspi);
;;;912        }
;;;913    
;;;914        /* Reset CRC Calculation */
;;;915        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
;;;916        {
;;;917          __HAL_SPI_RESET_CRC(hspi);
;;;918        }
;;;919    
;;;920        if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
;;;921        {
;;;922          __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE));
;;;923        }else
;;;924        {
;;;925          /* Enable TXE and ERR interrupt */
;;;926          __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
;;;927        }
;;;928        /* Process Unlocked */
;;;929        __HAL_UNLOCK(hspi);
;;;930    
;;;931        /* Check if the SPI is already enabled */ 
;;;932        if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;933        {
;;;934          /* Enable SPI peripheral */
;;;935          __HAL_SPI_ENABLE(hspi);
;;;936        }
;;;937    
;;;938        return HAL_OK;
;;;939      }
;;;940      else
;;;941      {
;;;942        return HAL_BUSY;
;;;943      }
;;;944    }
000044  bd10              POP      {r4,pc}
                  |L18.70|
000046  6801              LDR      r1,[r0,#0]            ;911
000048  680a              LDR      r2,[r1,#0]            ;911
00004a  f4424280          ORR      r2,r2,#0x4000         ;911
00004e  600a              STR      r2,[r1,#0]            ;911
                  |L18.80|
000050  6a81              LDR      r1,[r0,#0x28]         ;915
000052  f5b15f00          CMP      r1,#0x2000            ;915
000056  d109              BNE      |L18.108|
000058  6801              LDR      r1,[r0,#0]            ;917
00005a  680a              LDR      r2,[r1,#0]            ;917
00005c  f4225200          BIC      r2,r2,#0x2000         ;917
000060  600a              STR      r2,[r1,#0]            ;917
000062  6801              LDR      r1,[r0,#0]            ;917
000064  680a              LDR      r2,[r1,#0]            ;917
000066  f4425200          ORR      r2,r2,#0x2000         ;917
00006a  600a              STR      r2,[r1,#0]            ;917
                  |L18.108|
00006c  6881              LDR      r1,[r0,#8]            ;920
00006e  2900              CMP      r1,#0                 ;920
000070  6801              LDR      r1,[r0,#0]            ;926
000072  684a              LDR      r2,[r1,#4]            ;926
000074  d00e              BEQ      |L18.148|
000076  f04202a0          ORR      r2,r2,#0xa0           ;926
                  |L18.122|
00007a  604a              STR      r2,[r1,#4]            ;926
00007c  f8803050          STRB     r3,[r0,#0x50]         ;929
000080  6800              LDR      r0,[r0,#0]            ;932
000082  6801              LDR      r1,[r0,#0]            ;932
000084  0649              LSLS     r1,r1,#25             ;932
000086  d403              BMI      |L18.144|
000088  6801              LDR      r1,[r0,#0]            ;935
00008a  f0410140          ORR      r1,r1,#0x40           ;935
00008e  6001              STR      r1,[r0,#0]            ;935
                  |L18.144|
000090  2000              MOVS     r0,#0                 ;938
000092  bd10              POP      {r4,pc}
                  |L18.148|
000094  f0420280          ORR      r2,r2,#0x80           ;922
000098  e7ef              B        |L18.122|
                  |L18.154|
00009a  2002              MOVS     r0,#2                 ;942
00009c  bd10              POP      {r4,pc}
;;;945    
                          ENDP

00009e  0000              DCW      0x0000
                  |L18.160|
                          DCD      SPI_TxISR

                          AREA ||i.HAL_SPI_TxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_TxCpltCallback PROC
;;;1434     */
;;;1435   __weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1436   {
;;;1437     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1438               the HAL_SPI_TxCpltCallback could be implenetd in the user file
;;;1439      */
;;;1440   }
;;;1441   
                          ENDP


                          AREA ||i.HAL_SPI_TxRxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_TxRxCpltCallback PROC
;;;1458     */
;;;1459   __weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1460   {
;;;1461     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1462               the HAL_SPI_TxRxCpltCallback() could be implenetd in the user file
;;;1463      */
;;;1464   }
;;;1465   
                          ENDP


                          AREA ||i.SPI_2LinesRxISR||, CODE, READONLY, ALIGN=1

                  SPI_2LinesRxISR PROC
;;;1695     */
;;;1696   static void SPI_2LinesRxISR(SPI_HandleTypeDef *hspi)
000000  6802              LDR      r2,[r0,#0]
;;;1697   {
;;;1698     /* Receive data in 8 Bit mode */
;;;1699     if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;1700     {
;;;1701       (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;1702     }
;;;1703     /* Receive data in 16 Bit mode */
;;;1704     else
;;;1705     {
;;;1706       *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
000002  68c3              LDR      r3,[r0,#0xc]
000004  6b81              LDR      r1,[r0,#0x38]
000006  68d2              LDR      r2,[r2,#0xc]
000008  b15b              CBZ      r3,|L21.34|
00000a  800a              STRH     r2,[r1,#0]
;;;1707       hspi->pRxBuffPtr+=2;
00000c  6b81              LDR      r1,[r0,#0x38]
00000e  1c89              ADDS     r1,r1,#2
000010  6381              STR      r1,[r0,#0x38]
                  |L21.18|
;;;1708     }
;;;1709     hspi->RxXferCount--;
000012  8fc1              LDRH     r1,[r0,#0x3e]
000014  1e49              SUBS     r1,r1,#1
000016  0409              LSLS     r1,r1,#16
000018  0c09              LSRS     r1,r1,#16
00001a  87c1              STRH     r1,[r0,#0x3e]
;;;1710   
;;;1711     if(hspi->RxXferCount==0)
00001c  d105              BNE      |L21.42|
;;;1712     {
;;;1713       SPI_RxCloseIRQHandler(hspi);
00001e  f7ffbffe          B.W      SPI_RxCloseIRQHandler
                  |L21.34|
000022  1c4b              ADDS     r3,r1,#1              ;1701
000024  6383              STR      r3,[r0,#0x38]         ;1701
000026  700a              STRB     r2,[r1,#0]            ;1701
000028  e7f3              B        |L21.18|
                  |L21.42|
;;;1714     }
;;;1715   }
00002a  4770              BX       lr
;;;1716   
                          ENDP


                          AREA ||i.SPI_DMAError||, CODE, READONLY, ALIGN=1

                  SPI_DMAError PROC
;;;1926     */
;;;1927   static void SPI_DMAError(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;1928   {
;;;1929     SPI_HandleTypeDef* hspi = (SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000002  6b80              LDR      r0,[r0,#0x38]
;;;1930     hspi->TxXferCount = 0;
000004  2100              MOVS     r1,#0
000006  86c1              STRH     r1,[r0,#0x36]
;;;1931     hspi->RxXferCount = 0;
000008  87c1              STRH     r1,[r0,#0x3e]
;;;1932     hspi->State= HAL_SPI_STATE_READY;
00000a  2101              MOVS     r1,#1
00000c  f8801051          STRB     r1,[r0,#0x51]
;;;1933     hspi->ErrorCode |= HAL_SPI_ERROR_DMA;
000010  f8901052          LDRB     r1,[r0,#0x52]
000014  f0410110          ORR      r1,r1,#0x10
000018  f8801052          STRB     r1,[r0,#0x52]
;;;1934     HAL_SPI_ErrorCallback(hspi);
00001c  f7fffffe          BL       HAL_SPI_ErrorCallback
;;;1935   }
000020  bd10              POP      {r4,pc}
;;;1936   
                          ENDP


                          AREA ||i.SPI_DMAReceiveCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMAReceiveCplt PROC
;;;1799     */
;;;1800   static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
000000  b538              PUSH     {r3-r5,lr}
;;;1801   {
;;;1802     __IO uint16_t tmpreg;
;;;1803   
;;;1804     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
;;;1805   
;;;1806     if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
000002  6b84              LDR      r4,[r0,#0x38]
000004  6860              LDR      r0,[r4,#4]
000006  f5b07f82          CMP      r0,#0x104
00000a  d10b              BNE      |L23.36|
00000c  68a0              LDR      r0,[r4,#8]
00000e  f5b04f00          CMP      r0,#0x8000
000012  d002              BEQ      |L23.26|
000014  f5b06f80          CMP      r0,#0x400
000018  d104              BNE      |L23.36|
                  |L23.26|
;;;1807     {
;;;1808       /* Disable SPI peripheral */
;;;1809       __HAL_SPI_DISABLE(hspi);
00001a  6820              LDR      r0,[r4,#0]
00001c  6801              LDR      r1,[r0,#0]
00001e  f0210140          BIC      r1,r1,#0x40
000022  6001              STR      r1,[r0,#0]
                  |L23.36|
;;;1810     }
;;;1811   
;;;1812     /* Disable Rx DMA Request */
;;;1813     hspi->Instance->CR2 &= (uint32_t)(~SPI_CR2_RXDMAEN);
000024  6820              LDR      r0,[r4,#0]
000026  6841              LDR      r1,[r0,#4]
000028  f0210101          BIC      r1,r1,#1
00002c  6041              STR      r1,[r0,#4]
;;;1814   
;;;1815     /* Reset CRC Calculation */
;;;1816     if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
00002e  6aa0              LDR      r0,[r4,#0x28]
000030  f5b05f00          CMP      r0,#0x2000
000034  d11d              BNE      |L23.114|
;;;1817     {
;;;1818       /* Wait until RXNE flag is set to send data */
;;;1819       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
000036  230a              MOVS     r3,#0xa
000038  2200              MOVS     r2,#0
00003a  2101              MOVS     r1,#1
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000042  b128              CBZ      r0,|L23.80|
;;;1820       {
;;;1821         hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
000044  f8940052          LDRB     r0,[r4,#0x52]
000048  f0400020          ORR      r0,r0,#0x20
00004c  f8840052          STRB     r0,[r4,#0x52]
                  |L23.80|
;;;1822       }
;;;1823   
;;;1824       /* Read CRC */
;;;1825       tmpreg = hspi->Instance->DR;
000050  6820              LDR      r0,[r4,#0]
000052  68c0              LDR      r0,[r0,#0xc]
000054  f8ad0000          STRH     r0,[sp,#0]
;;;1826   
;;;1827       /* Wait until RXNE flag is set to send data */
;;;1828       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
000058  2201              MOVS     r2,#1
00005a  230a              MOVS     r3,#0xa
00005c  4611              MOV      r1,r2
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000064  b128              CBZ      r0,|L23.114|
;;;1829       {
;;;1830         hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
000066  f8940052          LDRB     r0,[r4,#0x52]
00006a  f0400020          ORR      r0,r0,#0x20
00006e  f8840052          STRB     r0,[r4,#0x52]
                  |L23.114|
;;;1831       }
;;;1832     }
;;;1833   
;;;1834     hspi->RxXferCount = 0;
000072  2000              MOVS     r0,#0
000074  87e0              STRH     r0,[r4,#0x3e]
;;;1835     hspi->State = HAL_SPI_STATE_READY;
000076  2001              MOVS     r0,#1
000078  f8840051          STRB     r0,[r4,#0x51]
;;;1836   
;;;1837     /* Check if CRC error occurred */
;;;1838     if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
00007c  6820              LDR      r0,[r4,#0]
00007e  6881              LDR      r1,[r0,#8]
000080  43c9              MVNS     r1,r1
000082  06c9              LSLS     r1,r1,#27
000084  d409              BMI      |L23.154|
;;;1839     {
;;;1840       hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
000086  f8941052          LDRB     r1,[r4,#0x52]
00008a  f0410102          ORR      r1,r1,#2
00008e  f8841052          STRB     r1,[r4,#0x52]
;;;1841       __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
000092  6881              LDR      r1,[r0,#8]
000094  f0210110          BIC      r1,r1,#0x10
000098  6081              STR      r1,[r0,#8]
                  |L23.154|
;;;1842     }
;;;1843   
;;;1844     /* Check if Errors has been detected during transfer */
;;;1845     if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
00009a  f8940052          LDRB     r0,[r4,#0x52]
00009e  2800              CMP      r0,#0
;;;1846     {
;;;1847       HAL_SPI_ErrorCallback(hspi);
;;;1848     }
;;;1849     else
;;;1850     {
;;;1851       HAL_SPI_RxCpltCallback(hspi);
0000a0  4620              MOV      r0,r4
0000a2  d002              BEQ      |L23.170|
0000a4  f7fffffe          BL       HAL_SPI_ErrorCallback
;;;1852     }
;;;1853   }
0000a8  bd38              POP      {r3-r5,pc}
                  |L23.170|
0000aa  f7fffffe          BL       HAL_SPI_RxCpltCallback
0000ae  bd38              POP      {r3-r5,pc}
;;;1854   
                          ENDP


                          AREA ||i.SPI_DMATransmitCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMATransmitCplt PROC
;;;1754     */
;;;1755   static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;1756   {
;;;1757     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
;;;1758   
;;;1759     /* Wait until TXE flag is set to send data */
;;;1760     if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
000002  6b84              LDR      r4,[r0,#0x38]
000004  230a              MOVS     r3,#0xa
000006  2200              MOVS     r2,#0
000008  2102              MOVS     r1,#2
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000010  b128              CBZ      r0,|L24.30|
;;;1761     {
;;;1762       hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
000012  f8940052          LDRB     r0,[r4,#0x52]
000016  f0400020          ORR      r0,r0,#0x20
00001a  f8840052          STRB     r0,[r4,#0x52]
                  |L24.30|
;;;1763     }
;;;1764   
;;;1765     /* Disable Tx DMA Request */
;;;1766     hspi->Instance->CR2 &= (uint32_t)(~SPI_CR2_TXDMAEN);
00001e  6820              LDR      r0,[r4,#0]
000020  6841              LDR      r1,[r0,#4]
000022  f0210102          BIC      r1,r1,#2
000026  6041              STR      r1,[r0,#4]
;;;1767   
;;;1768     /* Wait until Busy flag is reset before disabling SPI */
;;;1769     if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
000028  230a              MOVS     r3,#0xa
00002a  2201              MOVS     r2,#1
00002c  2180              MOVS     r1,#0x80
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000034  b128              CBZ      r0,|L24.66|
;;;1770     {
;;;1771       hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
000036  f8940052          LDRB     r0,[r4,#0x52]
00003a  f0400020          ORR      r0,r0,#0x20
00003e  f8840052          STRB     r0,[r4,#0x52]
                  |L24.66|
;;;1772     }
;;;1773   
;;;1774     hspi->TxXferCount = 0;
000042  2000              MOVS     r0,#0
000044  86e0              STRH     r0,[r4,#0x36]
;;;1775   
;;;1776     hspi->State = HAL_SPI_STATE_READY;
000046  2001              MOVS     r0,#1
000048  f8840051          STRB     r0,[r4,#0x51]
;;;1777   
;;;1778     /* Clear OVERUN flag in 2 Lines communication mode because received is not read */
;;;1779     if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
00004c  68a0              LDR      r0,[r4,#8]
00004e  b910              CBNZ     r0,|L24.86|
;;;1780     {
;;;1781       __HAL_SPI_CLEAR_OVRFLAG(hspi);
000050  6820              LDR      r0,[r4,#0]
000052  68c1              LDR      r1,[r0,#0xc]
000054  6880              LDR      r0,[r0,#8]
                  |L24.86|
;;;1782     }
;;;1783   
;;;1784     /* Check if Errors has been detected during transfer */
;;;1785     if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
000056  f8940052          LDRB     r0,[r4,#0x52]
00005a  2800              CMP      r0,#0
;;;1786     {
;;;1787       HAL_SPI_ErrorCallback(hspi);
;;;1788     }
;;;1789     else
;;;1790     {
;;;1791       HAL_SPI_TxCpltCallback(hspi);
00005c  4620              MOV      r0,r4
00005e  d002              BEQ      |L24.102|
000060  f7fffffe          BL       HAL_SPI_ErrorCallback
;;;1792     }
;;;1793   }
000064  bd10              POP      {r4,pc}
                  |L24.102|
000066  f7fffffe          BL       HAL_SPI_TxCpltCallback
00006a  bd10              POP      {r4,pc}
;;;1794   
                          ENDP


                          AREA ||i.SPI_DMATransmitReceiveCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMATransmitReceiveCplt PROC
;;;1859     */
;;;1860   static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)   
000000  b538              PUSH     {r3-r5,lr}
;;;1861   {
;;;1862     __IO uint16_t tmpreg;
;;;1863   
;;;1864     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
;;;1865   
;;;1866     /* Reset CRC Calculation */
;;;1867     if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
000002  6b84              LDR      r4,[r0,#0x38]
000004  6aa0              LDR      r0,[r4,#0x28]
000006  f5b05f00          CMP      r0,#0x2000
00000a  d117              BNE      |L25.60|
;;;1868     {
;;;1869       /* Check if CRC is done on going (RXNE flag set) */
;;;1870       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_TIMEOUT_VALUE) == HAL_OK)
00000c  2201              MOVS     r2,#1
00000e  230a              MOVS     r3,#0xa
000010  4611              MOV      r1,r2
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000018  b960              CBNZ     r0,|L25.52|
;;;1871       {
;;;1872         /* Wait until RXNE flag is set to send data */
;;;1873         if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
00001a  230a              MOVS     r3,#0xa
00001c  2200              MOVS     r2,#0
00001e  2101              MOVS     r1,#1
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000026  b128              CBZ      r0,|L25.52|
;;;1874         {
;;;1875           hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
000028  f8940052          LDRB     r0,[r4,#0x52]
00002c  f0400020          ORR      r0,r0,#0x20
000030  f8840052          STRB     r0,[r4,#0x52]
                  |L25.52|
;;;1876         }
;;;1877       }
;;;1878       /* Read CRC */
;;;1879       tmpreg = hspi->Instance->DR;
000034  6820              LDR      r0,[r4,#0]
000036  68c0              LDR      r0,[r0,#0xc]
000038  f8ad0000          STRH     r0,[sp,#0]
                  |L25.60|
;;;1880     }
;;;1881   
;;;1882     /* Wait until TXE flag is set to send data */
;;;1883     if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
00003c  230a              MOVS     r3,#0xa
00003e  2200              MOVS     r2,#0
000040  2102              MOVS     r1,#2
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000048  b128              CBZ      r0,|L25.86|
;;;1884     {
;;;1885       hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
00004a  f8940052          LDRB     r0,[r4,#0x52]
00004e  f0400020          ORR      r0,r0,#0x20
000052  f8840052          STRB     r0,[r4,#0x52]
                  |L25.86|
;;;1886     }
;;;1887     /* Disable Tx DMA Request */
;;;1888     hspi->Instance->CR2 &= (uint32_t)(~SPI_CR2_TXDMAEN);
000056  6820              LDR      r0,[r4,#0]
000058  6841              LDR      r1,[r0,#4]
00005a  f0210102          BIC      r1,r1,#2
00005e  6041              STR      r1,[r0,#4]
;;;1889   
;;;1890     /* Wait until Busy flag is reset before disabling SPI */
;;;1891     if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
000060  230a              MOVS     r3,#0xa
000062  2201              MOVS     r2,#1
000064  2180              MOVS     r1,#0x80
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00006c  b128              CBZ      r0,|L25.122|
;;;1892     {
;;;1893       hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
00006e  f8940052          LDRB     r0,[r4,#0x52]
000072  f0400020          ORR      r0,r0,#0x20
000076  f8840052          STRB     r0,[r4,#0x52]
                  |L25.122|
;;;1894     }
;;;1895   
;;;1896     /* Disable Rx DMA Request */
;;;1897     hspi->Instance->CR2 &= (uint32_t)(~SPI_CR2_RXDMAEN);
00007a  6820              LDR      r0,[r4,#0]
00007c  6841              LDR      r1,[r0,#4]
00007e  f0210101          BIC      r1,r1,#1
000082  6041              STR      r1,[r0,#4]
;;;1898   
;;;1899     hspi->TxXferCount = 0;
000084  2000              MOVS     r0,#0
000086  86e0              STRH     r0,[r4,#0x36]
;;;1900     hspi->RxXferCount = 0;
000088  87e0              STRH     r0,[r4,#0x3e]
;;;1901   
;;;1902     hspi->State = HAL_SPI_STATE_READY;
00008a  2001              MOVS     r0,#1
00008c  f8840051          STRB     r0,[r4,#0x51]
;;;1903   
;;;1904     /* Check if CRC error occurred */
;;;1905     if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
000090  6820              LDR      r0,[r4,#0]
000092  6881              LDR      r1,[r0,#8]
000094  43c9              MVNS     r1,r1
000096  06c9              LSLS     r1,r1,#27
000098  d409              BMI      |L25.174|
;;;1906     {
;;;1907       hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
00009a  f8941052          LDRB     r1,[r4,#0x52]
00009e  f0410102          ORR      r1,r1,#2
0000a2  f8841052          STRB     r1,[r4,#0x52]
;;;1908       __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
0000a6  6881              LDR      r1,[r0,#8]
0000a8  f0210110          BIC      r1,r1,#0x10
0000ac  6081              STR      r1,[r0,#8]
                  |L25.174|
;;;1909     }
;;;1910   
;;;1911     /* Check if Errors has been detected during transfer */
;;;1912     if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
0000ae  f8940052          LDRB     r0,[r4,#0x52]
0000b2  2800              CMP      r0,#0
;;;1913     {
;;;1914       HAL_SPI_ErrorCallback(hspi);
;;;1915     }
;;;1916     else
;;;1917     {
;;;1918       HAL_SPI_TxRxCpltCallback(hspi);
0000b4  4620              MOV      r0,r4
0000b6  d002              BEQ      |L25.190|
0000b8  f7fffffe          BL       HAL_SPI_ErrorCallback
;;;1919     }
;;;1920   }
0000bc  bd38              POP      {r3-r5,pc}
                  |L25.190|
0000be  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
0000c2  bd38              POP      {r3-r5,pc}
;;;1921   
                          ENDP


                          AREA ||i.SPI_RxCloseIRQHandler||, CODE, READONLY, ALIGN=1

                  SPI_RxCloseIRQHandler PROC
;;;1618     */
;;;1619   static void SPI_RxCloseIRQHandler(SPI_HandleTypeDef *hspi)
000000  b538              PUSH     {r3-r5,lr}
;;;1620   {
000002  4604              MOV      r4,r0
;;;1621     __IO uint16_t tmpreg;
;;;1622   
;;;1623     if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
000004  6a80              LDR      r0,[r0,#0x28]
000006  f5b05f00          CMP      r0,#0x2000
00000a  d131              BNE      |L26.112|
;;;1624     {
;;;1625       /* Wait until RXNE flag is set to send data */
;;;1626       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
00000c  230a              MOVS     r3,#0xa
00000e  2200              MOVS     r2,#0
000010  2101              MOVS     r1,#1
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000018  b128              CBZ      r0,|L26.38|
;;;1627       {
;;;1628         hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
00001a  f8940052          LDRB     r0,[r4,#0x52]
00001e  f0400020          ORR      r0,r0,#0x20
000022  f8840052          STRB     r0,[r4,#0x52]
                  |L26.38|
;;;1629       }
;;;1630   
;;;1631       /* Read CRC to reset RXNE flag */
;;;1632       tmpreg = hspi->Instance->DR;
000026  6820              LDR      r0,[r4,#0]
000028  68c0              LDR      r0,[r0,#0xc]
00002a  f8ad0000          STRH     r0,[sp,#0]
;;;1633   
;;;1634       /* Wait until RXNE flag is set to send data */
;;;1635       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
00002e  2201              MOVS     r2,#1
000030  230a              MOVS     r3,#0xa
000032  4611              MOV      r1,r2
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00003a  b128              CBZ      r0,|L26.72|
;;;1636       {
;;;1637         hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
00003c  f8940052          LDRB     r0,[r4,#0x52]
000040  f0400020          ORR      r0,r0,#0x20
000044  f8840052          STRB     r0,[r4,#0x52]
                  |L26.72|
;;;1638       }
;;;1639   
;;;1640       /* Check if CRC error occurred */
;;;1641       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
000048  6820              LDR      r0,[r4,#0]
00004a  6881              LDR      r1,[r0,#8]
00004c  43c9              MVNS     r1,r1
00004e  06c9              LSLS     r1,r1,#27
000050  d40e              BMI      |L26.112|
;;;1642       {
;;;1643         hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
000052  f8941052          LDRB     r1,[r4,#0x52]
000056  f0410102          ORR      r1,r1,#2
00005a  f8841052          STRB     r1,[r4,#0x52]
;;;1644   
;;;1645         /* Reset CRC Calculation */
;;;1646         __HAL_SPI_RESET_CRC(hspi);
00005e  6801              LDR      r1,[r0,#0]
000060  f4215100          BIC      r1,r1,#0x2000
000064  6001              STR      r1,[r0,#0]
000066  6820              LDR      r0,[r4,#0]
000068  6801              LDR      r1,[r0,#0]
00006a  f4415100          ORR      r1,r1,#0x2000
00006e  6001              STR      r1,[r0,#0]
                  |L26.112|
;;;1647       }
;;;1648     }
;;;1649   
;;;1650     /* Disable RXNE and ERR interrupt */
;;;1651     __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE));
000070  6820              LDR      r0,[r4,#0]
000072  6841              LDR      r1,[r0,#4]
000074  f0210140          BIC      r1,r1,#0x40
000078  6041              STR      r1,[r0,#4]
;;;1652   
;;;1653     /* if Transmit process is finished */
;;;1654     if(__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_TXE) == RESET)
00007a  6820              LDR      r0,[r4,#0]
00007c  6841              LDR      r1,[r0,#4]
00007e  43c9              MVNS     r1,r1
000080  0609              LSLS     r1,r1,#24
000082  d51c              BPL      |L26.190|
;;;1655     {
;;;1656       /* Disable ERR interrupt */
;;;1657       __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_ERR));
000084  6841              LDR      r1,[r0,#4]
000086  f0210120          BIC      r1,r1,#0x20
00008a  6041              STR      r1,[r0,#4]
;;;1658   
;;;1659       if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
00008c  6860              LDR      r0,[r4,#4]
00008e  f5b07f82          CMP      r0,#0x104
000092  d10b              BNE      |L26.172|
000094  68a0              LDR      r0,[r4,#8]
000096  f5b04f00          CMP      r0,#0x8000
00009a  d002              BEQ      |L26.162|
00009c  f5b06f80          CMP      r0,#0x400
0000a0  d104              BNE      |L26.172|
                  |L26.162|
;;;1660       {
;;;1661         /* Disable SPI peripheral */
;;;1662         __HAL_SPI_DISABLE(hspi);
0000a2  6820              LDR      r0,[r4,#0]
0000a4  6801              LDR      r1,[r0,#0]
0000a6  f0210140          BIC      r1,r1,#0x40
0000aa  6001              STR      r1,[r0,#0]
                  |L26.172|
;;;1663       }
;;;1664       
;;;1665       /* Check if Errors has been detected during transfer */
;;;1666       if(hspi->ErrorCode ==  HAL_SPI_ERROR_NONE)
0000ac  f8941052          LDRB     r1,[r4,#0x52]
0000b0  2001              MOVS     r0,#1                 ;1626
0000b2  b129              CBZ      r1,|L26.192|
;;;1667       {
;;;1668         /* Check if we are in Rx or in Rx/Tx Mode */
;;;1669         if(hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
;;;1670         {
;;;1671           /* Set state to READY before run the Callback Complete */
;;;1672           hspi->State = HAL_SPI_STATE_READY;
;;;1673           HAL_SPI_TxRxCpltCallback(hspi);
;;;1674         }else
;;;1675         {
;;;1676           /* Set state to READY before run the Callback Complete */
;;;1677           hspi->State = HAL_SPI_STATE_READY;
;;;1678           HAL_SPI_RxCpltCallback(hspi);
;;;1679         }
;;;1680       }
;;;1681       else
;;;1682       {
;;;1683         /* Set state to READY before run the Callback Complete */
;;;1684         hspi->State = HAL_SPI_STATE_READY;
0000b4  f8840051          STRB     r0,[r4,#0x51]
;;;1685         /* Call Error call back in case of Error */
;;;1686         HAL_SPI_ErrorCallback(hspi);
0000b8  4620              MOV      r0,r4
0000ba  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L26.190|
;;;1687       }
;;;1688     }
;;;1689   }
0000be  bd38              POP      {r3-r5,pc}
                  |L26.192|
0000c0  f8941051          LDRB     r1,[r4,#0x51]         ;1669
0000c4  f8840051          STRB     r0,[r4,#0x51]         ;1677
0000c8  2932              CMP      r1,#0x32              ;1669
0000ca  4620              MOV      r0,r4                 ;1678
0000cc  d002              BEQ      |L26.212|
0000ce  f7fffffe          BL       HAL_SPI_RxCpltCallback
0000d2  bd38              POP      {r3-r5,pc}
                  |L26.212|
0000d4  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
0000d8  bd38              POP      {r3-r5,pc}
;;;1690   
                          ENDP


                          AREA ||i.SPI_RxISR||, CODE, READONLY, ALIGN=1

                  SPI_RxISR PROC
;;;1721     */
;;;1722   static void SPI_RxISR(SPI_HandleTypeDef *hspi)
000000  6802              LDR      r2,[r0,#0]
;;;1723   {
;;;1724     /* Receive data in 8 Bit mode */
;;;1725     if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;1726     {
;;;1727       (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;1728     }
;;;1729     /* Receive data in 16 Bit mode */
;;;1730     else
;;;1731     {
;;;1732       *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
000002  68c3              LDR      r3,[r0,#0xc]
000004  6b81              LDR      r1,[r0,#0x38]
000006  68d2              LDR      r2,[r2,#0xc]
000008  b153              CBZ      r3,|L27.32|
00000a  800a              STRH     r2,[r1,#0]
;;;1733       hspi->pRxBuffPtr+=2;
00000c  6b81              LDR      r1,[r0,#0x38]
00000e  1c89              ADDS     r1,r1,#2
000010  6381              STR      r1,[r0,#0x38]
                  |L27.18|
;;;1734     }
;;;1735       hspi->RxXferCount--;
000012  8fc1              LDRH     r1,[r0,#0x3e]
000014  1e49              SUBS     r1,r1,#1
000016  b289              UXTH     r1,r1
000018  87c1              STRH     r1,[r0,#0x3e]
;;;1736   
;;;1737     /* Enable CRC Transmission */
;;;1738     if((hspi->RxXferCount == 1) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
00001a  2901              CMP      r1,#1
00001c  d004              BEQ      |L27.40|
00001e  e00c              B        |L27.58|
                  |L27.32|
000020  1c4b              ADDS     r3,r1,#1              ;1727
000022  6383              STR      r3,[r0,#0x38]         ;1727
000024  700a              STRB     r2,[r1,#0]            ;1727
000026  e7f4              B        |L27.18|
                  |L27.40|
000028  6a81              LDR      r1,[r0,#0x28]
00002a  f5b15f00          CMP      r1,#0x2000
00002e  d109              BNE      |L27.68|
;;;1739     {
;;;1740       /* Set CRC Next to calculate CRC on Rx side */
;;;1741       hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;  
000030  6801              LDR      r1,[r0,#0]
000032  680a              LDR      r2,[r1,#0]
000034  f4425280          ORR      r2,r2,#0x1000
000038  600a              STR      r2,[r1,#0]
                  |L27.58|
;;;1742     }
;;;1743   
;;;1744     if(hspi->RxXferCount == 0)
00003a  8fc1              LDRH     r1,[r0,#0x3e]
00003c  2900              CMP      r1,#0
00003e  d101              BNE      |L27.68|
;;;1745     {
;;;1746       SPI_RxCloseIRQHandler(hspi);
000040  f7ffbffe          B.W      SPI_RxCloseIRQHandler
                  |L27.68|
;;;1747     }
;;;1748   }
000044  4770              BX       lr
;;;1749   
                          ENDP


                          AREA ||i.SPI_TxCloseIRQHandler||, CODE, READONLY, ALIGN=1

                  SPI_TxCloseIRQHandler PROC
;;;1527     */
;;;1528   static void SPI_TxCloseIRQHandler(SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;1529   {
000002  4604              MOV      r4,r0
;;;1530     /* Wait until TXE flag is set to send data */
;;;1531     if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
000004  230a              MOVS     r3,#0xa
000006  2200              MOVS     r2,#0
000008  2102              MOVS     r1,#2
00000a  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00000e  b128              CBZ      r0,|L28.28|
;;;1532     {
;;;1533       hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
000010  f8940052          LDRB     r0,[r4,#0x52]
000014  f0400020          ORR      r0,r0,#0x20
000018  f8840052          STRB     r0,[r4,#0x52]
                  |L28.28|
;;;1534     }
;;;1535   
;;;1536     /* Disable TXE interrupt */
;;;1537     __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE ));
00001c  6820              LDR      r0,[r4,#0]
00001e  6841              LDR      r1,[r0,#4]
000020  f0210180          BIC      r1,r1,#0x80
000024  6041              STR      r1,[r0,#4]
;;;1538   
;;;1539     /* Disable ERR interrupt if Receive process is finished */
;;;1540     if(__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_RXNE) == RESET)
000026  6820              LDR      r0,[r4,#0]
000028  6841              LDR      r1,[r0,#4]
00002a  43c9              MVNS     r1,r1
00002c  0649              LSLS     r1,r1,#25
00002e  d51e              BPL      |L28.110|
;;;1541     {
;;;1542       __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_ERR));
000030  6841              LDR      r1,[r0,#4]
000032  f0210120          BIC      r1,r1,#0x20
000036  6041              STR      r1,[r0,#4]
;;;1543   
;;;1544       /* Wait until Busy flag is reset before disabling SPI */
;;;1545       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
000038  230a              MOVS     r3,#0xa
00003a  2201              MOVS     r2,#1
00003c  2180              MOVS     r1,#0x80
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000044  b128              CBZ      r0,|L28.82|
;;;1546       {
;;;1547         hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
000046  f8940052          LDRB     r0,[r4,#0x52]
00004a  f0400020          ORR      r0,r0,#0x20
00004e  f8840052          STRB     r0,[r4,#0x52]
                  |L28.82|
;;;1548       }
;;;1549   
;;;1550       /* Clear OVERUN flag in 2 Lines communication mode because received is not read */
;;;1551       if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
000052  68a0              LDR      r0,[r4,#8]
000054  b910              CBNZ     r0,|L28.92|
;;;1552       {
;;;1553         __HAL_SPI_CLEAR_OVRFLAG(hspi);
000056  6820              LDR      r0,[r4,#0]
000058  68c1              LDR      r1,[r0,#0xc]
00005a  6880              LDR      r0,[r0,#8]
                  |L28.92|
;;;1554       }
;;;1555       
;;;1556       /* Check if Errors has been detected during transfer */
;;;1557       if(hspi->ErrorCode ==  HAL_SPI_ERROR_NONE)
00005c  f8941052          LDRB     r1,[r4,#0x52]
000060  2001              MOVS     r0,#1                 ;1545
000062  b129              CBZ      r1,|L28.112|
;;;1558       {
;;;1559         /* Check if we are in Tx or in Rx/Tx Mode */
;;;1560         if(hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
;;;1561         {
;;;1562           /* Set state to READY before run the Callback Complete */
;;;1563           hspi->State = HAL_SPI_STATE_READY;
;;;1564           HAL_SPI_TxRxCpltCallback(hspi);
;;;1565         }
;;;1566         else
;;;1567         {
;;;1568           /* Set state to READY before run the Callback Complete */
;;;1569           hspi->State = HAL_SPI_STATE_READY;
;;;1570           HAL_SPI_TxCpltCallback(hspi);
;;;1571         }
;;;1572       }
;;;1573       else
;;;1574       {
;;;1575         /* Set state to READY before run the Callback Complete */
;;;1576         hspi->State = HAL_SPI_STATE_READY;
000064  f8840051          STRB     r0,[r4,#0x51]
;;;1577         /* Call Error call back in case of Error */
;;;1578         HAL_SPI_ErrorCallback(hspi);
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L28.110|
;;;1579       }
;;;1580     }
;;;1581   }
00006e  bd10              POP      {r4,pc}
                  |L28.112|
000070  f8941051          LDRB     r1,[r4,#0x51]         ;1560
000074  f8840051          STRB     r0,[r4,#0x51]         ;1569
000078  2932              CMP      r1,#0x32              ;1560
00007a  4620              MOV      r0,r4                 ;1570
00007c  d002              BEQ      |L28.132|
00007e  f7fffffe          BL       HAL_SPI_TxCpltCallback
000082  bd10              POP      {r4,pc}
                  |L28.132|
000084  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
000088  bd10              POP      {r4,pc}
;;;1582   
                          ENDP


                          AREA ||i.SPI_TxISR||, CODE, READONLY, ALIGN=1

                  SPI_TxISR PROC
;;;1587     */
;;;1588   static void SPI_TxISR(SPI_HandleTypeDef *hspi)
000000  68c3              LDR      r3,[r0,#0xc]
;;;1589   {
000002  6802              LDR      r2,[r0,#0]
000004  6b01              LDR      r1,[r0,#0x30]
000006  b17b              CBZ      r3,|L29.40|
;;;1590     /* Transmit data in 8 Bit mode */
;;;1591     if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;1592     {
;;;1593       hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;1594     }
;;;1595     /* Transmit data in 16 Bit mode */
;;;1596     else
;;;1597     {
;;;1598       hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
000008  8809              LDRH     r1,[r1,#0]
00000a  60d1              STR      r1,[r2,#0xc]
;;;1599       hspi->pTxBuffPtr+=2;
00000c  6b01              LDR      r1,[r0,#0x30]
00000e  1c89              ADDS     r1,r1,#2
000010  6301              STR      r1,[r0,#0x30]
                  |L29.18|
;;;1600     }
;;;1601     hspi->TxXferCount--;
000012  8ec1              LDRH     r1,[r0,#0x36]
000014  1e49              SUBS     r1,r1,#1
000016  0409              LSLS     r1,r1,#16
000018  0c09              LSRS     r1,r1,#16
00001a  86c1              STRH     r1,[r0,#0x36]
;;;1602   
;;;1603     if(hspi->TxXferCount == 0)
00001c  d110              BNE      |L29.64|
;;;1604     {
;;;1605       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
00001e  6a81              LDR      r1,[r0,#0x28]
000020  f5b15f00          CMP      r1,#0x2000
000024  d005              BEQ      |L29.50|
000026  e009              B        |L29.60|
                  |L29.40|
000028  1c4b              ADDS     r3,r1,#1              ;1593
00002a  6303              STR      r3,[r0,#0x30]         ;1593
00002c  7809              LDRB     r1,[r1,#0]            ;1593
00002e  60d1              STR      r1,[r2,#0xc]          ;1593
000030  e7ef              B        |L29.18|
                  |L29.50|
;;;1606       {
;;;1607         /* calculate and transfer CRC on Tx line */
;;;1608         hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
000032  6801              LDR      r1,[r0,#0]
000034  680a              LDR      r2,[r1,#0]
000036  f4425280          ORR      r2,r2,#0x1000
00003a  600a              STR      r2,[r1,#0]
                  |L29.60|
;;;1609       }
;;;1610       SPI_TxCloseIRQHandler(hspi);
00003c  f7ffbffe          B.W      SPI_TxCloseIRQHandler
                  |L29.64|
;;;1611     }
;;;1612   }
000040  4770              BX       lr
;;;1613   
                          ENDP


                          AREA ||i.SPI_WaitOnFlagUntilTimeout||, CODE, READONLY, ALIGN=1

                  SPI_WaitOnFlagUntilTimeout PROC
;;;1941     */
;;;1942   static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1943   {
000004  461d              MOV      r5,r3
000006  4690              MOV      r8,r2
000008  460e              MOV      r6,r1
00000a  4604              MOV      r4,r0
;;;1944     uint32_t timeout = 0;
;;;1945   
;;;1946     timeout = HAL_GetTick() + Timeout;
00000c  f7fffffe          BL       HAL_GetTick
000010  1947              ADDS     r7,r0,r5
;;;1947   
;;;1948     /* Wait until flag is set */
;;;1949     if(Status == RESET)
000012  ea5f0008          MOVS     r0,r8
000016  f04f0800          MOV      r8,#0
;;;1950     {
;;;1951       while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
;;;1952       {
;;;1953         if(Timeout != HAL_MAX_DELAY)
;;;1954         {
;;;1955           if(HAL_GetTick() >= timeout)
;;;1956           {
;;;1957             /* Disable the SPI and reset the CRC: the CRC value should be cleared
;;;1958                on both master and slave sides in order to resynchronize the master
;;;1959                and slave for their respective CRC calculation */
;;;1960   
;;;1961             /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
;;;1962             __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
;;;1963   
;;;1964             /* Disable SPI peripheral */
;;;1965             __HAL_SPI_DISABLE(hspi);
;;;1966   
;;;1967             /* Reset CRC Calculation */
;;;1968             if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
00001a  f44f5a00          MOV      r10,#0x2000
;;;1969             {
;;;1970               __HAL_SPI_RESET_CRC(hspi);
;;;1971             }
;;;1972   
;;;1973             hspi->State= HAL_SPI_STATE_READY;
00001e  f04f0901          MOV      r9,#1
000022  d024              BEQ      |L30.110|
000024  e02f              B        |L30.134|
                  |L30.38|
000026  1c68              ADDS     r0,r5,#1              ;1953
000028  d021              BEQ      |L30.110|
00002a  f7fffffe          BL       HAL_GetTick
00002e  42b8              CMP      r0,r7                 ;1955
000030  d31d              BCC      |L30.110|
                  |L30.50|
000032  6820              LDR      r0,[r4,#0]            ;1962
000034  6841              LDR      r1,[r0,#4]            ;1962
000036  f02101e0          BIC      r1,r1,#0xe0           ;1962
00003a  6041              STR      r1,[r0,#4]            ;1962
00003c  6820              LDR      r0,[r4,#0]            ;1965
00003e  6801              LDR      r1,[r0,#0]            ;1965
000040  f0210140          BIC      r1,r1,#0x40           ;1965
000044  6001              STR      r1,[r0,#0]            ;1965
000046  6aa0              LDR      r0,[r4,#0x28]         ;1968
000048  4550              CMP      r0,r10                ;1968
00004a  d109              BNE      |L30.96|
00004c  6820              LDR      r0,[r4,#0]            ;1970
00004e  6801              LDR      r1,[r0,#0]            ;1970
000050  f4215100          BIC      r1,r1,#0x2000         ;1970
000054  6001              STR      r1,[r0,#0]            ;1970
000056  6820              LDR      r0,[r4,#0]            ;1970
000058  6801              LDR      r1,[r0,#0]            ;1970
00005a  f4415100          ORR      r1,r1,#0x2000         ;1970
00005e  6001              STR      r1,[r0,#0]            ;1970
                  |L30.96|
;;;1974   
;;;1975             /* Process Unlocked */
;;;1976             __HAL_UNLOCK(hspi);
;;;1977   
;;;1978             return HAL_TIMEOUT;
;;;1979           }
;;;1980         }
;;;1981       }
;;;1982     }
;;;1983     else
;;;1984     {
;;;1985       while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
;;;1986       {
;;;1987         if(Timeout != HAL_MAX_DELAY)
;;;1988         {
;;;1989           if(HAL_GetTick() >= timeout)
;;;1990           {
;;;1991             /* Disable the SPI and reset the CRC: the CRC value should be cleared
;;;1992                on both master and slave sides in order to resynchronize the master
;;;1993                and slave for their respective CRC calculation */
;;;1994   
;;;1995             /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
;;;1996             __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
;;;1997   
;;;1998             /* Disable SPI peripheral */
;;;1999             __HAL_SPI_DISABLE(hspi);
;;;2000   
;;;2001             /* Reset CRC Calculation */
;;;2002             if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
;;;2003             {
;;;2004               __HAL_SPI_RESET_CRC(hspi);
;;;2005             }
;;;2006   
;;;2007             hspi->State= HAL_SPI_STATE_READY;
000060  f8849051          STRB     r9,[r4,#0x51]
;;;2008   
;;;2009             /* Process Unlocked */
;;;2010             __HAL_UNLOCK(hspi);
000064  f8848050          STRB     r8,[r4,#0x50]
;;;2011   
;;;2012             return HAL_TIMEOUT;
000068  2003              MOVS     r0,#3
                  |L30.106|
;;;2013           }
;;;2014         }
;;;2015       }
;;;2016     }
;;;2017     return HAL_OK;
;;;2018   }
00006a  e8bd87f0          POP      {r4-r10,pc}
                  |L30.110|
00006e  6820              LDR      r0,[r4,#0]            ;1951
000070  6880              LDR      r0,[r0,#8]            ;1951
000072  ea360000          BICS     r0,r6,r0              ;1951
000076  d1d6              BNE      |L30.38|
000078  e00a              B        |L30.144|
                  |L30.122|
00007a  1c68              ADDS     r0,r5,#1              ;1987
00007c  d003              BEQ      |L30.134|
00007e  f7fffffe          BL       HAL_GetTick
000082  42b8              CMP      r0,r7                 ;1989
000084  d2d5              BCS      |L30.50|
                  |L30.134|
000086  6820              LDR      r0,[r4,#0]            ;1985
000088  6880              LDR      r0,[r0,#8]            ;1985
00008a  ea360000          BICS     r0,r6,r0              ;1985
00008e  d0f4              BEQ      |L30.122|
                  |L30.144|
000090  2000              MOVS     r0,#0                 ;2017
000092  e7ea              B        |L30.106|
;;;2019   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\Drivers\\STM32F2xx_HAL_Driver\\Src\\stm32f2xx_hal_spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f2xx_hal_spi_c_5e7b22bd____REV16|
#line 129 "..\\..\\Drivers\\CMSIS\\Include\\core_cmInstr.h"
|__asm___19_stm32f2xx_hal_spi_c_5e7b22bd____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f2xx_hal_spi_c_5e7b22bd____REVSH|
#line 144
|__asm___19_stm32f2xx_hal_spi_c_5e7b22bd____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
