; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o"bhd2 configuration\stm32f2xx_hal_flash_ex.o" --asm_dir=.\list\ --list_dir=.\list\ --depend="bhd2 configuration\stm32f2xx_hal_flash_ex.d" --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\..\Drivers\CMSIS\Device\ST\STM32F2xx\Include -I..\..\Drivers\CMSIS\Include -I..\..\Middlewares\ST\STM32_USB_Device_Library\Class\CDC\Inc -I..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc -I..\..\Drivers\STM32F2xx_HAL_Driver\Inc -I..\..\Inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_HAL_DRIVER -DSTM32F215xx --omf_browse="bhd2 configuration\stm32f2xx_hal_flash_ex.crf" ..\..\Drivers\STM32F2xx_HAL_Driver\Src\stm32f2xx_hal_flash_ex.c]
                          THUMB

                          AREA ||i.FLASH_Erase_Sector||, CODE, READONLY, ALIGN=2

                  FLASH_Erase_Sector PROC
;;;377      */
;;;378    void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
000000  2200              MOVS     r2,#0
;;;379    {
000002  b129              CBZ      r1,|L1.16|
;;;380      uint32_t tmp_psize = 0;
;;;381    
;;;382      /* Check the parameters */
;;;383      assert_param(IS_FLASH_SECTOR(Sector));
;;;384      assert_param(IS_VOLTAGERANGE(VoltageRange));
;;;385      
;;;386      if(VoltageRange == VOLTAGE_RANGE_1)
;;;387      {
;;;388         tmp_psize = FLASH_PSIZE_BYTE;
;;;389      }
;;;390      else if(VoltageRange == VOLTAGE_RANGE_2)
000004  2901              CMP      r1,#1
000006  d022              BEQ      |L1.78|
;;;391      {
;;;392        tmp_psize = FLASH_PSIZE_HALF_WORD;
;;;393      }
;;;394      else if(VoltageRange == VOLTAGE_RANGE_3)
000008  2902              CMP      r1,#2
00000a  d023              BEQ      |L1.84|
;;;395      {
;;;396        tmp_psize = FLASH_PSIZE_WORD;
;;;397      }
;;;398      else
;;;399      {
;;;400        tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
00000c  f44f7240          MOV      r2,#0x300
                  |L1.16|
;;;401      }
;;;402    
;;;403      /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
;;;404      if (Sector > FLASH_SECTOR_11) 
000010  280b              CMP      r0,#0xb
000012  d900              BLS      |L1.22|
000014  1d00              ADDS     r0,r0,#4
                  |L1.22|
;;;405      {
;;;406        Sector += 4;
;;;407      }
;;;408      /* If the previous operation is completed, proceed to erase the sector */
;;;409      FLASH->CR &= CR_PSIZE_MASK;
000016  4911              LDR      r1,|L1.92|
000018  680b              LDR      r3,[r1,#0]
00001a  f4237340          BIC      r3,r3,#0x300
00001e  600b              STR      r3,[r1,#0]
;;;410      FLASH->CR |= tmp_psize;
000020  680b              LDR      r3,[r1,#0]
000022  4313              ORRS     r3,r3,r2
000024  600b              STR      r3,[r1,#0]
;;;411      FLASH->CR &= SECTOR_MASK;
000026  680a              LDR      r2,[r1,#0]
000028  f02202f8          BIC      r2,r2,#0xf8
00002c  600a              STR      r2,[r1,#0]
;;;412      FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
00002e  680a              LDR      r2,[r1,#0]
000030  23f8              MOVS     r3,#0xf8
000032  fa93f3a3          RBIT     r3,r3
000036  fab3f383          CLZ      r3,r3
00003a  4098              LSLS     r0,r0,r3
00003c  f0400002          ORR      r0,r0,#2
000040  4302              ORRS     r2,r2,r0
000042  600a              STR      r2,[r1,#0]
;;;413      FLASH->CR |= FLASH_CR_STRT;
000044  6808              LDR      r0,[r1,#0]
000046  f4403080          ORR      r0,r0,#0x10000
00004a  6008              STR      r0,[r1,#0]
;;;414    }
00004c  4770              BX       lr
                  |L1.78|
00004e  f44f7280          MOV      r2,#0x100             ;392
000052  e7dd              B        |L1.16|
                  |L1.84|
000054  f44f7200          MOV      r2,#0x200             ;396
000058  e7da              B        |L1.16|
;;;415    
                          ENDP

00005a  0000              DCW      0x0000
                  |L1.92|
                          DCD      0x40023c10

                          AREA ||i.FLASH_MassErase||, CODE, READONLY, ALIGN=2

                  FLASH_MassErase PROC
;;;346      */
;;;347    static void FLASH_MassErase(uint8_t VoltageRange)
000000  4807              LDR      r0,|L2.32|
;;;348    {
;;;349      uint32_t tmp_psize = 0;
;;;350      
;;;351      /* Check the parameters */
;;;352      assert_param(IS_VOLTAGERANGE(VoltageRange));
;;;353    
;;;354      /* if the previous operation is completed, proceed to erase all sectors */
;;;355      FLASH->CR &= CR_PSIZE_MASK;
000002  6801              LDR      r1,[r0,#0]
000004  f4217140          BIC      r1,r1,#0x300
000008  6001              STR      r1,[r0,#0]
;;;356      FLASH->CR |= tmp_psize;
00000a  6801              LDR      r1,[r0,#0]
00000c  6001              STR      r1,[r0,#0]
;;;357      FLASH->CR |= FLASH_CR_MER;
00000e  6801              LDR      r1,[r0,#0]
000010  f0410104          ORR      r1,r1,#4
000014  6001              STR      r1,[r0,#0]
;;;358      FLASH->CR |= FLASH_CR_STRT;
000016  6801              LDR      r1,[r0,#0]
000018  f4413180          ORR      r1,r1,#0x10000
00001c  6001              STR      r1,[r0,#0]
;;;359    }
00001e  4770              BX       lr
;;;360    
                          ENDP

                  |L2.32|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASHEx_Erase||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_Erase PROC
;;;133      */
;;;134    HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;135    {
000004  4604              MOV      r4,r0
;;;136      HAL_StatusTypeDef status = HAL_ERROR;
;;;137      uint32_t index = 0;
;;;138      
;;;139      /* Process Locked */
;;;140      __HAL_LOCK(&pFlash);
000006  4821              LDR      r0,|L3.140|
000008  460f              MOV      r7,r1                 ;135
00000a  7d01              LDRB     r1,[r0,#0x14]  ; pFlash
00000c  2901              CMP      r1,#1
00000e  d009              BEQ      |L3.36|
000010  2101              MOVS     r1,#1
000012  4680              MOV      r8,r0
000014  7501              STRB     r1,[r0,#0x14]
;;;141    
;;;142      /* Check the parameters */
;;;143      assert_param(IS_TYPEERASE(pEraseInit->TypeErase));
;;;144    
;;;145      /* Wait for last operation to be completed */
;;;146      status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
000016  f24c3950          MOV      r9,#0xc350
00001a  4648              MOV      r0,r9
00001c  f7fffffe          BL       FLASH_WaitForLastOperation
000020  b118              CBZ      r0,|L3.42|
000022  e02e              B        |L3.130|
                  |L3.36|
000024  2002              MOVS     r0,#2                 ;140
                  |L3.38|
;;;147    
;;;148      if (status == HAL_OK)
;;;149      {
;;;150        /*Initialization of SectorError variable*/
;;;151        *SectorError = 0xFFFFFFFF;
;;;152        
;;;153        if (pEraseInit->TypeErase == TYPEERASE_MASSERASE)
;;;154        {
;;;155          /*Mass erase to be done*/
;;;156          FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);
;;;157    
;;;158          /* Wait for last operation to be completed */
;;;159          status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
;;;160          
;;;161          /* if the erase operation is completed, disable the MER Bit */
;;;162          FLASH->CR &= (~FLASH_CR_MER);
;;;163        }
;;;164        else
;;;165        {
;;;166          /* Check the parameters */
;;;167          assert_param(IS_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
;;;168    
;;;169          /* Erase by sector by sector to be done*/
;;;170          for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
;;;171          {
;;;172            FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
;;;173    
;;;174            /* Wait for last operation to be completed */
;;;175            status = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
;;;176            
;;;177            /* If the erase operation is completed, disable the SER Bit */
;;;178            FLASH->CR &= (~FLASH_CR_SER);
;;;179            FLASH->CR &= SECTOR_MASK; 
;;;180    
;;;181            if (status != HAL_OK) 
;;;182            {
;;;183              /* In case of error, stop erase procedure and return the faulty sector*/
;;;184              *SectorError = index;
;;;185              break;
;;;186            }
;;;187          }
;;;188        }
;;;189      }
;;;190    
;;;191      /* Process Unlocked */
;;;192      __HAL_UNLOCK(&pFlash);
;;;193    
;;;194      return status;
;;;195    }
000026  e8bd87f0          POP      {r4-r10,pc}
                  |L3.42|
00002a  f04f31ff          MOV      r1,#0xffffffff        ;151
00002e  6039              STR      r1,[r7,#0]            ;153
000030  6821              LDR      r1,[r4,#0]            ;153
000032  4d17              LDR      r5,|L3.144|
000034  2901              CMP      r1,#1                 ;153
000036  d001              BEQ      |L3.60|
000038  6866              LDR      r6,[r4,#4]            ;170
00003a  e01d              B        |L3.120|
                  |L3.60|
00003c  7b20              LDRB     r0,[r4,#0xc]          ;156
00003e  f7fffffe          BL       FLASH_MassErase
000042  4648              MOV      r0,r9                 ;159
000044  f7fffffe          BL       FLASH_WaitForLastOperation
000048  6829              LDR      r1,[r5,#0]            ;162
00004a  f0210104          BIC      r1,r1,#4              ;162
00004e  6029              STR      r1,[r5,#0]            ;162
000050  e017              B        |L3.130|
                  |L3.82|
000052  7b21              LDRB     r1,[r4,#0xc]          ;172
000054  4630              MOV      r0,r6                 ;172
000056  f7fffffe          BL       FLASH_Erase_Sector
00005a  4648              MOV      r0,r9                 ;175
00005c  f7fffffe          BL       FLASH_WaitForLastOperation
000060  6829              LDR      r1,[r5,#0]            ;178
000062  f0210102          BIC      r1,r1,#2              ;178
000066  6029              STR      r1,[r5,#0]            ;178
000068  6829              LDR      r1,[r5,#0]            ;179
00006a  f02101f8          BIC      r1,r1,#0xf8           ;179
00006e  6029              STR      r1,[r5,#0]            ;179
000070  b108              CBZ      r0,|L3.118|
000072  603e              STR      r6,[r7,#0]            ;185
000074  e005              B        |L3.130|
                  |L3.118|
000076  1c76              ADDS     r6,r6,#1              ;185
                  |L3.120|
000078  e9d42101          LDRD     r2,r1,[r4,#4]         ;185
00007c  4411              ADD      r1,r1,r2              ;170
00007e  42b1              CMP      r1,r6                 ;170
000080  d8e7              BHI      |L3.82|
                  |L3.130|
000082  2200              MOVS     r2,#0                 ;192
000084  f8882014          STRB     r2,[r8,#0x14]         ;192
000088  e7cd              B        |L3.38|
;;;196    
                          ENDP

00008a  0000              DCW      0x0000
                  |L3.140|
                          DCD      pFlash
                  |L3.144|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASHEx_Erase_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_Erase_IT PROC
;;;203      */
;;;204    HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
000000  b570              PUSH     {r4-r6,lr}
;;;205    {
;;;206      HAL_StatusTypeDef status = HAL_OK;
;;;207    
;;;208      /* Process Locked */
;;;209      __HAL_LOCK(&pFlash);
000002  4916              LDR      r1,|L4.92|
000004  2400              MOVS     r4,#0                 ;206
000006  7d0a              LDRB     r2,[r1,#0x14]  ; pFlash
000008  2a01              CMP      r2,#1
00000a  d01e              BEQ      |L4.74|
;;;210    
;;;211      /* Check the parameters */
;;;212      assert_param(IS_TYPEERASE(pEraseInit->TypeErase));
;;;213    
;;;214      /* Enable End of FLASH Operation interrupt */
;;;215      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
00000c  4a14              LDR      r2,|L4.96|
00000e  2301              MOVS     r3,#1                 ;209
000010  750b              STRB     r3,[r1,#0x14]         ;209
000012  6815              LDR      r5,[r2,#0]
000014  f0457580          ORR      r5,r5,#0x1000000
000018  6015              STR      r5,[r2,#0]
;;;216      
;;;217      /* Enable Error source interrupt */
;;;218      __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
00001a  6815              LDR      r5,[r2,#0]
00001c  f0457500          ORR      r5,r5,#0x2000000
000020  6015              STR      r5,[r2,#0]
;;;219      
;;;220      /* Clear pending flags (if any) */  
;;;221      __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
000022  4d0f              LDR      r5,|L4.96|
000024  22f3              MOVS     r2,#0xf3
000026  1f2d              SUBS     r5,r5,#4
000028  602a              STR      r2,[r5,#0]
;;;222                             FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR| FLASH_FLAG_PGSERR);  
;;;223      
;;;224      if (pEraseInit->TypeErase == TYPEERASE_MASSERASE)
00002a  6802              LDR      r2,[r0,#0]
00002c  2a01              CMP      r2,#1
00002e  d00e              BEQ      |L4.78|
;;;225      {
;;;226        /*Mass erase to be done*/
;;;227        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
;;;228        FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);
;;;229      }
;;;230      else
;;;231      {
;;;232        /* Erase by sector to be done*/
;;;233    
;;;234        /* Check the parameters */
;;;235        assert_param(IS_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
;;;236    
;;;237        pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
000030  700b              STRB     r3,[r1,#0]
;;;238        pFlash.NbSectorsToErase = pEraseInit->NbSectors;
000032  6882              LDR      r2,[r0,#8]
000034  604a              STR      r2,[r1,#4]  ; pFlash
;;;239        pFlash.Sector = pEraseInit->Sector;
000036  6842              LDR      r2,[r0,#4]
000038  60ca              STR      r2,[r1,#0xc]  ; pFlash
;;;240        pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
00003a  7b02              LDRB     r2,[r0,#0xc]
00003c  720a              STRB     r2,[r1,#8]
;;;241    
;;;242        /*Erase 1st sector and wait for IT*/
;;;243        FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
00003e  7b01              LDRB     r1,[r0,#0xc]
000040  6840              LDR      r0,[r0,#4]
000042  f7fffffe          BL       FLASH_Erase_Sector
                  |L4.70|
;;;244      }
;;;245    
;;;246      return status;
000046  4620              MOV      r0,r4
;;;247    }
000048  bd70              POP      {r4-r6,pc}
                  |L4.74|
00004a  2002              MOVS     r0,#2                 ;209
00004c  bd70              POP      {r4-r6,pc}
                  |L4.78|
00004e  2202              MOVS     r2,#2                 ;227
000050  700a              STRB     r2,[r1,#0]            ;227
000052  7b00              LDRB     r0,[r0,#0xc]          ;228
000054  f7fffffe          BL       FLASH_MassErase
000058  e7f5              B        |L4.70|
;;;248    
                          ENDP

00005a  0000              DCW      0x0000
                  |L4.92|
                          DCD      pFlash
                  |L4.96|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASHEx_OBGetConfig||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBGetConfig PROC
;;;314      */
;;;315    void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
000000  210f              MOVS     r1,#0xf
000002  6001              STR      r1,[r0,#0]
000004  490a              LDR      r1,|L5.48|
000006  8809              LDRH     r1,[r1,#0]
000008  6081              STR      r1,[r0,#8]
00000a  4a09              LDR      r2,|L5.48|
00000c  2100              MOVS     r1,#0
00000e  1e52              SUBS     r2,r2,#1
000010  7812              LDRB     r2,[r2,#0]
000012  2aaa              CMP      r2,#0xaa
;;;316    {
000014  d000              BEQ      |L5.24|
000016  2101              MOVS     r1,#1
                  |L5.24|
000018  60c1              STR      r1,[r0,#0xc]
00001a  4905              LDR      r1,|L5.48|
00001c  1e89              SUBS     r1,r1,#2
00001e  680a              LDR      r2,[r1,#0]
000020  f00202e0          AND      r2,r2,#0xe0
;;;317      pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
;;;318    
;;;319      /*Get WRP*/
;;;320      pOBInit->WRPSector = FLASH_OB_GetWRP();
;;;321    
;;;322      /*Get RDP Level*/
;;;323      pOBInit->RDPLevel = FLASH_OB_GetRDP();
;;;324    
;;;325      /*Get USER*/
;;;326      pOBInit->USERConfig = FLASH_OB_GetUser();
000024  7502              STRB     r2,[r0,#0x14]
000026  7809              LDRB     r1,[r1,#0]
000028  f001010c          AND      r1,r1,#0xc
;;;327    
;;;328      /*Get BOR Level*/
;;;329      pOBInit->BORLevel = FLASH_OB_GetBOR();
00002c  6101              STR      r1,[r0,#0x10]
;;;330    }
00002e  4770              BX       lr
;;;331    
                          ENDP

                  |L5.48|
                          DCD      0x40023c16

                          AREA ||i.HAL_FLASHEx_OBProgram||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBProgram PROC
;;;255      */
;;;256    HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;257    {
;;;258      HAL_StatusTypeDef status = HAL_ERROR;
;;;259      
;;;260      /* Process Locked */
;;;261      __HAL_LOCK(&pFlash);
000004  492e              LDR      r1,|L6.192|
000006  4604              MOV      r4,r0                 ;257
000008  2001              MOVS     r0,#1                 ;258
00000a  7d0a              LDRB     r2,[r1,#0x14]  ; pFlash
00000c  2a01              CMP      r2,#1
00000e  d011              BEQ      |L6.52|
000010  2201              MOVS     r2,#1
000012  4688              MOV      r8,r1
000014  750a              STRB     r2,[r1,#0x14]
;;;262    
;;;263      /* Check the parameters */
;;;264      assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
;;;265    
;;;266      /*Write protection configuration*/
;;;267      if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
000016  7821              LDRB     r1,[r4,#0]
000018  f24c3a50          MOV      r10,#0xc350
00001c  07c9              LSLS     r1,r1,#31
00001e  d015              BEQ      |L6.76|
;;;268      {
;;;269        assert_param(IS_WRPSTATE(pOBInit->WRPState));
;;;270        if (pOBInit->WRPState == WRPSTATE_ENABLE)
000020  6860              LDR      r0,[r4,#4]
000022  4d28              LDR      r5,|L6.196|
000024  2801              CMP      r0,#1
000026  68a6              LDR      r6,[r4,#8]
000028  4650              MOV      r0,r10
00002a  d006              BEQ      |L6.58|
00002c  f7fffffe          BL       FLASH_WaitForLastOperation
000030  b148              CBZ      r0,|L6.70|
000032  e00b              B        |L6.76|
                  |L6.52|
000034  2002              MOVS     r0,#2                 ;261
                  |L6.54|
;;;271        {
;;;272          /*Enable of Write protection on the selected Sector*/
;;;273          status = FLASH_OB_EnableWRP(pOBInit->WRPSector);
;;;274        }
;;;275        else
;;;276        {
;;;277          /*Disable of Write protection on the selected Sector*/
;;;278          status = FLASH_OB_DisableWRP(pOBInit->WRPSector);
;;;279        }
;;;280      }
;;;281    
;;;282      /*Read protection configuration*/
;;;283      if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
;;;284      {
;;;285        status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
;;;286      }
;;;287    
;;;288      /*USER  configuration*/
;;;289      if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
;;;290      {
;;;291        status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
;;;292                                         pOBInit->USERConfig&OB_STOP_NO_RST,
;;;293                                         pOBInit->USERConfig&OB_STDBY_NO_RST);
;;;294      }
;;;295    
;;;296      /*BOR Level  configuration*/
;;;297      if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
;;;298      {
;;;299        status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
;;;300      }
;;;301    
;;;302      /* Process Unlocked */
;;;303      __HAL_UNLOCK(&pFlash);
;;;304    
;;;305      return status;
;;;306    }
000036  e8bd87f0          POP      {r4-r10,pc}
                  |L6.58|
00003a  f7fffffe          BL       FLASH_WaitForLastOperation
00003e  b928              CBNZ     r0,|L6.76|
000040  8829              LDRH     r1,[r5,#0]
000042  43b1              BICS     r1,r1,r6
000044  e001              B        |L6.74|
                  |L6.70|
000046  8829              LDRH     r1,[r5,#0]
000048  4331              ORRS     r1,r1,r6
                  |L6.74|
00004a  8029              STRH     r1,[r5,#0]
                  |L6.76|
00004c  7821              LDRB     r1,[r4,#0]            ;283
00004e  0789              LSLS     r1,r1,#30             ;283
000050  d507              BPL      |L6.98|
000052  7b25              LDRB     r5,[r4,#0xc]          ;285
000054  4650              MOV      r0,r10                ;285
000056  f7fffffe          BL       FLASH_WaitForLastOperation
00005a  b910              CBNZ     r0,|L6.98|
00005c  4919              LDR      r1,|L6.196|
00005e  1e49              SUBS     r1,r1,#1              ;285
000060  700d              STRB     r5,[r1,#0]            ;285
                  |L6.98|
000062  7821              LDRB     r1,[r4,#0]            ;289
000064  f8df9060          LDR      r9,|L6.200|
000068  0749              LSLS     r1,r1,#29             ;289
00006a  d513              BPL      |L6.148|
00006c  7d20              LDRB     r0,[r4,#0x14]         ;291
00006e  f0000720          AND      r7,r0,#0x20           ;291
000072  f0000540          AND      r5,r0,#0x40           ;291
000076  f0000680          AND      r6,r0,#0x80           ;291
00007a  4650              MOV      r0,r10                ;291
00007c  f7fffffe          BL       FLASH_WaitForLastOperation
000080  b940              CBNZ     r0,|L6.148|
000082  f8992000          LDRB     r2,[r9,#0]            ;291
000086  f002021f          AND      r2,r2,#0x1f           ;291
00008a  4315              ORRS     r5,r5,r2              ;291
00008c  4335              ORRS     r5,r5,r6              ;291
00008e  433d              ORRS     r5,r5,r7              ;291
000090  f8895000          STRB     r5,[r9,#0]            ;291
                  |L6.148|
000094  7821              LDRB     r1,[r4,#0]            ;297
000096  f04f0200          MOV      r2,#0                 ;297
00009a  0709              LSLS     r1,r1,#28             ;297
00009c  d50c              BPL      |L6.184|
00009e  7c20              LDRB     r0,[r4,#0x10]         ;299
0000a0  f8993000          LDRB     r3,[r9,#0]            ;299
0000a4  f023030c          BIC      r3,r3,#0xc            ;299
0000a8  f8893000          STRB     r3,[r9,#0]            ;299
0000ac  f8993000          LDRB     r3,[r9,#0]            ;299
0000b0  4303              ORRS     r3,r3,r0              ;299
0000b2  f8893000          STRB     r3,[r9,#0]            ;299
0000b6  4610              MOV      r0,r2                 ;299
                  |L6.184|
0000b8  f8882014          STRB     r2,[r8,#0x14]         ;303
0000bc  e7bb              B        |L6.54|
;;;307    
                          ENDP

0000be  0000              DCW      0x0000
                  |L6.192|
                          DCD      pFlash
                  |L6.196|
                          DCD      0x40023c16
                  |L6.200|
                          DCD      0x40023c14

;*** Start embedded assembler ***

#line 1 "..\\..\\Drivers\\STM32F2xx_HAL_Driver\\Src\\stm32f2xx_hal_flash_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f2xx_hal_flash_ex_c_6648b60e____REV16|
#line 129 "..\\..\\Drivers\\CMSIS\\Include\\core_cmInstr.h"
|__asm___24_stm32f2xx_hal_flash_ex_c_6648b60e____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f2xx_hal_flash_ex_c_6648b60e____REVSH|
#line 144
|__asm___24_stm32f2xx_hal_flash_ex_c_6648b60e____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
